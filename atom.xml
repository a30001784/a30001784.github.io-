<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>带你走进美丽的墨尔本</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ozairs.com/"/>
  <updated>2019-03-08T23:32:18.088Z</updated>
  <id>http://blog.ozairs.com/</id>
  
  <author>
    <name>Mark Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析</title>
    <link href="http://blog.ozairs.com/%E7%94%B5%E5%BD%B1/%E7%A7%91%E6%81%A9%E5%85%84%E5%BC%9F%E7%94%B5%E5%BD%B1%EF%BC%9A%E3%80%8A%E5%B7%B4%E6%96%AF%E7%89%B9%C2%B7%E6%96%AF%E5%85%8B%E9%B2%81%E6%A0%BC%E6%96%AF%E7%9A%84%E6%AD%8C%E8%B0%A3%E3%80%8B%E8%B5%8F%E6%9E%90/"/>
    <id>http://blog.ozairs.com/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/</id>
    <published>2019-03-08T22:47:51.000Z</published>
    <updated>2019-03-08T23:32:18.088Z</updated>
    
    <content type="html"><![CDATA[<p>如果要选当代文学性最强的一个（对）美国导演，我首推科恩兄弟（兄：乔尔·科恩Joel Coen；弟：伊桑·科恩Ethan Coen）：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/1.jpg" alt=""></p><p>从处女作《血迷宫》（Blood Simple）开始，科恩兄弟的影片就带有十分强烈的后现代性和黑色幽默，剧情环环相扣、步步为营，诸多巧合汇集在一起的“滚雪球式”故事让人们记住了这对锋芒毕露的电影人。  </p><p> 在《巴顿·芬克》（Barton Fink）中兄弟俩将自己的存在主义观点和意识流手法融入作品中，讲述一位剧作家的创作焦虑，隐晦复杂的戏中戏文本嵌套，现实世界与意识世界的交叠让人们看清了科恩兄弟思想的深邃。这部作品也为兄弟俩带来了第一座金棕榈。</p><p> 后来斩获奥斯卡最佳影片的《老无所依》其片名（No Country ForOld Man）来自叶芝的长诗《驶向拜占庭》。这部影片被称作是“西部片的终结”：凶手逃了，赃款散了，警察老了，是一次完完全全的反类型。影片原作来自“海明威与福克纳的唯一继承者”科马克·麦卡锡（Cormac McCarthy），科恩兄弟将他笔下那个蛮荒苍凉的西部世界完美地复刻了下来。</p><p> 如今，科恩兄弟已经成为美国家喻户晓的导演，他们作品序列中的元素也日渐丰富，包括歌舞（《醉乡民谣》《凯撒万岁》等）、宗教元素（《逃狱三王》《老妇杀手》等）以及各种类型片都有涉猎。但始终贯彻的一点是他们对生活无常的透彻洞悉。</p><p>今年亮相于威尼斯电影节的新作《巴斯特·斯克鲁格斯的歌谣》（The Ballads of Buster Scruggs）由网飞Netflix出品，将六个独立的短篇故事合为一部长片，斩获了威尼斯最佳原创剧本。六个故事均是发生在18-19世纪的美国西部，神秘莫测而又无法无天的西部世界正是科恩兄弟故事展开的最佳舞台。  </p><p> 六个故事影调鲜明，从各个层次各个视角展现西部世界。别具一格的表演风格，精准的剪辑节奏，以及熟悉的世事无常的突转。每一个故事都充满了科恩兄弟的奇思妙想，每一个故事都是充满着黑色幽默的寓言故事。  </p><p>在接下来的文章里，我将和大家谈谈自己对这六个故事的个人理解，所以真的真的会剧透，建议大家先去看原片啦！  </p><p>一、《巴斯特·斯克鲁格斯的歌谣》The Ballad of Buster Scruggs</p><p> <img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/2.jpg" alt=""></p><p>You see’em, you play’em. 看了牌就得玩。<br> 故事简介：身着一袭白衣的通缉犯牛仔巴斯特·斯克鲁格斯是声名远扬的神枪手，他虽然是不法之徒却贯彻着自己的原则，绝不惹是生非，但也绝不忍气吞声。他一人一马地流浪，一路上免不了发生些流血事件。最后他遇到了另一个神枪手，死在了他的枪口下。</p><p> 在故事的开头，巴斯特有一段这样的独白：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/3.jpg" alt=""></p><p>这是巴斯特的信条，他相信“愿赌服输”，为自己无力改变的事情而动肝火是很没有必要的。之后他在一间酒吧里，他坐上了一个虚位以待的牌局，可放下的牌实在不好，在看了之后巴斯特反悔了。这是他“不愿意赌的局”。但其余的人告诉他：“看了牌就得玩。”有个人甚至拿枪威胁他（这违反店内需要寄存武器的规定）。没有赢的把握，巴斯特宁愿退出，他说：</p><p> <img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/4.jpg" alt=""></p><p>拿枪指着他的人（名叫乔Joe）却不以为然，倚仗着武器的淫威逼迫巴斯特。但最终他被巴斯特的天秀操作撂倒了。死者的弟弟叫嚣着要巴斯特出来决斗，但也很快被巴斯特精湛的射技干掉。  </p><p>接下来登场的牛仔也要求决斗，巴斯特欣然接受，在他看来不过是又多一个手下败将而已：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/5.jpg" alt=""></p><p>但这一次被撂倒的却是他自己。巴斯特死后的灵魂与牛仔合唱了一曲 When The Cowboy Trades His Spurs For Wings（《当牛仔的马刺换作翅膀》）。</p><p>这个故事是在用“牌局”和“决斗”做讽刺：人们往往在自以为胜券在握时遭遇失败，就如同手持武器的乔和十分自地信迈向决斗地点的巴斯特。在很多时候这种“牌局”是没有选择权的，你能做的唯有选择豁达地释然，一如开头巴斯特的独白。在踏上这条路的时候，巴斯特已然做好了觉悟。</p><p> 有意思的是科恩兄弟用两个构图完全一致的镜头，暗示了这种际遇的传递：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/6.jpg" alt=""></p><p>这个身着一袭黑衣的牛仔，也会遇到下一个比他更快的神枪手。</p><p> 这个故事糅合了最多的科恩元素，情节突转、类型片戏仿（牛仔决斗）、黑色幽默、宗教情怀和歌舞桥段，于是这个短篇可以总领整部影片，相信兄弟俩也拍得很过瘾。</p><p>二、《阿尔戈多内斯附近》Near Algodones</p><p>故事简介：一个走投无路的牛仔决定抢劫银行，但却失败了被拘捕。在即将被处以绞刑的时候，一群印第安人土著截杀了执法者；牛仔被路过的牧牛人所救，但那个牧牛人实际上是个盗牛贼，牛仔被诬陷并被送到镇上处死。</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/7.jpg" alt=""></p><p> 这个故事的架构就十分简单了，是典型的“塞翁失马”模式，用一次次的突转来表现旦夕祸福、造化弄人。在最后的绞刑架上，牛仔对旁边泣不成声的人说：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/8.jpg" alt=""></p><p>在死之前，牛仔还和看台下的一个姑娘对上眼了。这实在是很残忍的事，在你准备接受死亡的命运之后，你又产生了对生的渴求，实在是死不瞑目的折磨。但好歹，处刑的人用麻袋帮你合上了眼睛。</p><p>三、《饭票》（Meal Ticket）</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/9.jpg" alt=""></p><p>The quality of mercy is not strained, it droppeth like gentle rainfrom heaven.<br> 慈悲不是出于勉强，它就像甘霖一样从天上降下尘世。<br> 故事简介：一个男人依靠着一个没有四肢的残疾演说家卖艺维生。但越来越菲薄的收入令他不再信任这位少年，尤其在他看到一只“会算数的鸡”吸引了一大群人的目光之后，他决定替换掉自己的“演员”。</p><p>这是整部影片中文学性最为集中的一篇，尤其反映在残疾演说家的台词里，引用了雪莱的《奥斯曼狄斯》、《圣经·创世纪》该隐与约伯的故事、林肯的葛底斯堡演说，其间穿插着莎士比亚的商籁诗句和《暴风雨》台词。这样的演说注定是令人费解的拼凑文本，但演说家生动俄演绎还是让不少听众产生了敬畏之心。</p><p>故事在愈发酷冽的蓝色影调里发展着，男人和少年的关系在不断地发生微妙的转变。最终他抛弃了少年，而收获了一只“天才阉鸡”。</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/10.jpg" alt=""></p><p>这个短篇开头的引语出自莎翁的《威尼斯商人》，这或许是唯利是图的商人们的自我开脱之词，在这里则是少年内心的真实写照，也是对那个男人的穷形尽相。有趣的是篇名“饭票”的讽刺意味，男人与少年实际上是相依为命，互相提供所需，彼此都是对方的“饭票”。他买下了那只鸡，却不明白“算数”是如何做到的，迎接他的必将是一个饥寒交迫的寒冬。</p><p>四、《黄金谷》（All GoldCanyon）</p><p>这儿是峡谷的碧绿心脏，布局呆板的峭壁一到这里，豁然开朗，一改粗犷的格调，形成一个隐蔽的小天地，洋溢着甜蜜、丰满、柔和的情趣。这儿的一切都在安息，甚至狭窄的小溪也收住了汹涌的奔腾，渐渐变成了恬静的池塘。一头绛红的、角上丫杈很多的公鹿，低垂着头，半闭着眼睛，站在深及膝盖的水里，正在打盹儿。<br>故事简介：淘金老人来到一片风景绝好的土地，希望能够找到属于自己的金矿。就在他辛劳了无数个日夜后终于寻到矿脉之时，他被人从背后用枪袭击了……</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/11.jpg" alt=""></p><p>这个故事并非科恩兄弟原创，而是改编自美国著名短篇小说家杰克·伦敦（Jack London）的同名作品，影片中出现的句子也是原作的引文。</p><p>杰克·伦敦用生动隽永的文笔展示了他自己的生态观：“飘动的声音和飘忽的颜色，似乎共同编织出一片精美、无形的轻纱，而它就是这里的精神。这是和平的精神，没有死亡，只有安然跳动的生命，安谧却不死寂，……这里的精神是具有生命气息的和平精神，一切都陶醉在繁荣的安逸与满足中，丝毫不受远方战争传闻的搅扰。”  </p><p>但是淘金者的到来打破了这一切，他开掘土地、钓捕银鱼、还偷走了一颗鸟蛋，他惊扰了这里的生灵，随即将那一片“轻纱”撕破了。没有战争搅扰的大自然，也就迎来了淘金者和偷袭者之间的争斗。我们会很自然地生发联想，这就是人类亘古以来就有的习性：争抢资源，引发战争，破坏自然；在我们尚未脱离对自然秩序的崇拜的时代，我们会敬畏、会感恩，而当我们逐渐把握了自然规律并想改造自然之后，我们就成为了自然精神的入侵者和破坏者。</p><p>在这个故事中，偷袭者是妄图不劳而获的人，但最终被淘金老人反杀；而当老人离开这里的时候，慷慨馈赠他金矿的自然只是重归了和平却没有报复他。看着那一地满目疮痍的矿洞，我们需要警醒：不是不报，时候未到。</p><p>从技法上而言，淘金老人与偷袭者之间的争斗既是故事的一部分，又与整个故事产生了相互映照：即老人是弱势的、被劫掠的，类似于大自然；偷袭者是强势的、施暴的，类似于破坏自然者。因此这个故事这看上去只是一个“绿水青山就是金山银山”的口号宣传片，其内在层次还是十分丰富的，这便是科恩兄弟故事的魅力所在。</p><p>五、《受惊的女子》The Gal Who Got Rattled</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/12.jpg" alt=""></p><p> Mr.Arthur had no idea about what he would say to Billy Knapp.<br>亚瑟先生不知道该如何向比利·奈普开口。<br>故事简介：隆格巴小姐为了一个潜在的结婚对象将要随车队搬迁至俄勒冈。在途中她的哥哥感染霍乱去世，隆格巴小姐决定继续前进，马车领队比利·奈普则趁机向她表达结婚意向。但隆格巴小姐为了她的狗与大部队走散，在印第安人的袭击中饮弹自尽。</p><p>这个短篇中隆格巴小姐一直处于“受惊”的不安状态，这种状态既是瞬时的“受惊吓”，比如当她以为自己的狗被一枪打死之后她放下捂住耳朵的手，随即又被接连的两声枪响吓到：</p><p>更是一种无所适从的彷徨，比如本来该由她哥哥来撮合她和未婚夫的婚事，在她哥哥死后就没有人帮她介绍了，而她又举目无亲，不知该去往未知的俄勒冈还是该回到无依无靠的故地。</p><p>但真正让这个短篇得名的是隆格巴小姐最后的举动。她和另一个领队亚瑟先生受到了印第安人的包围，亚瑟给了她一把手枪并告诫她，必要的时候就用这把枪自尽，被印第安人逮到是绝对的生不如死。就在亚瑟先生费尽千辛万苦击退了印第安人之后，他却发现隆格巴小姐已经自杀了。所以这才是真正“got rattled”的时候。</p><p>亚瑟先生很是悔恨，如果他没有向隆格巴小姐交代那些话，或许她就不会死了。所以当他回到车队的时候，“不知道该如何向比利·奈普开口”。  其实自杀这一枪是隆格巴小姐的性格与处境使然，她本人是唯唯诺诺、谨小慎微的人，而又独自面对了亲人的离去，不知道生活该如何继续下去。在这种精神上的高压之下，她的弦最终被印第安人切断了。</p><p>有趣的是，如果我们再往回倒一点，如果隆格巴小姐没有去找她的那只狗就不会和大部队走散了，如果比利·奈普当时把那只狗打死就好了。这就是科恩兄弟的编剧惯例了：用看似微不足道的细节买下伏笔，事件与事件的相互关联最终导向了无可挽回的结局，也就是“节外生枝”与“滚雪球”。</p><p> 隆格巴小姐的扮演者佐伊·卡赞（Zoe Kazan）奉献了十分精湛的表演，将科恩影片中独有的悲哀与滑稽的混合表现得十分自然而又不失夸张的喜感：</p><p>Is it？<br>这个短篇的文字技巧是“开头与结尾的移位”，开篇的引文部分其实是故事的结尾，而故事的结尾暗示着无数情节的开始：亚瑟先生将怎么去措辞，比利·奈普将对此产生什么反应等等。故事的主线是隆格巴小姐的受惊自尽，支线则是比利·奈普对她的求婚，主线结束之后，支线留作结尾形成了“复调式”的故事体式，大大拓宽了文本的阅读空间。</p><p>六、《遗体》The Mortal Remains</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/13.jpg" alt=""></p><p> Whether or not he heard, the coachman did not slow.<br>不论他是否听见，马车夫都不会慢下来。<br> 故事简介：五个身份不同的陌生人：一个法国男人，一个皮草猎人，一个贵妇人，一胖一瘦两个赏金猎人（他们要将通缉犯的遗体运往镇上的警署）；一同乘马车前往一个共同的目的地。期间贵妇突发了哮喘，法国男人让马车夫停车，但他充耳不闻。马车夫一直前进着，直到一处旅馆门口停下。</p><p>这个故事架构非常简单，但却异常精彩，它表现了科恩兄弟极高的文学造诣，通篇只有两个场景：马车内和目的地，但却有十分充足的戏剧张力。故事中的对白非常冗杂，意涵丰富，值得细读，在这里主要是想集中讨论这个故事的两种解读：（1）这个故事是实指，就是五个人一同前往一个共同的目的地，他们身份明确，目的地也明确（片中说是摩根堡），马车夫不愿意停下来可能只是出于某种意愿。他们最后下榻到同一处旅馆。  （2）这个故事是虚指，象征的是人走向死亡的全过程。两个赏金猎人相当于是摆渡人，而这永远不会慢下来的马车就是永远不会停留的“时间”。最后停留的终点就是“死亡”。</p><p>对第二种解读的佐证能够很轻易地在片中找到，比如两个赏金猎人自称“死神”“灵魂的收割者”，在他们眼中只有两种人：“活人”与“死人”；故事发生的整个时间段是从日薄西山到彻底的冷夜；旅馆大门的雕刻装饰是天使与恶魔（公羊头代表撒旦）等等。但是这些证据都可以有非象征性的解读，故事耐人寻味的含蓄正在于此。</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/14.jpg" alt=""></p><p>片中比较重要的一段话是赏金猎人所讲的“夜归人”（The Midnight Caller）故事，这是一个家喻户晓从小听到大的故事，但每每听我们都还是会被吸引：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/15.jpg" alt=""></p><p>这段话的妙处在于文本意涵的层层嵌套：最里面是这个“夜归人”故事；在这之外是听故事的人，他们喜欢这个故事既与自己相关又与自己无关；在这之外是这个现象的叙述者：赏金猎人，叙述的对象是对面的几个乘客，让他们联想自己是否有相同的经验；最后是银幕外的我们，当我们在听这整个故事的时候，我们是否也产生了相同的想法？</p><p>我们再来看这个故事的标题：遗体，英文原名是the mortal remains，即凡人的遗留物。当片中的人物意识到自己的处境不对的时候，我们也就该意识到这个“遗体”指代的自然不是两位赏金猎人运送的遗体，而是这三位乘客——</p><p>再扩大一点，是每一个人：没有人会永垂不朽，所有人都是暂时活动着的“遗体”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果要选当代文学性最强的一个（对）美国导演，我首推科恩兄弟（兄：乔尔·科恩Joel Coen；弟：伊桑·科恩Ethan Coen）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;从处女
      
    
    </summary>
    
      <category term="电影" scheme="http://blog.ozairs.com/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影" scheme="http://blog.ozairs.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>世界上十大图书馆之一——维多利亚州立图书馆</title>
    <link href="http://blog.ozairs.com/uncategorized/%E4%B8%96%E7%95%8C%E4%B8%8A%E5%8D%81%E5%A4%A7%E5%9B%BE%E4%B9%A6%E9%A6%86%E4%B9%8B%E4%B8%80%E2%80%94%E2%80%94%E7%BB%B4%E5%A4%9A%E5%88%A9%E4%BA%9A%E5%B7%9E%E7%AB%8B%E5%9B%BE%E4%B9%A6%E9%A6%86/"/>
    <id>http://blog.ozairs.com/uncategorized/世界上十大图书馆之一——维多利亚州立图书馆/</id>
    <published>2019-03-08T04:01:41.000Z</published>
    <updated>2019-03-08T04:06:53.599Z</updated>
    
    <content type="html"><![CDATA[<p>维多利亚州立图书馆State Library of Victoria位于墨尔本的市中心，地理位置绝佳，就在热闹的Melbourne Central车站正对面。</p><p>在图￼书馆前方大草皮上是大家歇息的好去处，只要有太阳的时候，墨尔本人是绝对不会错过在这里晒日光浴的任何机会。</p><p><img src="/uncategorized/世界上十大图书馆之一——维多利亚州立图书馆/1.jpg" alt=""></p><p>距离图书馆入口处不远的地方，有大西洋棋让大家切磋一下棋艺。</p><p><img src="/uncategorized/世界上十大图书馆之一——维多利亚州立图书馆/2.jpg" alt=""></p><p>而在Swanston St and La Trobe St交叉口的人行道上，有个像是图书馆沉到地底的公共艺术。</p><p><img src="/uncategorized/世界上十大图书馆之一——维多利亚州立图书馆/3.jpg" alt=""></p><p>图书馆前方有不少铜像，正前方的雕像是大法官Redmond Barry。</p><p><img src="/uncategorized/世界上十大图书馆之一——维多利亚州立图书馆/4.jpg" alt=""></p><p>这座图书馆成立于1854年，与墨尔本大学同年完工。州立图书馆为当地建筑师Joseph Reed设计，在之前的文章介绍过，这位设计师还包办设计了墨尔本其它著名的建筑物。像是皇家展览馆、墨尔本市政厅、圣米迦勒联合教会等等</p><p>在1856年维多利亚州立图书馆正式对外开放，经过了一个半世纪的发展，藏书体系越来越完善，目前该馆有超过两百多万的图书，以及一百多万件的地图、手稿、报册、图册等文献，馆藏范围种类繁多，史料价值高，完整的保存着维多利亚的文化。</p><p>图书馆内部有宽敞的展览大厅、画廊、简报厅、会议室、书报区，还有一个放置电玩的多媒体休闲室，馆方也充分的利用这些场地举办论坛、表演、讲座等活动。</p><p><img src="/uncategorized/世界上十大图书馆之一——维多利亚州立图书馆/5.jpg" alt=""></p><p>除了丰富的藏书外，馆内还有陈列油画、雕像等艺术品，是一个集学习、哲学、科学及艺术的殿堂，在此不仅仅为学生、作家和爱思考的人提供一个便利的资源中心，它也是维多利亚州人文历史的主要记载地。</p><p>大部分游客都是为了馆内的圆顶阅览室而来，这部分于1913年开放，其八角空间可容纳一万本书及五百位以上的阅览者。</p><p><img src="/uncategorized/世界上十大图书馆之一——维多利亚州立图书馆/6.jpg" alt=""></p><p>阅览室上方的圆顶，采用自然透光的设计，1913年由三位建筑师Bates、Peebles、Smarts的设计，仿效英国图书馆The British Library和华盛顿国会图书馆Library of Congress的圆顶。</p><p><img src="/uncategorized/世界上十大图书馆之一——维多利亚州立图书馆/7.jpg" alt=""></p><p>楼梯旁还保留着早期的旋转楼梯，但现今已不再使用。</p><p>在图书馆的顶楼还有一幅三公尺高的莎士比亚之窗Shakespeare window，是澳大利亚第一幅人物像彩色玻璃拼花窗Stained glass window。</p><p><img src="/uncategorized/世界上十大图书馆之一——维多利亚州立图书馆/8.jpg" alt=""></p><p>墨尔本能有个这么美的图书馆实在太幸运了，若是有机会来到墨尔本的话一定要来这走走。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;维多利亚州立图书馆State Library of Victoria位于墨尔本的市中心，地理位置绝佳，就在热闹的Melbourne Central车站正对面。&lt;/p&gt;
&lt;p&gt;在图￼书馆前方大草皮上是大家歇息的好去处，只要有太阳的时候，墨尔本人是绝对不会错过在这里晒日光浴的任
      
    
    </summary>
    
    
      <category term="澳洲" scheme="http://blog.ozairs.com/tags/%E6%BE%B3%E6%B4%B2/"/>
    
  </entry>
  
  <entry>
    <title>墨尔本斯巴达挑战赛侧记</title>
    <link href="http://blog.ozairs.com/uncategorized/%E5%A2%A8%E5%B0%94%E6%9C%AC%E6%96%AF%E5%B7%B4%E8%BE%BE%E6%8C%91%E6%88%98%E8%B5%9B%E4%BE%A7%E8%AE%B0/"/>
    <id>http://blog.ozairs.com/uncategorized/墨尔本斯巴达挑战赛侧记/</id>
    <published>2019-03-02T10:54:01.000Z</published>
    <updated>2019-03-02T11:33:31.534Z</updated>
    
    <content type="html"><![CDATA[<p>今年是墨尔本斯巴达越野挑战赛正赛的日子，虽然墨尔本的气温仍然居高不下，但是依然无法抵挡大批粉丝对于这项赛事的热情。今年的比赛得到了凯西市政府的大力支持，作为东道主，我也有幸作为志愿者参加了这项一年一度的重要赛事。</p><p><img src="/uncategorized/墨尔本斯巴达挑战赛侧记/0.pic.jpg" alt="Tooradin Estate停车场"></p><p>【赛事的主旨】</p><p>今年的墨尔本斯巴达挑战赛，是首次在凯西市举办，在Tooradin Estate的一个史诗般的新场地中，选手们有机会穿越泥泞，跳过火，征服障碍。</p><p>斯巴达挑战的宗旨，就是要让选手们组成一个团队或独自行进，并找出像斯巴达一样参加比赛意味着什么通过挑战赛，选手们将会看到自己征服障碍，如奥林巴斯，长矛，大力神升降机，戒指等等！</p><p>【赛事的类型】</p><p>1、5公里竞速赛</p><p>这是斯巴达挑战赛最短的距离，选手们需要翻越20-23 障碍。比赛适合各级运动员使用; 从斯巴达的第一次选手到经验丰富的选手。</p><p><img src="/uncategorized/墨尔本斯巴达挑战赛侧记/2.pic.jpg" alt="5km竞速赛-1"></p><p>2、斯巴达超级赛，13公里，24-29 障碍</p><p>这是斯巴达挑战赛中距离赛事。由于比竞速赛的距离更长，障碍更多，超级赛将测试您的耐力，毅力和勇气。这个13公里的超级大道包含超过25个特色斯巴达障碍物，通过更加坚固和更加崎岖的地形。</p><p><img src="/uncategorized/墨尔本斯巴达挑战赛侧记/3.pic.jpg" alt="13km竞速赛"></p><p>3、2合1挑战赛</p><p>在同一天同时参加超级赛和竞速赛，并节省一些现金。通过获得竞速赛和超级赛奖牌，你将成为Spartan Trifecta的三分之二！</p><p>4、儿童挑战赛</p><p>斯巴达挑战赛都是为了让自己变得泥泞而且充满乐趣！赛事的使命是鼓励孩子们出去，活跃，享受自己。这就是为什么我们的斯巴达儿童比赛鼓励年轻的斯巴达人在非竞争，安全和支持的环境中拥有一大堆泥泞的乐趣来征服他们的目标！孩子们会跑步，平衡，走路，爬行，爬上充满乐趣的障碍课程，帮助他们了解成为斯巴达人的感受！比赛经过专门设计，适合所有年龄段和健身水平的孩子。</p><p><img src="/uncategorized/墨尔本斯巴达挑战赛侧记/4.pic.jpg" alt="儿童挑战赛"></p><p>斯巴达儿童挑战赛是1-2公里纯净的泥泞快乐。所有障碍都是成人障碍物的微型版本，并包含巨大的充气滑梯等附加功能，让孩子在参赛过程中，享受赛事带来的最大快乐。</p><p>孩子们可以进入两个不同的类别。有3到8岁的Spartan Juniors（完成1节课程）和9-13岁（完成2圈）的Big Kids类别。</p><p>成年人可以选择跟随课程并帮助他们的孩子。父母也可以选择与孩子或观众一起跑步。</p><p>【参赛观感】</p><p>今天虽然又是一个炎热的酷暑，特别是挑战赛的过程中，选手们要走草地，过泥塘，翻越各种障碍，可以说比赛是对身体机能的一次极限挑战，也是对于意志品质的一次终极考验。只有克服了身体和意志的障碍，才能成为一名真正的斯巴达勇士。</p><p>很荣幸今天能作为志愿者，参加斯巴达挑战赛正赛。作为斯巴达竞赛的志愿者，虽然牺牲了周末的时间，但是能有机会感受到斯巴达赛及选手们冲天的参赛热情，并且能够参与到比赛中，让选手和和观众们拥有史诗般的体验，也算是一种难得而又珍贵的体验了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年是墨尔本斯巴达越野挑战赛正赛的日子，虽然墨尔本的气温仍然居高不下，但是依然无法抵挡大批粉丝对于这项赛事的热情。今年的比赛得到了凯西市政府的大力支持，作为东道主，我也有幸作为志愿者参加了这项一年一度的重要赛事。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uncategorize
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://blog.ozairs.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于自己你需要知道的10件事</title>
    <link href="http://blog.ozairs.com/uncategorized/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%B7%B1%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B-1/"/>
    <id>http://blog.ozairs.com/uncategorized/关于自己你需要知道的10件事-1/</id>
    <published>2019-03-01T10:42:42.000Z</published>
    <updated>2019-03-01T10:45:18.793Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uncategorized/关于自己你需要知道的10件事-1/1.jpeg" alt=""></p><p>我最近在INC发现了这篇文章，并且非常喜欢文中提到的挑战自己的方式，你是否问过自己以下这些棘手的问题。</p><p>无论我们的年龄，在生命的每个阶段，我们都应该花点时间进行评估，进行自我评估。我们应该知道我们是谁，理解我们想要什么。我们应该问自己一些棘手的问题，清楚地看到自己，并在必要时进行调整。这并不能保证成功，但它可以保证您对自己的生活方式感到满意。以下是我们应该始终能够对自己说的一些事情：</p><p>\1.  <strong>我</strong>遵从我内心的声音。即使有更轻松的选择，我也相信自己内心的声音能够引导我。我做了正确的事情，我忠于自己。</p><p>\2. <strong>我</strong>总是很积极。我把每一种情况视为祝福或教训。我一直保持着希望和乐观的态度。</p><p>\3. <strong>我很负责</strong>。我已经获得了信任，并对自己负责。我没有找借口，也没有责备别人。我是演出的明星，我很尊重我。</p><p>4.<strong>我很感激</strong>。我很感激我的生命。每个开门和关门，我都很感激。我很感激未来的希望。</p><p>\5. <strong>我选择原谅</strong>。我已经原谅了任何冤枉我的人。我原谅，因为我永远无法完全理解他们的处境，因为抱怨只会让我失望。</p><p>\6. <strong>我不留遗憾</strong>。好的，坏的，或者其他的，我永远不会后悔任何机会，即使结果很糟糕。我一直爱着，微笑，并尽我所能地生活，我永远不会后悔。</p><p>\7.  <strong>我对自己诚实</strong>。我能够看着镜子里的脸，告诉他们真相。我是谁，我想成为谁，我喜欢什么，想要改变什么，我在哪里以及我想去哪里。这就是梦想成为现实的方式。</p><p>\8. <strong>我为自己感到骄傲</strong>。我为自己的成就感到自豪。大多数情况下，我为我这个人感到骄傲。最后，我会因为善良，诚实，勤奋，奉献和公平的人而被人们铭记。</p><p>\9. <strong>我不是一个轻言放弃的人</strong>。我不说，’我做不到’。我从不放弃，我从不放弃。我全力以赴。</p><p>\10. <strong>我还没</strong>完。只要我有气息，我就会继续生活，笑，给予，并尝试。如果只是一个裂缝，总会有一扇门打开。</p><p>俗话说“我们必须先学会爱自己”。给自己一个休息时间。改变你的想法，试着去做到最好。</p><p>【The Original Article】I recently came across this article in INC and loved the way it challenged you to consider whether you had asked yourself the tough questions.</p><p>Regardless of our age, at each stage of life, we should take a moment to take stock, to do a self-evaluation. We should know who we are and understand what we want. We should ask ourselves the tough questions, see ourselves clearly, and make adjustments if necessary. This doesn’t guarantee success but it guarantees that you will feel good about how you are living your life. Here are some things we should always be able to say about ourselves:</p><p>\1.          <strong>I have followed my heart</strong>. I have trusted my inner voice to lead me even when there were easier roads. I have done the ‘right’ thing. I have been true to myself.</p><p>\2.          <strong>I have looked for the positive</strong>. I have treated every situation as a blessing or a lesson. I have kept hope and optimism on the forefront.</p><p>\3.          <strong>I am responsible</strong>. I have taken credit and held myself accountable. I’ve made no excuses, nor blamed another. I am the star of my show, and I own up to me.</p><p>\4.          <strong>I am grateful</strong>. I am grateful for the life I’ve been given. I’m grateful for every opened and closed door. I am grateful for the hope of more to come.</p><p>\5.          <strong>I have forgiven</strong>. I have forgiven any and everyone who has wronged me. I forgive because I can never fully understand their situation and because holding a grudge only holds me back.</p><p>\6.          <strong>I have no regrets</strong>. Good, bad, or otherwise, I will never regret any opportunity, even if it turned out badly. I have loved, laughed, and lived to the best of my ability, and I will never be sorry.</p><p>\7.          <strong>I am honest with myself</strong>. I am able to look at the face in the mirror and tell them the truth. Who I am and who I want to be, what I love and what I want to change, where I am and where I want to go. This is how dreams become reality.</p><p>\8.          <strong>I am proud of myself</strong>. I am proud of my accomplishments. Mostly, I am proud of the person I am. In the end, I will be remembered for the kind, honest, hard-working, giving, and fair person that I am.</p><p>\9.          <strong>I am not a quitter</strong>. I do not say, ‘I can’t’. I never give up, and I never give in. I give my all to every endeavour.</p><p>\10.       <strong>I am not finished</strong>. As long as I have breath, I will continue to live and laugh and give, and try. There is always a door that is open if only just a crack.</p><p>As the old saying goes, “we must first love ourselves”. Give yourself a break. Change what you, and be the best you can be.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/uncategorized/关于自己你需要知道的10件事-1/1.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我最近在INC发现了这篇文章，并且非常喜欢文中提到的挑战自己的方式，你是否问过自己以下这些棘手的问题。&lt;/p&gt;
&lt;p&gt;无论我们的年龄，在生命的每
      
    
    </summary>
    
    
      <category term="励志" scheme="http://blog.ozairs.com/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>澳洲随笔</title>
    <link href="http://blog.ozairs.com/uncategorized/%E6%BE%B3%E6%B4%B2%E9%9A%8F%E7%AC%94/"/>
    <id>http://blog.ozairs.com/uncategorized/澳洲随笔/</id>
    <published>2019-03-01T10:09:53.000Z</published>
    <updated>2019-03-01T10:38:49.484Z</updated>
    
    <content type="html"><![CDATA[<p>3月1日，时间过的很快，今天已经是长登墨尔本的第三周了。墨尔本的这个夏天特别的长，最高气温已经飙升到了39度，电台报道，今年可能是有史以来最长的一个夏天了。</p><p>虽然外面高温难耐，但此刻我的心情却是出奇的平静。在度过了刚刚登陆那几天衣食无着，百废待兴的日子之后，移居墨尔本的生活也逐渐步入了正轨。在登陆之前，也算是制定了一个小小的澳洲移民计划，在此3周即将结束之际也对计划做个小小的复盘，同时，对未来的日子也有了新的规划： </p><p>完成清单： </p><p>1、买车，提车，贴膜；</p><p>2、接收包裹，收拾房间，清理房屋，花园；</p><p>3、OQP（Overseas Qualified Professional）课程开始就读（这是一项维多利亚州政府开办的TAFE课程，旨在帮助新移民更快地融入到墨尔本当地生活）；</p><p>4、咨询澳洲当地私立医院入住的流程，联系医生，预约问诊。这一项原来是难度最大的，由于对墨尔本人生地不熟，而且澳洲的医疗制度和国内的医疗制度又有很大的差异，刚开始来的时候都有些无从下手。幸亏有墨尔本当地友人的鼎力相助，去医院实地进行了参观，了解了入住和接生的整体流程，并且幸运地和产科医生取得了联系，预约了初诊时间。</p><p>待完成清单： </p><p>1、在澳洲找到第一份工作： 虽然没来之前，对于在西方世界找工作一事心里没有什么底，并且也做了一定的困难准备。但是，当真正开始投身到澳洲的人才市场，正式开始找工作的时候，才真正体会到，所面临的竞争和压力。</p><p>在这里，已经不再是和中国人竞争，你需要同白种人，印度人拼脑力，比智力，而且是用一种远远不习惯的语言工具，其中的不习惯和不适应是显而易见的。虽然语言、沟通、职场环境各方面都存在的问题，但好在有了OQP课程的帮助，找工作的征途还是在朝着一条看得见的方向在前进。</p><p>接下来的一个月会是关键的一个月，计划闭关一周，重点突击下专业领域的知识，希望能够有助于迈过面试这道坎，早日把自己给卖出去！！！</p><p>2、在澳洲开始学车，熟悉交规，争取在2季度前拿到驾照。</p><p>3、购买母婴用品，早好产前的准备和铺垫工作。</p><p>以上，就是来澳洲这三周的一点进展情况，写的有点乱，权当是对当前生活状态的一种记录吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;3月1日，时间过的很快，今天已经是长登墨尔本的第三周了。墨尔本的这个夏天特别的长，最高气温已经飙升到了39度，电台报道，今年可能是有史以来最长的一个夏天了。&lt;/p&gt;
&lt;p&gt;虽然外面高温难耐，但此刻我的心情却是出奇的平静。在度过了刚刚登陆那几天衣食无着，百废待兴的日子之后，移
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://blog.ozairs.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>澳洲日记：班吉尔广场（Bunji Place)一览</title>
    <link href="http://blog.ozairs.com/uncategorized/%E6%BE%B3%E6%B4%B2%E6%97%A5%E8%AE%B0%EF%BC%9A%E7%8F%AD%E5%90%89%E5%B0%94%E5%B9%BF%E5%9C%BA%EF%BC%88Bunji-Place-%E4%B8%80%E8%A7%88/"/>
    <id>http://blog.ozairs.com/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/</id>
    <published>2019-02-23T23:19:33.000Z</published>
    <updated>2019-03-01T00:38:10.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="班吉尔广场（Bunjil-Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。"><a href="#班吉尔广场（Bunjil-Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。" class="headerlink" title="班吉尔广场（Bunjil Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。"></a>班吉尔广场（Bunjil Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。</h3><h3 id="2017年10月29日，班吉尔广场正式对外开放。2019年2月14日，我第一次遇见班吉尔广场，趁着清晨游客较少的时段，比较仔细地欣赏了一番，感触颇多。"><a href="#2017年10月29日，班吉尔广场正式对外开放。2019年2月14日，我第一次遇见班吉尔广场，趁着清晨游客较少的时段，比较仔细地欣赏了一番，感触颇多。" class="headerlink" title="2017年10月29日，班吉尔广场正式对外开放。2019年2月14日，我第一次遇见班吉尔广场，趁着清晨游客较少的时段，比较仔细地欣赏了一番，感触颇多。"></a>2017年10月29日，班吉尔广场正式对外开放。2019年2月14日，我第一次遇见班吉尔广场，趁着清晨游客较少的时段，比较仔细地欣赏了一番，感触颇多。</h3><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323c00001bbbb14e01d10dde0.jpg-mobile.png" alt=""></p><h3 id="班吉尔广场的正面，“远看”似乎并不十分“起眼”，——这是澳洲很多公共建筑的共同特征，需要“近观”，才能发现它的“宏伟”与“壮丽”。"><a href="#班吉尔广场的正面，“远看”似乎并不十分“起眼”，——这是澳洲很多公共建筑的共同特征，需要“近观”，才能发现它的“宏伟”与“壮丽”。" class="headerlink" title="班吉尔广场的正面，“远看”似乎并不十分“起眼”，——这是澳洲很多公共建筑的共同特征，需要“近观”，才能发现它的“宏伟”与“壮丽”。"></a>班吉尔广场的正面，“远看”似乎并不十分“起眼”，——这是澳洲很多公共建筑的共同特征，需要“近观”，才能发现它的“宏伟”与“壮丽”。</h3><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323c00001b8791d021f2358b0.jpg-mobile.png" alt=""></p><h3 id="班吉尔广场的背面，比较内敛、含蓄的蓝灰色，闪烁着淡淡的蓝宝石般的光辉。"><a href="#班吉尔广场的背面，比较内敛、含蓄的蓝灰色，闪烁着淡淡的蓝宝石般的光辉。" class="headerlink" title="班吉尔广场的背面，比较内敛、含蓄的蓝灰色，闪烁着淡淡的蓝宝石般的光辉。"></a>班吉尔广场的背面，比较内敛、含蓄的蓝灰色，闪烁着淡淡的蓝宝石般的光辉。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323c000016af815ace3f013e9.jpg-mobile.png" alt=""></p><h3 id="班吉尔广场的正门，12米高大的透明玻璃幕墙，显示出一种坦诚开放、包容的姿态，欢迎来自四面八方的人们；向两翼竭力伸展的网状木质构架，给人一种展翅欲飞、努力向上的振奋。"><a href="#班吉尔广场的正门，12米高大的透明玻璃幕墙，显示出一种坦诚开放、包容的姿态，欢迎来自四面八方的人们；向两翼竭力伸展的网状木质构架，给人一种展翅欲飞、努力向上的振奋。" class="headerlink" title="班吉尔广场的正门，12米高大的透明玻璃幕墙，显示出一种坦诚开放、包容的姿态，欢迎来自四面八方的人们；向两翼竭力伸展的网状木质构架，给人一种展翅欲飞、努力向上的振奋。"></a>班吉尔广场的正门，12米高大的透明玻璃幕墙，显示出一种坦诚开放、包容的姿态，欢迎来自四面八方的人们；向两翼竭力伸展的网状木质构架，给人一种展翅欲飞、努力向上的振奋。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323c00001c96c11fd729a28a0.jpg-mobile.png" alt=""></p><h3 id="事实上，班吉尔广场之所以称为“Bunjil”，就是因为它的造型像征着澳洲土著的神鹰“Bunjil”，“Bunjil”被认为是澳洲土著的祖先之一，其原型是澳洲体型最大的猛禽“楔形尾鹰”。"><a href="#事实上，班吉尔广场之所以称为“Bunjil”，就是因为它的造型像征着澳洲土著的神鹰“Bunjil”，“Bunjil”被认为是澳洲土著的祖先之一，其原型是澳洲体型最大的猛禽“楔形尾鹰”。" class="headerlink" title="事实上，班吉尔广场之所以称为“Bunjil”，就是因为它的造型像征着澳洲土著的神鹰“Bunjil”，“Bunjil”被认为是澳洲土著的祖先之一，其原型是澳洲体型最大的猛禽“楔形尾鹰”。"></a>事实上，班吉尔广场之所以称为“Bunjil”，就是因为它的造型像征着澳洲土著的神鹰“Bunjil”，“Bunjil”被认为是澳洲土著的祖先之一，其原型是澳洲体型最大的猛禽“楔形尾鹰”。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c44738be000001ccd451a012101dbc.jpg-mobile.png" alt=""></p><h3 id="从正门高大的玻璃幕墙内，向外观看班吉尔广场的露天剧场，气势宏大，视野开阔，赏心悦目。"><a href="#从正门高大的玻璃幕墙内，向外观看班吉尔广场的露天剧场，气势宏大，视野开阔，赏心悦目。" class="headerlink" title="从正门高大的玻璃幕墙内，向外观看班吉尔广场的露天剧场，气势宏大，视野开阔，赏心悦目。"></a>从正门高大的玻璃幕墙内，向外观看班吉尔广场的露天剧场，气势宏大，视野开阔，赏心悦目。</h3><h3 id="班吉尔广场室内共三层，这是贯通一二三层的主大厅，两根巨大的网状艺术支柱支撑起整座屋顶，——如果说“Bunjil-Place”象征着一只展翅欲飞的“神鹰”，那么这两根巨大的支柱就是“神鹰”的双腿。大厅底层有访客中心接待处、图书馆接待处与入口、剧院售票处与入口、表演中心接待处与入口，以及通向二三楼的旋转式楼梯，场面宏大，手机只能拍出其中很一小部分。"><a href="#班吉尔广场室内共三层，这是贯通一二三层的主大厅，两根巨大的网状艺术支柱支撑起整座屋顶，——如果说“Bunjil-Place”象征着一只展翅欲飞的“神鹰”，那么这两根巨大的支柱就是“神鹰”的双腿。大厅底层有访客中心接待处、图书馆接待处与入口、剧院售票处与入口、表演中心接待处与入口，以及通向二三楼的旋转式楼梯，场面宏大，手机只能拍出其中很一小部分。" class="headerlink" title="班吉尔广场室内共三层，这是贯通一二三层的主大厅，两根巨大的网状艺术支柱支撑起整座屋顶，——如果说“Bunjil Place”象征着一只展翅欲飞的“神鹰”，那么这两根巨大的支柱就是“神鹰”的双腿。大厅底层有访客中心接待处、图书馆接待处与入口、剧院售票处与入口、表演中心接待处与入口，以及通向二三楼的旋转式楼梯，场面宏大，手机只能拍出其中很一小部分。"></a>班吉尔广场室内共三层，这是贯通一二三层的主大厅，两根巨大的网状艺术支柱支撑起整座屋顶，——如果说“Bunjil Place”象征着一只展翅欲飞的“神鹰”，那么这两根巨大的支柱就是“神鹰”的双腿。大厅底层有访客中心接待处、图书馆接待处与入口、剧院售票处与入口、表演中心接待处与入口，以及通向二三楼的旋转式楼梯，场面宏大，手机只能拍出其中很一小部分。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d00001413d79c011003470.jpg-mobile.png" alt=""></p><h3 id="从另一个角度看班吉尔广场主大厅的内部，画面左边是两根网状艺术支柱之一，右边是剧院售票处与入口，正前方是访客中心接待处（太远了，看不太清楚）。时间是2月14日星期天早上九点半，班吉尔广场刚刚开门，游客不多。"><a href="#从另一个角度看班吉尔广场主大厅的内部，画面左边是两根网状艺术支柱之一，右边是剧院售票处与入口，正前方是访客中心接待处（太远了，看不太清楚）。时间是2月14日星期天早上九点半，班吉尔广场刚刚开门，游客不多。" class="headerlink" title="从另一个角度看班吉尔广场主大厅的内部，画面左边是两根网状艺术支柱之一，右边是剧院售票处与入口，正前方是访客中心接待处（太远了，看不太清楚）。时间是2月14日星期天早上九点半，班吉尔广场刚刚开门，游客不多。"></a>从另一个角度看班吉尔广场主大厅的内部，画面左边是两根网状艺术支柱之一，右边是剧院售票处与入口，正前方是访客中心接待处（太远了，看不太清楚）。时间是2月14日星期天早上九点半，班吉尔广场刚刚开门，游客不多。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d0000113231e13d30e1c46.jpg-mobile.png" alt=""></p><h3 id="班吉尔广场主大厅天花板仰视，全部网状木质结构，朴实、明快、简谐、对称。"><a href="#班吉尔广场主大厅天花板仰视，全部网状木质结构，朴实、明快、简谐、对称。" class="headerlink" title="班吉尔广场主大厅天花板仰视，全部网状木质结构，朴实、明快、简谐、对称。"></a>班吉尔广场主大厅天花板仰视，全部网状木质结构，朴实、明快、简谐、对称。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d00001a51d172bc510fc00.jpg-mobile.png" alt=""></p><h3 id="位于班吉尔广场底层，具有800个观众席的现代风格剧场，据说音响效果达到世界一流水准。"><a href="#位于班吉尔广场底层，具有800个观众席的现代风格剧场，据说音响效果达到世界一流水准。" class="headerlink" title="位于班吉尔广场底层，具有800个观众席的现代风格剧场，据说音响效果达到世界一流水准。"></a>位于班吉尔广场底层，具有800个观众席的现代风格剧场，据说音响效果达到世界一流水准。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4457d23500001d55210d810e0195c.jpg-mobile.png" alt=""></p><h3 id="墨尔本号称“艺术之都”，戏院、剧场特多，班吉尔广场剧院似乎主要面对的是儿童与青少年观众，11月19日星期天上演的是儿童剧《舞蹈学校（School-of-Dance）》。"><a href="#墨尔本号称“艺术之都”，戏院、剧场特多，班吉尔广场剧院似乎主要面对的是儿童与青少年观众，11月19日星期天上演的是儿童剧《舞蹈学校（School-of-Dance）》。" class="headerlink" title="墨尔本号称“艺术之都”，戏院、剧场特多，班吉尔广场剧院似乎主要面对的是儿童与青少年观众，11月19日星期天上演的是儿童剧《舞蹈学校（School of Dance）》。"></a>墨尔本号称“艺术之都”，戏院、剧场特多，班吉尔广场剧院似乎主要面对的是儿童与青少年观众，11月19日星期天上演的是儿童剧《舞蹈学校（School of Dance）》。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c44581b6200001efb51370191030d0.jpg-mobile.png" alt=""></p><h3 id="班吉尔广场还有一个艺术画廊，这也是“艺术之都”墨尔本的特色，几乎可以肯定地说，在墨尔本，凡有博物馆、图书馆的地方必有艺术画廊，美术馆就更不必待言了。"><a href="#班吉尔广场还有一个艺术画廊，这也是“艺术之都”墨尔本的特色，几乎可以肯定地说，在墨尔本，凡有博物馆、图书馆的地方必有艺术画廊，美术馆就更不必待言了。" class="headerlink" title="班吉尔广场还有一个艺术画廊，这也是“艺术之都”墨尔本的特色，几乎可以肯定地说，在墨尔本，凡有博物馆、图书馆的地方必有艺术画廊，美术馆就更不必待言了。"></a>班吉尔广场还有一个艺术画廊，这也是“艺术之都”墨尔本的特色，几乎可以肯定地说，在墨尔本，凡有博物馆、图书馆的地方必有艺术画廊，美术馆就更不必待言了。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d00001dd7c3ed01ec4c180.jpg-mobile.png" alt=""></p><h3 id="艺术画廊举行的“班吉尔广场建筑艺术”的画展。"><a href="#艺术画廊举行的“班吉尔广场建筑艺术”的画展。" class="headerlink" title="艺术画廊举行的“班吉尔广场建筑艺术”的画展。"></a>艺术画廊举行的“班吉尔广场建筑艺术”的画展。</h3><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d0000156d01d39f73729c0.jpg-mobile.png" alt=""></p><h3 id="凯西市图书馆入口处的接待大厅。"><a href="#凯西市图书馆入口处的接待大厅。" class="headerlink" title="凯西市图书馆入口处的接待大厅。"></a>凯西市图书馆入口处的接待大厅。</h3><h3 id="班吉尔广场的主要功能之一就是公共图书馆，大约三分之一的空间（包括一二三层）为凯西市图书馆所有，占地面积是旧凯西市图书馆的两倍还多，凯西市图书馆也因此更名为“班吉尔图书馆”。"><a href="#班吉尔广场的主要功能之一就是公共图书馆，大约三分之一的空间（包括一二三层）为凯西市图书馆所有，占地面积是旧凯西市图书馆的两倍还多，凯西市图书馆也因此更名为“班吉尔图书馆”。" class="headerlink" title="班吉尔广场的主要功能之一就是公共图书馆，大约三分之一的空间（包括一二三层）为凯西市图书馆所有，占地面积是旧凯西市图书馆的两倍还多，凯西市图书馆也因此更名为“班吉尔图书馆”。"></a>班吉尔广场的主要功能之一就是公共图书馆，大约三分之一的空间（包括一二三层）为凯西市图书馆所有，占地面积是旧凯西市图书馆的两倍还多，凯西市图书馆也因此更名为“班吉尔图书馆”。</h3><h3 id="澳洲具有众多的大大小小的图书馆，所有的公共图书馆均免费向公众开放，是澳洲的文化特色之一；澳洲人重视阅读、喜爱阅读，从“班吉尔图书馆”可见一斑。"><a href="#澳洲具有众多的大大小小的图书馆，所有的公共图书馆均免费向公众开放，是澳洲的文化特色之一；澳洲人重视阅读、喜爱阅读，从“班吉尔图书馆”可见一斑。" class="headerlink" title="澳洲具有众多的大大小小的图书馆，所有的公共图书馆均免费向公众开放，是澳洲的文化特色之一；澳洲人重视阅读、喜爱阅读，从“班吉尔图书馆”可见一斑。"></a>澳洲具有众多的大大小小的图书馆，所有的公共图书馆均免费向公众开放，是澳洲的文化特色之一；澳洲人重视阅读、喜爱阅读，从“班吉尔图书馆”可见一斑。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d000017120702b76ab1790.jpg-mobile.png" alt=""></p><h3 id="从图书馆二楼俯瞰一楼接待大厅。"><a href="#从图书馆二楼俯瞰一楼接待大厅。" class="headerlink" title="从图书馆二楼俯瞰一楼接待大厅。"></a>从图书馆二楼俯瞰一楼接待大厅。</h3><p>### </p><h3 id="图书馆一楼除了接待大厅，还开辟了若干不同类型的小型阅览室。"><a href="#图书馆一楼除了接待大厅，还开辟了若干不同类型的小型阅览室。" class="headerlink" title="图书馆一楼除了接待大厅，还开辟了若干不同类型的小型阅览室。"></a>图书馆一楼除了接待大厅，还开辟了若干不同类型的小型阅览室。</h3><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d0000148711e721eb317ef.jpg-mobile.png" alt=""></p><h3 id="图书馆二楼大厅，包括一个开放式的多功能演讲厅，以及一排排摆满各种书籍的书架、一个个桌椅齐全、采光优良的阅览室。见微知著，图书馆内的书架都不高，书籍触手可及，也体现了图书馆处处为读者着想的理念。"><a href="#图书馆二楼大厅，包括一个开放式的多功能演讲厅，以及一排排摆满各种书籍的书架、一个个桌椅齐全、采光优良的阅览室。见微知著，图书馆内的书架都不高，书籍触手可及，也体现了图书馆处处为读者着想的理念。" class="headerlink" title="图书馆二楼大厅，包括一个开放式的多功能演讲厅，以及一排排摆满各种书籍的书架、一个个桌椅齐全、采光优良的阅览室。见微知著，图书馆内的书架都不高，书籍触手可及，也体现了图书馆处处为读者着想的理念。"></a>图书馆二楼大厅，包括一个开放式的多功能演讲厅，以及一排排摆满各种书籍的书架、一个个桌椅齐全、采光优良的阅览室。见微知著，图书馆内的书架都不高，书籍触手可及，也体现了图书馆处处为读者着想的理念。</h3><h3 id="图书馆二楼的多功能演讲厅，座位的设计十分有趣，与通往三楼的楼梯浑然一体，左侧有一个两米来宽的人行通道，才是真正的楼梯。"><a href="#图书馆二楼的多功能演讲厅，座位的设计十分有趣，与通往三楼的楼梯浑然一体，左侧有一个两米来宽的人行通道，才是真正的楼梯。" class="headerlink" title="图书馆二楼的多功能演讲厅，座位的设计十分有趣，与通往三楼的楼梯浑然一体，左侧有一个两米来宽的人行通道，才是真正的楼梯。"></a>图书馆二楼的多功能演讲厅，座位的设计十分有趣，与通往三楼的楼梯浑然一体，左侧有一个两米来宽的人行通道，才是真正的楼梯。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d00001bb3914fc11889bd0.jpg-mobile.png" alt=""></p><h3 id="从图书馆三楼俯瞰二楼阅览室，各部分既相互连通又相对独立，加上明亮温馨的柔光，给读者营造出安静舒适的阅读空间。"><a href="#从图书馆三楼俯瞰二楼阅览室，各部分既相互连通又相对独立，加上明亮温馨的柔光，给读者营造出安静舒适的阅读空间。" class="headerlink" title="从图书馆三楼俯瞰二楼阅览室，各部分既相互连通又相对独立，加上明亮温馨的柔光，给读者营造出安静舒适的阅读空间。"></a>从图书馆三楼俯瞰二楼阅览室，各部分既相互连通又相对独立，加上明亮温馨的柔光，给读者营造出安静舒适的阅读空间。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d000016c3319e76256db50.jpg-mobile.png" alt=""></p><h3 id="图书馆三楼的阅览室，空间的划分又有自己不同的特色，但总体上仍保持了各部分既相互连通又相对独立的风格，读者能够快速穿梭游走其间，查找图书资料十分方便，同时又保证了阅览室内潜心阅读的人尽可能不受干扰。身临其境，不知不觉就会被无形中“如饥似渴”的阅读氛围所感染。"><a href="#图书馆三楼的阅览室，空间的划分又有自己不同的特色，但总体上仍保持了各部分既相互连通又相对独立的风格，读者能够快速穿梭游走其间，查找图书资料十分方便，同时又保证了阅览室内潜心阅读的人尽可能不受干扰。身临其境，不知不觉就会被无形中“如饥似渴”的阅读氛围所感染。" class="headerlink" title="图书馆三楼的阅览室，空间的划分又有自己不同的特色，但总体上仍保持了各部分既相互连通又相对独立的风格，读者能够快速穿梭游走其间，查找图书资料十分方便，同时又保证了阅览室内潜心阅读的人尽可能不受干扰。身临其境，不知不觉就会被无形中“如饥似渴”的阅读氛围所感染。"></a>图书馆三楼的阅览室，空间的划分又有自己不同的特色，但总体上仍保持了各部分既相互连通又相对独立的风格，读者能够快速穿梭游走其间，查找图书资料十分方便，同时又保证了阅览室内潜心阅读的人尽可能不受干扰。身临其境，不知不觉就会被无形中“如饥似渴”的阅读氛围所感染。</h3><p>### </p><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d0000145d616a07e6bdbf0.jpg-mobile.png" alt=""></p><h3 id="从图书馆二楼阅览室眺望班吉尔广场外部环境，草地青青、绿树环绕，原有的水上运动中心（游泳馆）、儿童游乐场与新建的班吉尔广场浑然一体，对面的WestField购物中心则与班吉尔广场遥遥相望。"><a href="#从图书馆二楼阅览室眺望班吉尔广场外部环境，草地青青、绿树环绕，原有的水上运动中心（游泳馆）、儿童游乐场与新建的班吉尔广场浑然一体，对面的WestField购物中心则与班吉尔广场遥遥相望。" class="headerlink" title="从图书馆二楼阅览室眺望班吉尔广场外部环境，草地青青、绿树环绕，原有的水上运动中心（游泳馆）、儿童游乐场与新建的班吉尔广场浑然一体，对面的WestField购物中心则与班吉尔广场遥遥相望。"></a>从图书馆二楼阅览室眺望班吉尔广场外部环境，草地青青、绿树环绕，原有的水上运动中心（游泳馆）、儿童游乐场与新建的班吉尔广场浑然一体，对面的WestField购物中心则与班吉尔广场遥遥相望。</h3><p>### </p><h3 id="本文一开头便说“班吉尔广场”是大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。但中国大陆的“文化宫”，“文化”二字名不符实，说是“文化”实则“娱乐”，称之为“娱乐宫”更加贴切，而且商业气息越来越浓。澳洲墨尔本的这座“班吉尔广场”，堪称真正意义上的“文化宫”，集图书、戏剧、音乐、美术于一身，为凯西市市民提供了一个文化与娱乐活动的场所；无论外观还是内涵，“班吉尔广场”处处都体现出了浓厚的“文化”精神。"><a href="#本文一开头便说“班吉尔广场”是大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。但中国大陆的“文化宫”，“文化”二字名不符实，说是“文化”实则“娱乐”，称之为“娱乐宫”更加贴切，而且商业气息越来越浓。澳洲墨尔本的这座“班吉尔广场”，堪称真正意义上的“文化宫”，集图书、戏剧、音乐、美术于一身，为凯西市市民提供了一个文化与娱乐活动的场所；无论外观还是内涵，“班吉尔广场”处处都体现出了浓厚的“文化”精神。" class="headerlink" title="本文一开头便说“班吉尔广场”是大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。但中国大陆的“文化宫”，“文化”二字名不符实，说是“文化”实则“娱乐”，称之为“娱乐宫”更加贴切，而且商业气息越来越浓。澳洲墨尔本的这座“班吉尔广场”，堪称真正意义上的“文化宫”，集图书、戏剧、音乐、美术于一身，为凯西市市民提供了一个文化与娱乐活动的场所；无论外观还是内涵，“班吉尔广场”处处都体现出了浓厚的“文化”精神。"></a>本文一开头便说“班吉尔广场”是大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。但中国大陆的“文化宫”，“文化”二字名不符实，说是“文化”实则“娱乐”，称之为“娱乐宫”更加贴切，而且商业气息越来越浓。澳洲墨尔本的这座“班吉尔广场”，堪称真正意义上的“文化宫”，集图书、戏剧、音乐、美术于一身，为凯西市市民提供了一个文化与娱乐活动的场所；无论外观还是内涵，“班吉尔广场”处处都体现出了浓厚的“文化”精神。</h3><p><img src="/uncategorized/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d00001bdbd1e8117001b5c.jpg-mobile.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;班吉尔广场（Bunjil-Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。&quot;&gt;&lt;a href=&quot;#班吉尔广场（Bunjil-Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫
      
    
    </summary>
    
    
      <category term="澳洲" scheme="http://blog.ozairs.com/tags/%E6%BE%B3%E6%B4%B2/"/>
    
  </entry>
  
  <entry>
    <title>Why do I need a cover letter</title>
    <link href="http://blog.ozairs.com/uncategorized/Why-do-I-need-a-cover-letter/"/>
    <id>http://blog.ozairs.com/uncategorized/Why-do-I-need-a-cover-letter/</id>
    <published>2019-02-23T12:03:18.000Z</published>
    <updated>2019-02-23T12:04:19.345Z</updated>
    
    <content type="html"><![CDATA[<p>If you have ever read one of the job ads I’ve posted, you would have seen my request for a cover letter. After reading some of the responses to that request, I’m sure the initial thought might have been, “Why the do I need a cover letter?”</p><p>There’s no doubt I have read a bucket load of cover letters. Those that I have read which are poor far outweigh those that are good. It’s like comparing the sheer size of Jupiter to the Forest Moon of Endor; small and non-existent. Many of you, I am sure, wonder why you should bother at all. I tend to agree if the purpose of your cover letter is to be general and vague. Believe it or not, there have been times when I have called a candidate on the strength of their cover letter, alone.</p><p>So, what makes one cover letter stand out over another in my opinion?</p><p>Before I get to that, I want to share an experience in my career that has led to my opinion and writing this blog post. Before establishing my recruitment business, I worked in IT as a BDM for over a decade. In that time, I worked on countless proposals for my customers. It was always a collaborative process. My job was to get the frame of the document and the requirements clear. I would engage experts to provide the technical content of our solution. I would speak to relevant internal teams and third parties around our commercial model. Once I had all the information I needed, there was only one thing left to do. I needed to write my executive summary.</p><p>I read a great book many years ago called Persuasive Business Proposals – Writing to Win More Customers, Clients, and Contracts by Tom Sant. On page 138, the chapter headed Executive Summary, the first line sets the theme of that chapter; <em>The executive summary is the single most important part of your proposal.</em> This line and the entire chapter changed how I wrote proposals forever. It resulted in me progressing to more shortlists and winning more deals. I even had a customer once ask me to write an executive summary to explain a proposal I hadn’t even written.</p><p>The very premise of an executive summary in a business proposal got me thinking how similar one is, or should be, to a cover letter. If you are selling yourself to an employer, should you treat your resume as a business proposal? If so, why are you not introducing your solution (you) to the hiring manager’s problem with an effective executive summary? Tom goes on to say; <em>the executive summary is the only part that’s likely to be read by everybody involved in making the decision. In fact, it’s the only part of your proposal that some decision makers will read at all.</em> Now, I know in a recruitment process that’s unlikely to happen. Your resume will get read at some point, but there are some significant parallels to draw here.</p><p>If a stakeholder can progress a proposal based on an executive summary, your cover letter can make a big impact too.</p><p>I remember the old way I used to write a proposal and the way my customer would read them. I’d articulate my understanding of the problem and the outcome they were aiming to achieve. I’d relate their situation to the broader market. Our solution would then follow and the technical justification to support my claim. All important stuff. There would be pages and pages of diagrams, tables, jargon and blah blah blah. They’d read page after page until they found one of the most important things they were looking for to see if the discussion was worth continuing. The price. It was one of the most critical pieces of the puzzle, and yet I had it hidden in the shadows of my document. It’s no wonder people read my proposals like a Herald Sun reading sports enthusiast, from back to front.</p><p>The first time I put my pricing in the executive summary was a real test of nerves. I was shitting myself. “What if they reject us before even looking at our solution?” However, that didn’t happen. The most important information was at the front. Our understanding of the problem, the key themes of our solution to address it and the price. The rest of the business proposal became the supporting documentation. What I found was it gave us more air time with our customer than we had before. It demonstrated a level of confidence in our solution. I found that more customers wanted to get me in to discuss the detail of the solution.</p><p>A cover letter that addresses your customer, in the same way, will show the same confidence. It will demonstrate that you understand the role and why, in short, you are the right person for the job.</p><p>An executive summary always exists as a part of the business proposal document. You want to make sure it’s the first thing your customer reads. I think cover letters should be the same. Not a separate document, but the first page of your resume. If you have two documents, your cover letter is less likely to be read after the resume has been opened first.</p><p>Usually, recruiters will only attach one document with a candidate in their databases. For future roles, it’s beneficial to have everything in the same document. A cover letter in the resume will offer another page of content to where keywords can be found.  </p><p>Over my time, I have read countless cover letters that read like the narrative of a novel. Usually, they are one or two pages, densely populated with words. At first glance, they seem like a fair investment of time to read. However, for a cover letter, such a style doesn’t address the time-poor nature of your reader.</p><p>Make your cover letter one page, the first thing someone sees. Be specific. Use dot points and have them well spaced (one and a half spaces works well for me) so they are easy to read. When you find a job advertisement you want to apply for, focus on the requirements section. Ask yourself, “what are the three critical things I think these guys are looking for?” Those lines will be explicit in the skill or experience they’re after. This is what you should prioritise and address in your cover letter. Don’t bother with the general requirements as you’ll only respond with general statements. These are the requirements like ‘excellent communication skills’ or ‘works well in a team.’ These things you can demonstrate in an interview. A good cover letter cuts specific words or phrases out of the advertisement. They do this, so it couldn’t be any clearer what they are trying to address. It’s a risk leaving it to chance that your audience will be able to interpret your resume in the way you want. This is where you should help them out. Point directly to the experience or skill. Say, “there, that’s where I did it!” And point to it from your cover letter.</p><p>Being able to highlight what you think is important will help a recruiter find what they are looking for. However, if anything, it will help you qualify if, in fact, you are right for the job.</p><p>The role of a recruitment consultant is not easy. Many of us are working on ten, twenty, even more positions at a given time. If you consider putting forward three or four candidates per role, that’s a lot to manage. We coordinate client briefings, write advertisements and drive proactive campaigns. We accept applications, conduct phone screenings and send out rejection emails. We organise interviews, build shortlists, lock in candidates to meet with clients. We help with salary negotiations, references and sending out offers. And all the time, keep our bosses off our backs maintaining weekly KPI’s. It ain’t easy, and we’re often left feeling like a panting sheepdog at the end of each day. We receive hundreds of applications per role. With limited minutes in the day, the trick, as a recruiter, is to find what you need as quickly as possible. You want to find what you need, pick up the phone and progress the candidate to the next stage. It’s like a game of Crash Bandicoot; every requirement you meet grants you another few seconds of reading time. However, offer a passage of boring fluff, and you go backwards. And if you do make it to the end of the level, that’s when you get the call from a recruiter. They are ringing to have an in-depth discussion with you about your application.</p><p>There is no doubt that applying for a job through an advertisement is one of the hardest things to do. How do you stand out through words on a page? With so many lousy cover letters out there, I believe this is where you can answer that question. In the process, you will save the recruiter time trying to find what they’re looking for in your resume.</p><p>If you think of it like this: the executive summary, your cover letter, is the map to the island of your resume. Be bold and tell a hiring manager exactly where to find what they are looking for. Tell them why you are right for the job, and maybe, you’ll be that next candidate who stands out from the crowd.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have ever read one of the job ads I’ve posted, you would have seen my request for a cover letter. After reading some of the respon
      
    
    </summary>
    
    
      <category term="求职" scheme="http://blog.ozairs.com/tags/%E6%B1%82%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>Are Australia’s ‘secondary’ cities still a bargain, or have they run their race?</title>
    <link href="http://blog.ozairs.com/uncategorized/Are-Australia%E2%80%99s-%E2%80%98secondary%E2%80%99-cities-still-a-bargain-or-have-they-run-their-race/"/>
    <id>http://blog.ozairs.com/uncategorized/Are-Australia’s-‘secondary’-cities-still-a-bargain-or-have-they-run-their-race/</id>
    <published>2019-02-21T00:21:58.000Z</published>
    <updated>2019-02-21T00:39:45.031Z</updated>
    
    <content type="html"><![CDATA[<p>Australia’s capital cities may be coming off the boil, but what of their metropolitan siblings?</p><p>Secondary cities such as Geelong, Newcastle and Launceston have been on a run,  proving more affordable options for buyers after prices shot up in the closest major capital city. But with prices in some capitals declining – most notably in Sydney and Melbourne – some secondary cities now don’t look quite as good value as they did a year or two ago.</p><p><img src="/uncategorized/Are-Australia’s-‘secondary’-cities-still-a-bargain-or-have-they-run-their-race/Newcastle_NSW_iStock-993478226_asty9r.jpg" alt=""></p><p>The outlook for prices in major regional cities Newcastle, Wollongong, Gold Coast, Sunshine Coast, Geelong and Launceston is analysed below.</p><h4 id="Secondary-cities-boomed-after-major-cities-became-too-expensive"><a href="#Secondary-cities-boomed-after-major-cities-became-too-expensive" class="headerlink" title="Secondary cities boomed after major cities became too expensive"></a>Secondary cities boomed after major cities became too expensive</h4><p>When capital city prices become too expensive for first-home buyers and investors, aspiring capital city home buyers often look to nearby regional cities as a cheaper alternative. These secondary cities are often close enough to a major capital that people can commute to the capital city for work.</p><p>Price growth in major cities and secondary cities generally track pretty closely together, but sometimes with a delay of around a year. For some cities, the major city in some city-pairs can lead turning points in the price growth of the secondary city.</p><p>Sydneysiders consider Newcastle and Wollongong, Melburnians often look to Geelong, and Launceston, Tasmania’s second-largest city, is considered after Hobart. In Queensland, the typical house in Brisbane is cheaper than in the Gold Coast and the Sunshine Coast, but these coastal cities are both within commuting distance to Brisbane and are obvious alternatives to Queensland’s capital.</p><p>Property prices in Wollongong, Newcastle and Geelong began rising a year or two after Sydney and Melbourne property prices began taking off around 2013. Launceston house prices have increased significantly since 2017, a couple of years after Hobart’s price boom started in 2015. While price growth has been more subdued up north, Sunshine Coast and Gold Coast house prices have increased by more than those in Brisbane.</p><table><thead><tr><th>Notes: Capital city house prices are Australian Property Monitor city regions and are a stratified median price. Secondary cities are ABS Significant Urban Areas and are a raw median price.</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>Most secondary cities have experienced stronger house price growth than their nearest capital city</strong>Median house price, December quarter</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td><strong>2015</strong></td><td><strong>2016</strong></td><td><strong>2017</strong></td><td><strong>2018</strong></td><td><strong>Per cent change,**</strong>2015-2018**</td></tr><tr><td><strong>Sydney</strong></td><td><strong>$1,015,559</strong></td><td><strong>$1,131,882</strong></td><td><strong>$1,180,024</strong></td><td><strong>$1,062,619</strong></td><td><strong>5%</strong></td></tr><tr><td>Wollongong</td><td>$585,000</td><td>$665,000</td><td>$718,000</td><td>$705,000</td><td>21%</td></tr><tr><td>Newcastle</td><td>$453,000</td><td>$495,000</td><td>$535,000</td><td>$558,000</td><td>23%</td></tr><tr><td><strong>Melbourne</strong></td><td><strong>$718,853</strong></td><td><strong>$811,393</strong></td><td><strong>$909,463</strong></td><td><strong>$833,321</strong></td><td><strong>16%</strong></td></tr><tr><td>Geelong</td><td>$435,000</td><td>$465,000</td><td>$518,000</td><td>$557,500</td><td>28%</td></tr><tr><td><strong>Hobart</strong></td><td><strong>$347,841</strong></td><td><strong>$377,316</strong></td><td><strong>$440,970</strong></td><td><strong>$479,685</strong></td><td><strong>38%</strong></td></tr><tr><td>Launceston</td><td>$285,000</td><td>$285,000</td><td>$310,000</td><td>$344,000</td><td>21%</td></tr><tr><td><strong>Brisbane</strong></td><td><strong>$517,843</strong></td><td><strong>$546,984</strong></td><td><strong>$566,602</strong></td><td><strong>$566,058</strong></td><td><strong>9%</strong></td></tr><tr><td>Gold Coast</td><td>$545,000</td><td>$590,000</td><td>$620,000</td><td>$622,500</td><td>14%</td></tr><tr><td>Sunshine Coast</td><td>$540,000</td><td>$560,000</td><td>$615,000</td><td>$620,000</td><td>15%</td></tr></tbody></table><h4 id="What’s-in-store-for-secondary-cities-house-prices"><a href="#What’s-in-store-for-secondary-cities-house-prices" class="headerlink" title="What’s in store for secondary cities house prices?"></a>What’s in store for secondary cities house prices?</h4><p>Several indicators are used to predict price growth in secondary cities in the coming years.</p><p>The first method is <a href="http://petewargent.blogspot.com/2016/02/sydneybrisbane-house-price-ratio.html" target="_blank" rel="noopener">comparing</a> the ratio of the median price in a capital city with the secondary city’s median house price. The higher the capital city/secondary city price ratio, the more expensive the capital is compared to the secondary city (for example, a ratio of 2 indicates a typical house in the capital city is twice as expensive as the secondary city).</p><p>If a capital city/secondary city price ratio is below average, then this may indicate the secondary city is overvalued, suggesting the secondary city may see weaker price growth in the near future (and vice versa).</p><p>Buyer interest in an area – using changes in the number of views per listing from Domain’s website and apps, a leading indicator of future price growth – is also analysed. The economic outlook and job prospects in secondary cities, including the interconnectedness of the secondary city with the closest capital city, are also considered.</p><h5 id="Sydney-Wollongong"><a href="#Sydney-Wollongong" class="headerlink" title="Sydney-Wollongong"></a><strong>Sydney-Wollongong</strong></h5><p>While Wollongong’s economy is performing well, its prices are likely to stagnate or fall in the year ahead. The main reason is that the Sydney/Wollongong price ratio has fallen just below the 2010-2018 average and is back close to the level over the 2003-2013 period, where the median house price in Sydney prices was approximately 50 per cent higher than in Wollongong (see graph below). This fall in the price ratio was due to Sydney house prices falling by more than Wollongong house prices over the past two years.</p><p>While prices are likely to remain fairly stagnant over the next one to two years, Wollongong’s improving job market and growing links to Sydney should provide support to Wollongong property prices in the medium term.</p><p>Wollongong has seen <a href="https://www.rba.gov.au/speeches/2018/sp-so-2018-07-05.html" target="_blank" rel="noopener">strong jobs growth</a> in the past couple of years, with the unemployment rate for the Wollongong LGA falling from almost 7 per cent in 2016 to 4.5 per cent in 2018.</p><p>Wollongong is also a growing commuter town: in 2016, more than 21,000 people commuted from Wollongong to Sydney for work (the second largest regional city to capital city commuting pair, behind the Gold Coast to Brisbane). Wollongong and Illawarra residents may also benefit from the construction of the Badgerys Creek airport, which will be just over an hour’s drive from Wollongong, although construction is not expected to finish until 2026.</p><iframe scrolling="no" frameborder="0" allowfullscreen src="https://e.infogram.com/8caeb600-6ed2-4920-b7de-e5441e97c474?src=embed#async_embed" title="Newcastle and Wollongong" style="box-sizing: inherit; margin: 0px; padding: 0px; border: none; font: inherit; vertical-align: baseline; width: 549px; height: 1213px;"></iframe><h5 id="Sydney-Newcastle"><a href="#Sydney-Newcastle" class="headerlink" title="Sydney-Newcastle"></a><strong>Sydney-Newcastle</strong></h5><p>Newcastle is likely to see weak price growth or modest price falls in the next year or two. The Sydney/Newcastle price ratio has fallen below the 2010-2018 average as prices have grown slowly in Newcastle over the past year, but fell by 10 per cent in Sydney. This indicates Newcastle houses may be becoming overvalued compared to Sydney.</p><p>Buyer interest in Newcastle also appears to be waning. Domain’s views-per-listing measure for Newcastle fell by 2 per cent over 2018 as there were fewer buyers or they began looking elsewhere.</p><p>Another reason property price growth in Newcastle might be subdued is that there is no clear jobs boom on the horizon in the region. Newcastle’s unemployment rate has hovered around 6 per cent over the past couple of years, which is above Sydney’s unemployment rate of 4 per cent.</p><h5 id="Melbourne-Geelong"><a href="#Melbourne-Geelong" class="headerlink" title="Melbourne-Geelong"></a><strong>Melbourne-Geelong</strong></h5><p>The Melbourne/Geelong house price ratio fell significantly over 2018 as house prices <a href="https://www.domain.com.au/news/geelong-is-no-longer-the-states-hottest-real-estate-market-report-finds/" target="_blank" rel="noopener">increased in Geelong</a> and fell in Melbourne. The Melbourne/Geelong price ratio now sits at 1.5, meaning a typical house in Melbourne is 50 per cent more expensive than a typical Geelong house. The ratio is now below the 2010-2018 average.</p><p>With Melbourne house prices <a href="https://www.domain.com.au/news/domains-property-price-forecasts/" target="_blank" rel="noopener">forecast to continue falling</a> in 2019, Geelong’s relative affordability will decline further, so this may also see prices in Geelong stagnate or fall modestly. The Geelong market is already losing momentum, with house price growth slowing in Geelong over 2018 and Domain’s views-per-listing measure for Geelong falling at the end of 2018.</p><p>While the analysis of the Melbourne/Geelong price ratio suggests Geelong prices may fall, there are some promising signs for Geelong’s economy. Some sectors are seeing jobs growth, particularly <a href="https://www.smh.com.au/politics/federal/public-service-shrinks-to-smallest-size-in-12-years-20181019-p50ao7.html" target="_blank" rel="noopener">government</a> <a href="https://www.theage.com.au/national/victoria/one-council-area-s-growth-beats-three-biggest-regional-cities-combined-20180426-p4zbw8.html" target="_blank" rel="noopener">jobs</a>, and the city is on the <a href="https://www.abc.net.au/news/2018-11-22/victorian-manufacturing-jobs-rebound-into-high-tech-industy/10520342" target="_blank" rel="noopener">rebound</a> after the end of car manufacturing in 2016. Geelong’s unemployment rate has hovered around 6 per cent since 2016, but a very low unemployment rate in Melbourne of 4 per cent (down from 6 per cent over the past year) may help push Geelong’s unemployment rate lower.</p><p>Geelong is increasingly interconnected with Melbourne, which should see the Geelong property market become further tied to the Melbourne market. There are a number of transport infrastructure projects planned, or underway, that should improve travel times between Geelong and Melbourne, including the West Gate tunnel project and <a href="https://www.theage.com.au/national/victoria/geelong-to-melbourne-in-45-minutes-under-labor-s-regional-rail-plan-20181016-p509uu.html" target="_blank" rel="noopener">planned improvements</a> to the Geelong-Melbourne rail service. </p><p>These projects – combined with strong population growth and lots of homebuilding in Geelong and surrounding towns – mean the number of commuters from Geelong to Melbourne will likely increase from the 15,000 commuters in 2016.</p><iframe scrolling="no" frameborder="0" allowfullscreen src="https://e.infogram.com/a0fa6920-2802-432f-a65e-7ec8f978a273?src=embed#async_embed" title="Geelong and Launceston" style="box-sizing: inherit; margin: 0px; padding: 0px; border: none; font: inherit; vertical-align: baseline; width: 549px; height: 1189px;"></iframe><h5 id="Hobart-Launceston"><a href="#Hobart-Launceston" class="headerlink" title="Hobart-Launceston"></a><strong>Hobart-Launceston</strong></h5><p>An above-average Hobart/Launceston price ratio, increasing buyer interest and brighter economic prospects all indicate that Launceston may see further price growth over the next one to two years.</p><p>Price growth in Launceston, Tasmania’s <a href="https://blog.id.com.au/2018/population/population-trends/the-50-largest-cities-and-towns-in-australia-by-population-2018-update/" target="_blank" rel="noopener">second-largest city</a>, is closely correlated with price growth in Hobart. As Hobart’s prices boomed over the past few years – house prices have increased by more than 40 per cent since early 2015 – Launceston has become relatively cheaper. The Hobart/Launceston price ratio has increased, with a typical house in Hobart now 40 per cent more expensive than a typical Launceston house, up from a 20 per cent difference a few years ago. </p><p>But Launceston prices have also grown strongly since 2017, resulting in the price ratio stabilising, with the relative affordability of Launceston likely to encourage some investors and migrants to buy in Launceston instead of Hobart.</p><p>There is also growing buyer interest in Launceston. Views per listing in Launceston increased by about 40 per cent over 2018.</p><p>Launceston’s economic prospects are also improving. Unemployment recently fell to its lowest level in more than seven years, although it remains elevated at 6.8 per cent. Launceston is the subject of a <a href="https://citydeals.infrastructure.gov.au/launceston" target="_blank" rel="noopener">City Deal partnership</a> between federal, state and local governments to boost the Launceston economy. </p><p>The annual <a href="https://www.smh.com.au/entertainment/music/launceston-embraces-the-weird-as-mona-foma-finds-hew-home-20190121-p50sms.html" target="_blank" rel="noopener">MONA-FOMA festival</a> has been moved from Hobart to Launceston, so Launceston may benefit from some of the <a href="https://theconversation.com/hobarts-poorer-suburbs-are-missing-out-on-the-mona-effect-98003" target="_blank" rel="noopener">“MONA-effect”</a> that has boosted Hobart’s economy. A weaker Australian dollar should continue to support Tasmania’s economy by boosting <a href="https://www.abc.net.au/news/2018-07-23/tasmanias-business-outlook-good-in-deloitte-report/10025020" target="_blank" rel="noopener">tourist numbers</a> to Tasmania, as well as making Tasmania’s exports cheaper for overseas buyers.</p><p>Unlike other city-pairs considered in this article, few people travel between Launceston and Hobart for work (only 275 people commuted from Launceston to Hobart in 2016).</p><h5 id="Brisbane-Gold-Coast-and-Brisbane-Sunshine-Coast"><a href="#Brisbane-Gold-Coast-and-Brisbane-Sunshine-Coast" class="headerlink" title="Brisbane-Gold Coast and Brisbane-Sunshine Coast"></a><strong>Brisbane-Gold Coast and Brisbane-Sunshine Coast</strong></h5><p>Moderate price growth in the Gold Coast and the Sunshine Coast compared to slower price growth in Brisbane over the past two years has made a house in Brisbane relatively cheap compared to the coastal cities. The Brisbane/Gold Coast and Brisbane/Sunshine Coast price ratios have fallen and now sit below the 2010-2018 average, suggesting the coastal cities are slightly overvalued.</p><p>Because the smaller Queensland cities have a higher median price than Brisbane, the Brisbane/Gold Coast and Brisbane/Sunshine Coast price ratios are below 1, meaning a typical Brisbane house is about 10 per cent cheaper than in the Gold Coast and the Sunshine Coast.</p><p>South-east Queensland is highly interconnected. More than 30,000 people commuted from the Gold Coast to Brisbane for work in 2016, the biggest city pair in Australia, while 8400 people commuted from the Sunshine Coast to Brisbane. </p><p>Job prospects have been better in the Gold Coast than in the other cities. The Gold Coast’s unemployment rate has fallen from 5.5 per cent in late 2016 to 4.3 per cent at the end of 2018, whereas the unemployment rate hovered around 6 per cent in Brisbane in 2018 and increased to 6.5 per cent in 2018 in the Sunshine Coast.</p><p>The price ratios suggest Gold Coast and Sunshine Coast house prices may grow more slowly than <a href="https://www.domain.com.au/news/domains-property-price-forecasts/" target="_blank" rel="noopener">Brisbane in 2019</a>. But the Domain views-per-listing measure for the Gold Coast and the Sunshine Coast increased in the second half of 2018, and job prospects look better in the Gold Coast, suggesting there is scope for further price growth for both secondary cities.</p><iframe scrolling="no" frameborder="0" allowfullscreen src="https://e.infogram.com/39799caa-022c-431a-ab71-5410b72e0f93?src=embed#async_embed" title="Gold Coast and Sunshine Coast" style="box-sizing: inherit; margin: 0px; padding: 0px; border: none; font: inherit; vertical-align: baseline; width: 549px; height: 1213px;"></iframe><h4 id="The-outlook"><a href="#The-outlook" class="headerlink" title="The outlook"></a>The outlook</h4><p>Secondary cities are closely tied to the performance of their closest capital. Over the next few years, as jobs continue to <a href="https://grattan.edu.au/wp-content/uploads/2017/01/Productivity-and-geography-Productivity-Commission-Dec-2016.pdf" target="_blank" rel="noopener">concentrate</a> in Australia’s major cities, secondary cities will likely become even more closely linked to their nearest capital city.</p><p>The outlook for some capital cities is for further falls in 2019 before prices bottom-out later in the year, so the likelihood is secondary cities will see prices stagnate or fall in 2019, although Launceston looks to be an exception.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Australia’s capital cities may be coming off the boil, but what of their metropolitan siblings?&lt;/p&gt;
&lt;p&gt;Secondary cities such as Geelong, 
      
    
    </summary>
    
    
      <category term="Property" scheme="http://blog.ozairs.com/tags/Property/"/>
    
  </entry>
  
  <entry>
    <title>10 Most Popular DevOps Interview Questions and Answers</title>
    <link href="http://blog.ozairs.com/uncategorized/10-Most-Popular-DevOps-Interview-Questions-and-Answers/"/>
    <id>http://blog.ozairs.com/uncategorized/10-Most-Popular-DevOps-Interview-Questions-and-Answers/</id>
    <published>2019-02-20T08:28:55.000Z</published>
    <updated>2019-02-20T08:31:15.366Z</updated>
    
    <content type="html"><![CDATA[<p>Until recently, development engineers often worked in isolation, restricting their knowledge and skill sets to coding and testing, while operations engineers would focus on delivery and infrastructure configuration jobs, with minimal knowledge about software development.</p><p>However, with the fast-paced growth of the IT domain and technology advancements, the traditional approach of most IT companies has seen a paradigm shift. The culture of DevOps, although in its infancy, acts as the perfect bridge between IT development and operations and has become a popular methodology for software development in recent years.</p><p>An article entitled, “The DevOps Hiring Boom” claims that as many as 80 percent of Fortune 1000 organizations are expected to <a href="https://www.ca.com/us/rewrite/articles/devops/the-devops-hiring-boom-the-numbers-behind-the-numbers.html" target="_blank" rel="noopener">adopt DevOps by 2019</a>. A <a href="https://www.indeed.com/salaries/Development-Operations-Engineer-Salaries?from=serpsalaryblock" target="_blank" rel="noopener">survey conducted by Indeed.com</a>shows that the average annual salary of a DevOps engineer in the U.S. is approximately $123,439.</p><p>If you’ve started cross-training to prepare for development and operations roles in the IT industry, you know it’s a challenging field that will take some real preparation to break into. Here are some of the most common DevOps interview questions and answers that can help you while you prepare for DevOps roles in the industry.</p><p>Want to become certified DevOps Practitioner?</p><p><strong>Q1. What do you know about DevOps?</strong></p><p><strong>A1.</strong> Your answer must be simple and straightforward. Begin by explaining the growing importance of DevOps in the IT industry. Discuss how such an approach aims to synergize the efforts of the development and operations teams to accelerate the delivery of software products, with a minimal failure rate. Include how DevOps is a value-added practice, where development and operations engineers join hands throughout the product or service lifecycle, right from the design stage to the point of deployment.</p><p><strong>Q2.</strong> <strong>Why has DevOps gained prominence over the last few years?</strong></p><p><strong>A2.</strong> Before talking about the growing popularity of DevOps, discuss the current industry scenario. Begin with some examples of how big players such as <a href="https://techbeacon.com/10-companies-killing-it-devops" target="_blank" rel="noopener">Netflix and Facebook </a>are investing in DevOps to automate and accelerate application deployment and how this has helped them grow their business. Using Facebook as an example, you would point to  Facebook’s continuous deployment and code ownership models and how these have helped it scale up but ensure quality of experience at the same time. Hundreds of lines of code are implemented without affecting the quality, stability, and security.</p><p>Your next use case should be Netflix. This streaming and on-demand video company,  follows similar practices with fully automated processes and systems. Mention the user base of these two organizations: Facebook has 2 billion users while Netflix streams online content to more than 100 millions users worldwide.  These are great examples of how DevOps can help organizations to ensure higher success rates for releases, reduce lead time between bug fixes, streamline and continuous delivery through automation, and an overall reduction in manpower costs.</p><p><strong>Q3.</strong> <strong>Which are some of the most popular DevOps tools? Do you have experience working with any of these tools?</strong></p><p><strong>A3.</strong> The more popular DevOps tools include:</p><p>​        <strong>a.</strong> Selenium</p><p>​        <strong>b.</strong> Puppet</p><p>​        <strong>c.</strong> Chef</p><p>​        <strong>d.</strong> Git</p><p>​        <strong>e.</strong> Jenkins</p><p>​        <strong>f.</strong> Ansible</p><p>​        <strong>g.</strong> Docker</p><p>Want to master all these DevOps tools?</p><p>Thoroughly describe any tools that you are confident about, what it’s abilities are and why you prefer using it. For example, if you have expertise in Git, you would tell the interviewer that Git is a distributed Version Control System (VCS) tool that allows the user to track file changes and revert to specific changes when required. Discuss how Git’s distributed architecture gives it an added edge where developers make changes locally, and can have the entire project history on their local Git repositories, which can be later shared with other team members.</p><p>Now that you have mentioned VCS, be ready for the next obvious question.</p><p><strong>Q4.</strong> <strong>What is version control and why should VCS be used?</strong></p><p><strong>A4.</strong> Define version control and talk about how this system records any changes made to one or more files and saves them in a centralized repository. VCS tools will help you recall previous versions and perform the following:</p><ul><li>Go through the changes made over a period of time and check what works versus what doesn’t.</li><li>Revert specific files or specific projects back to an older version.</li><li>Examine issues or errors that have occurred due to a particular change.</li></ul><p>Using VCS gives developers the flexibility to simultaneously work on a particular file and all modifications can be logically combined later.</p><p><strong>Q5.</strong> <strong>Is there a difference between Agile and DevOps? If yes, please explain.</strong></p><p><strong>A5.</strong> As a DevOps engineer, interview questions like this are quite expected. Start by describing the obvious overlap between DevOps and Agile. Although implementation of DevOps is always in sync with Agile methodologies, there is a clear difference between the two. The principles of Agile are associated to seamless production or development of a piece of software. On the other hand, DevOps deals with development, followed by deployment of the software, ensuring faster turnaround time, minimum errors, and reliability.</p><p>If you are preparing for senior DevOps roles, prepare for these specific Chef DevOps interview questions.</p><p><strong>Q6.</strong> <strong>Why are configuration management processes and tools important?</strong></p><p><strong>A6.</strong> Talk about multiple software builds, releases, revisions, and versions for each software or testware that is being developed. Move on to explain the need for storing and maintaining data, keeping track of development builds and simplified troubleshooting. Don’t forget to mention the key CM tools that can be used to achieve these objectives. Talk about how tools like Puppet, Ansible, and Chef help in automating software deployment and configuration on several servers.</p><p><strong>Q7.</strong> <strong>How is Chef used as a CM tool?</strong></p><p><strong>A7.</strong> Chef is considered to be one of the preferred industry-wide CM tools. <a href="https://techbeacon.com/10-companies-killing-it-devops" target="_blank" rel="noopener">Facebook migrated its infrastructure</a> and backend IT to the Chef platform, for example. Explain how Chef  helps you to avoid  delays by automating processes. The scripts are written in Ruby. It can integrate with cloud-based platforms and configure new systems. It provides many libraries for infrastructure development that can later be deployed within a software. Thanks to its centralized management system, one Chef server is enough to be used as the center for deploying various policies.</p><p><strong>Q8.</strong> <strong>How would you explain the concept of “infrastructure as code” (IaC)?</strong></p><p><strong>A8.</strong> It is a good idea to talk about IaC as a concept, which is sometimes referred to as a programmable infrastructure, where infrastructure is perceived in the same way as any other code. Describe how the traditional approach to managing infrastructure is taking a back seat and how manual configurations, obsolete tools, and custom scripts are becoming less reliable. Next, accentuate the benefits of IaC and how changes to IT infrastructure can be implemented in a faster, safer and easier manner using IaC. Include the other benefits of  IaC like  applying regular unit testing and integration testing to infrastructure configurations, and maintaining up-to-date infrastructure documentation.</p><p>If you  have completed a <a href="https://www.simplilearn.com/cloud-computing/aws-devops-architect-certification-training" target="_blank" rel="noopener">certification on Amazon Web Services (AWS)</a>, and are interviewing for niche roles such as AWS-certified DevOps engineer, here are some AWS DevOps interview questions that you must be prepared for:</p><p><strong>Q9.</strong> <strong>What is the role of AWS in DevOps?</strong></p><p><strong>A9.</strong> When asked this question in an interview, get straight to the point by explaining that AWS is a cloud-based service provided by Amazon that ensures scalability through unlimited computing power and storage. AWS empowers IT enterprises to develop and deliver sophisticated products and deploy applications on the cloud. Some of its key services include Amazon CloudFront, Amazon SimpleDB, Amazon Relational Database Service, and Amazon Elastic Computer Cloud. Discuss the various cloud platforms and emphasize any big data projects that you have handled in the past using cloud infrastructure.  </p><p><strong>Q10.</strong> <strong>How is IaC implemented using AWS?</strong></p><p><strong>A10.</strong> Start by talking about the age-old mechanisms of writing commands onto script files and testing them in a separate environment before deployment and how this approach is being replaced by IaC. Similar to the codes written for other services, with the help of AWS, IaC allows developers to write, test, and maintain infrastructure entities in a descriptive manner, using formats such as JSON or YAML. This enables easier development and faster deployment of infrastructure changes.</p><p>As a <a href="https://www.simplilearn.com/devops-engineer-masters-program-certification-training" target="_blank" rel="noopener">DevOps engineer</a>, an in-depth knowledge of processes, tools, and relevant technology are essential. You must also have a holistic understanding of the products, services, and systems in place. If your answers matched the answers we’ve provided above, you’re in great shape for future DevOps interviews. Good luck! If you’re looking for answers to specific DevOps interview questions that aren’t addressed here, ask them in the comments below. Our DevOps experts will help you craft the perfect answer.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Until recently, development engineers often worked in isolation, restricting their knowledge and skill sets to coding and testing, while 
      
    
    </summary>
    
    
      <category term="求职" scheme="http://blog.ozairs.com/tags/%E6%B1%82%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>比尔盖茨夫妇发布2019年度公开信 分享9大意外</title>
    <link href="http://blog.ozairs.com/uncategorized/%E6%AF%94%E5%B0%94%E7%9B%96%E8%8C%A8%E5%A4%AB%E5%A6%87%E5%8F%91%E5%B8%832019%E5%B9%B4%E5%BA%A6%E5%85%AC%E5%BC%80%E4%BF%A1-%E5%88%86%E4%BA%AB9%E5%A4%A7%E6%84%8F%E5%A4%96/"/>
    <id>http://blog.ozairs.com/uncategorized/比尔盖茨夫妇发布2019年度公开信-分享9大意外/</id>
    <published>2019-02-13T12:47:09.000Z</published>
    <updated>2019-02-13T12:49:13.236Z</updated>
    
    <content type="html"><![CDATA[<p>比尔盖茨的微博账号上发布了和《比尔和梅琳达·盖茨：我们的2019年度公开信》内容，他们在信中分享了9件让他们意外的事情，希望能借此鼓舞大众。</p><p>[TechWeb]盖茨夫妇首先回顾到，“二十五年前，我们读到的一篇文章中提到，贫困国家每年有数十万儿童死于腹泻。这个出乎我们意料的数字，促使我们确立了盖茨基金会的理念。”</p><p>他们表示，“在今年的公开信里，我们希望和大家分享一路走来的另外九大意外。有些让人忧虑，有些给人启迪，但无一不激励我们采取行动。我们希望大家也能获得同样的鼓舞，并付诸行动。只有这样，世界才能变得更好。”</p><p><strong>1。 非洲是最年轻的大陆</strong></p><p>全球老龄化趋势仍在持续，但非洲的年龄（几乎）没变。非洲人口的年龄中位数只有18岁，北美则是35岁。未来几十年，非洲的年轻人数量将一直保持上升。</p><p>盖茨夫妇认为，恰当的投资无疑将释放非洲的巨大潜力。非洲年轻人决定了整个大陆，乃至全世界的未来。</p><p><strong>2。家庭基因检测既能帮助发现“连环手”，又能预防早产</strong></p><p><strong>3。今后四十年，全世界每个月都将新建一个纽约市</strong></p><p>随着城市人口在未来几十年的持续增长，全球建筑体量到2060年预计将会翻倍，相当于从现在开始每月新建一个纽约市。这需要大量钢铁水泥。我们需要想办法在不加剧气候变化的前提下实现这一切。</p><p><strong>4。 数据也存在性别歧视</strong></p><p>比尔盖茨谈到，“我每天花大量时间研究健康和发展方面的数据。关于妇女和女童的数据如此之少，让我始料未及。我想主要原因在于，我们人为地将某些问题划分为“女性问题”和其它问题，而女性问题通常得不到深入研究。这将妨碍人类整体的进步。”</p><p>文章还谈到，“数据会催生更好的决策和政策，帮助我们制定目标、评估进展，也让倡导和问责成为可能。”</p><p><strong>5。 跟青少年学习愤怒管理</strong></p><p>越来越多的研究表明，如果能对年轻人进行干预，辅导他们控制冲动，也许能帮他们更安全地应对这些情况（言语不合，暴力相向，后果是非死即伤），从而留在学校，远离麻烦。这就是Becoming a Man（成为一个男人，缩写BAM）这样的项目所做的事。</p><p><strong>6。全球的也是民族的</strong></p><p>本国利益至上并不意味着对其他国家置之不理。事实证明，我们恰恰应该反其道而行之。</p><p><strong>7。厕所还是一百年前的老样子</strong></p><p>全球迄今还有20多亿人用不上卫生的厕所。他们的粪便未经处理就进入环境，每天导致近800名儿童死亡。引进发达国家的卫生设施行不通，因为配套的下水道系统建设成本过高，而且需要大量的水资源。</p><p><strong>8。 课本正在变得过时</strong></p><p><strong>9。 在贫困女性手中，手机的作用能发挥到最大</strong></p><p>盖茨夫妇还表示，对未来依旧乐观，“其中一个原因是我们深信创新的力量。但更重要的是，我们亲眼看到，对于我们在年信中谈及的每一个挑战，都有很多人在奉献着自己的智慧、资源甚至生命。”</p><p>盖茨夫妇最后表示，“我们把今年的年度公开信献给我们亲爱的朋友、微软（106.89， 1.64， 1.56%）联合创始人、去年十月罹患癌症去世的保罗-艾伦……每当Jimi Hendrix的音乐响起，我们都会想起他。”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;比尔盖茨的微博账号上发布了和《比尔和梅琳达·盖茨：我们的2019年度公开信》内容，他们在信中分享了9件让他们意外的事情，希望能借此鼓舞大众。&lt;/p&gt;
&lt;p&gt;[TechWeb]盖茨夫妇首先回顾到，“二十五年前，我们读到的一篇文章中提到，贫困国家每年有数十万儿童死于腹泻。这个出
      
    
    </summary>
    
    
      <category term="Bill Gates" scheme="http://blog.ozairs.com/tags/Bill-Gates/"/>
    
  </entry>
  
  <entry>
    <title>关于Raid0,Raid1,Raid5,Raid10的总结</title>
    <link href="http://blog.ozairs.com/Jobs/%E5%85%B3%E4%BA%8ERaid0-Raid1-Raid5-Raid10%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.ozairs.com/Jobs/关于Raid0-Raid1-Raid5-Raid10的总结/</id>
    <published>2019-02-13T11:46:34.000Z</published>
    <updated>2019-02-13T11:50:42.714Z</updated>
    
    <content type="html"><![CDATA[<p>RAID0</p><p><img src="/Jobs/关于Raid0-Raid1-Raid5-Raid10的总结/1.png" alt=""></p><p>定义：</p><p>RAID 0又称为Stripe或Striping，它代表了所有RAID级别中最高的存储性能。RAID 0提高存储性能的原理是把连续的数据分散到多个磁盘上存取，这样，系统有数据请求就可以被多个磁盘并行的执行，每个磁盘执行属于它自己的那部分数据请求。这种数据上的并行操作可以充分利用总线的带宽，显著提高磁盘整体存取性能。</p><p>工作原理：</p><p>系统向三个磁盘组成的逻辑硬盘（RAID0 磁盘组）发出的I/O数据请求被转化为3项操作，其中的每一项操作都对应于一块物理硬盘。通过建立RAID 0，原先顺序的数据请求被分散到所有的三块硬盘中同时执行。从理论上讲，三块硬盘的并行操作使同一时间内磁盘读写速度提升了3倍。 但由于总线带宽等多种因素的影响，实际的提升速率肯定会低于理论值，但是，大量数据并行传输与串行传输比较，提速效果显著显然毋庸置疑。</p><p>优缺点：</p><p>读写性能是所有RAID级别中最高的。</p><p>RAID 0的缺点是不提供数据冗余，因此一旦用户数据损坏，损坏的数据将无法得到恢复。RAID0运行时只要其中任一块硬盘出现问题就会导致整个数据的故障。一般不建议企业用户单独使用。</p><p>总结：</p><p>磁盘空间使用率：100%，故成本最低。</p><p>读性能：N*单块磁盘的读性能</p><p>写性能：N*单块磁盘的写性能</p><p>冗余：无，任何一块磁盘损坏都将导致数据不可用。</p><p>RAID1</p><p><img src="/Jobs/关于Raid0-Raid1-Raid5-Raid10的总结/2.jpg" alt=""></p><p>定义：</p><p>RAID 1通过磁盘数据镜像实现数据冗余，在成对的独立磁盘上产生互为备份的数据。当原始数据繁忙时，可直接从镜像拷贝中读取数据，因此RAID 1可以提高读取性能。RAID 1是磁盘阵列中单位成本最高的，但提供了很高的数据安全性和可用性。当一个磁盘失效时，系统可以自动切换到镜像磁盘上读写，而不需要重组失效的数据。</p><p>工作原理：</p><p>RAID1是将一个两块硬盘所构成RAID磁盘阵列，其容量仅等于一块硬盘的容量，因为另一块只是当作数据“镜像”。RAID1磁盘阵列显然是最可靠的一种阵列，因为它总是保持一份完整的数据备份。它的性能自然没有RAID0磁盘阵列那样好，但其数据读取确实较单一硬盘来的快，因为数据会从两块硬盘中较快的一块中读出。RAID1磁盘阵列的写入速度通常较慢，因为数据得分别写入两块硬盘中并做比较。RAID1磁盘阵列一般支持“热交换”，就是说阵列中硬盘的移除或替换可以在系统运行时进行，无须中断退出系统。RAID1磁盘阵列是十分安全的，不过也是较贵一种RAID磁盘阵列解决方案，因为两块硬盘仅能提供一块硬盘的容量。RAID1磁盘阵列主要用在数据安全性很高，而且要求能够快速恢复被破坏的数据的场合。</p><p>在这里，需要注意的是，读只能在一块磁盘上进行，并不会进行并行读取，性能取决于硬盘中较快的一块。写的话通常比单块磁盘要慢，虽然是并行写，即对两块磁盘的写入是同时进行的，但因为要比较两块硬盘中的数据，所以性能比单块磁盘慢。</p><p>优缺点：</p><p>RAID1通过硬盘数据镜像实现数据的冗余，保护数据安全，在两块盘上产生互为备份的数据，当原始数据繁忙时，可直接从镜像备份中读取数据，因此RAID1可以提供读取性能。<br>RAID1是硬盘中单位成本最高的，但提供了很高的数据安全性和可用性，当一个硬盘失效时，系统可以自动切换到镜像硬盘上读/写，并且不需要重组失效的数据。</p><p>总结：</p><p>磁盘空间使用率：50%，故成本最高。</p><p>读性能：只能在一个磁盘上读取，取决于磁盘中较快的那块盘</p><p>写性能：两块磁盘都要写入，虽然是并行写入，但因为要比对，故性能单块磁盘慢。</p><p>冗余：只要系统中任何一对镜像盘中有一块磁盘可以使用，甚至可以在一半数量的硬盘出现问题时系统都可以正常运行。</p><p>RAID 5<img src="/Jobs/关于Raid0-Raid1-Raid5-Raid10的总结/3.jpg" alt=""></p><p>定义：</p><p>RAID 5是RAID 0和RAID 1的折中方案。RAID 5具有和RAID0相近似的数据读取速度，只是多了一个奇偶校验信息，写入数据的速度比对单个磁盘进行写入操作稍慢。同时由于多个数据对应一个奇偶校验信息，RAID5的磁盘空间利用率要比RAID 1高，存储成本相对较低，是目前运用较多的一种解决方案。</p><p>工作原理：</p><p>RAID5把数据和相对应的奇偶校验信息存储到组成RAID5的各个磁盘上，并且奇偶校验信息和相对应的数据分别存储于不同的磁盘上，其中任意N-1块磁盘上都存储完整的数据，也就是说有相当于一块磁盘容量的空间用于存储奇偶校验信息。因此当RAID5的一个磁盘发生损坏后，不会影响数据的完整性，从而保证了数据安全。当损坏的磁盘被替换后，RAID还会自动利用剩下奇偶校验信息去重建此磁盘上的数据，来保持RAID5的高可靠性。</p><p>做raid 5阵列所有磁盘容量必须一样大，当容量不同时，会以最小的容量为准。 最好硬盘转速一样，否则会影响性能，而且可用空间=磁盘数n-1，Raid 5 没有独立的奇偶校验盘，所有校验信息分散放在所有磁盘上， 只占用一个磁盘的容量。</p><p>总结：</p><p>磁盘空间利用率：(N-1)/N，即只浪费一块磁盘用于奇偶校验。</p><p>读性能：(n-1)*单块磁盘的读性能，接近RAID0的读性能。</p><p>写性能：比单块磁盘的写性能要差（这点不是很明白，不是可以并行写入么？）</p><p>冗余：只允许一块磁盘损坏。</p><p>RAID10</p><p><img src="/Jobs/关于Raid0-Raid1-Raid5-Raid10的总结/4.jpg" alt=""></p><p>定义：</p><p>RAID10也被称为镜象阵列条带。象RAID0一样，数据跨磁盘抽取；象RAID1一样，每个磁盘都有一个镜象磁盘, 所以RAID 10的另一种会说法是 RAID 0+1。RAID10提供100%的数据冗余，支持更大的卷尺寸，但价格也相对较高。对大多数只要求具有冗余度而不必考虑价格的应用来说，RAID10提供最好的性能。使用RAID10，可以获得更好的可靠性，因为即使两个物理驱动器发生故障（每个阵列中一个），数据仍然可以得到保护。RAID10需要4 + 2*N 个磁盘驱动器（N &gt;=0)， 而且只能使用其中一半(或更小, 如果磁盘大小不一)的磁盘用量, 例如 4 个 250G 的硬盘使用RAID10 阵列， 实际容量是 500G。</p><p>实现原理：</p><p>Raid10其实结构非常简单，首先创建2个独立的Raid1，然后将这两个独立的Raid1组成一个Raid0，当往这个逻辑Raid中写数据时，数据被有序的写入两个Raid1中。磁盘1和磁盘2组成一个Raid1，磁盘3和磁盘4又组成另外一个Raid1;这两个Raid1组成了一个新的Raid0。如写在硬盘1上的数据1、3、5、7，写在硬盘2中则为数据1、3、5、7，硬盘中的数据为0、2、4、6，硬盘4中的数据则为0、2、4、6，因此数据在这四个硬盘上组合成Raid10，且具有raid0和raid1两者的特性。<br>虽然Raid10方案造成了50%的磁盘浪费，但是它提供了200%的速度和单磁盘损坏的数据安全性，并且当同时损坏的磁盘不在同一Raid1中，就能保证数据安全性。假如磁盘中的某一块盘坏了，整个逻辑磁盘仍能正常工作的。<br>当我们需要恢复RAID10中损坏的磁盘时，只需要更换新的硬盘，按照RAID10的工作原理来进行数据恢复，恢复数据过程中系统仍能正常工作。原先的数据会同步恢复到更换的硬盘中。</p><p>总结：</p><p>磁盘空间利用率：50%。</p><p>读性能：N/2*单块硬盘的读性能</p><p>写性能：N/2*单块硬盘的写性能</p><p>冗余：只要一对镜像盘中有一块磁盘可以使用就没问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RAID0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Jobs/关于Raid0-Raid1-Raid5-Raid10的总结/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;p&gt;RAID 0又称为Stripe或Striping，它代表了所有RAID级别中最高的存储性能
      
    
    </summary>
    
      <category term="Jobs" scheme="http://blog.ozairs.com/categories/Jobs/"/>
    
    
      <category term="Raid Storage" scheme="http://blog.ozairs.com/tags/Raid-Storage/"/>
    
  </entry>
  
  <entry>
    <title>An In-Depth Guide to the Differences Between SAN and NAS</title>
    <link href="http://blog.ozairs.com/Jobs/An-In-Depth-Guide-to-the-Differences-Between-SAN-and-NAS/"/>
    <id>http://blog.ozairs.com/Jobs/An-In-Depth-Guide-to-the-Differences-Between-SAN-and-NAS/</id>
    <published>2019-02-13T11:29:13.000Z</published>
    <updated>2019-02-13T11:53:19.228Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.lifewire.com/definition-of-san-818007" target="_blank" rel="noopener">Storage area networks (SANs)</a> and <a href="https://www.lifewire.com/best-nas-network-attached-storage-4140167" target="_blank" rel="noopener">network attached storage (NAS)</a> both provide networked storage solutions. A NAS is a single storage device that operates on data files, while a SAN is a local network of multiple devices.</p><p><img src="/Jobs/An-In-Depth-Guide-to-the-Differences-Between-SAN-and-NAS/san-vs-nas.png" alt=""></p><p>A NAS unit includes a dedicated hardware device that connects to a <a href="https://www.lifewire.com/local-area-network-816382" target="_blank" rel="noopener">local area network</a>, usually through an <a href="https://www.lifewire.com/what-is-ethernet-3426740" target="_blank" rel="noopener">Ethernet</a> connection. This NAS server authenticates clients and manages file operations in much the same manner as traditional file servers, through well-established network protocols.</p><p>To reduce the costs that occur with traditional file servers, NAS devices generally run an embedded <a href="https://www.lifewire.com/operating-systems-2625912" target="_blank" rel="noopener">operating system</a> on simplified hardware and lack <a href="https://www.lifewire.com/peripheral-device-2625951" target="_blank" rel="noopener">peripherals</a> like a <a href="https://www.lifewire.com/what-is-a-monitor-2618155" target="_blank" rel="noopener">monitor</a>or <a href="https://www.lifewire.com/what-is-a-keyboard-2618153" target="_blank" rel="noopener">keyboard</a> and are instead managed through a browser tool.</p><p>A SAN commonly utilizes <a href="https://www.lifewire.com/definition-of-fibre-channel-816326" target="_blank" rel="noopener">Fibre Channel</a> interconnects and connects a set of storage devices that are able to share data with one another.</p><h3 id="Important-NAS-and-SAN-Benefits"><a href="#Important-NAS-and-SAN-Benefits" class="headerlink" title="Important NAS and SAN Benefits"></a>Important NAS and SAN Benefits</h3><p>The administrator of a <a href="https://www.lifewire.com/soho-routers-and-networks-explained-3971344" target="_blank" rel="noopener">home or small business network</a> can connect one NAS device to a local area network. The device itself is a <a href="https://www.lifewire.com/what-is-a-node-4155598" target="_blank" rel="noopener">network node</a>, much like computers and other <a href="https://www.lifewire.com/transmission-control-protocol-and-internet-protocol-816255" target="_blank" rel="noopener">TCP/IP</a> devices, all of which maintain their own <a href="https://www.lifewire.com/what-is-an-ip-address-2625920" target="_blank" rel="noopener">IP address</a> and can effectively communicate with other networked devices.</p><p>Given that the network attached storage device is attached <em>to the network</em>, all the other devices on that same network have easy access to it (given that proper permissions are set up). Because of their centralized nature, NAS devices offer an easy way for multiple users to access the same data, which is important in situations where users are collaborating on projects or utilizing the same company standards.</p><p>Using a software program provided with the NAS hardware, a network administrator can set up automatic or manual backups and file copies between the NAS and all the other connected devices. Therefore, a NAS device is also useful for the opposite reason: to offload local data to the network storage device’s much larger storage container.</p><p>This is useful not only to ensure that users do not lose data, since the NAS can be backed up on a regular schedule regardless of the end-user’s ability to back up, but also to give other network devices a place to keep large files, especially large files that are often shared among other network users.</p><p>Without a NAS, users have to find another (often slower) means to send data to other devices on the network, like over email or physically with <a href="https://www.lifewire.com/what-is-a-flash-drive-2625794" target="_blank" rel="noopener">flash drives</a>. The NAS holds many gigabytes or <a href="https://www.lifewire.com/terabytes-gigabytes-amp-petabytes-how-big-are-they-4125169" target="_blank" rel="noopener">terabytes</a> of data, and administrators can add additional storage capacity to their network by installing additional NAS devices, although each NAS operates independently. </p><p>Administrators of large enterprise networks may require many terabytes of centralized file storage or extremely high-speed file transfer operations. While installing an army of many NAS devices is not a practical option, administrators can instead install a SAN containing a high-performance disk array to provide the needed scalability and performance.</p><p>However, SANs are not always physical. You can also create virtual SANs (VSANs) that are defined by a software program. Virtual SANs are easier to manage and offer better scalability since they’re hardware independent and controlled entirely by easy-to-change software.</p><h3 id="SAN-NAS-Convergence"><a href="#SAN-NAS-Convergence" class="headerlink" title="SAN/NAS Convergence"></a>SAN/NAS Convergence</h3><p>As internet technologies like TCP/IP and Ethernet proliferate worldwide, some SAN products are making the transition from Fibre Channel to the same IP-based approach NAS uses. Also, with the rapid improvements in disk storage technology, today’s NAS devices now offer capacities and performance that once were only possible with SAN.</p><p>These two industry factors have led to a partial convergence of NAS and SAN approaches to network storage, effectively creating high-speed, high-capacity, centrally located network devices. </p><p>When SAN and NAS are joined together into one device in this way, it’s sometimes referred to as “unified SAN,” and it’s often the case that the device is a NAS device that simply utilizes the same technology behind SAN.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.lifewire.com/definition-of-san-818007&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Storage area networks (SANs)&lt;/a&gt; and &lt;a href=&quot;
      
    
    </summary>
    
      <category term="Jobs" scheme="http://blog.ozairs.com/categories/Jobs/"/>
    
    
      <category term="Storage" scheme="http://blog.ozairs.com/tags/Storage/"/>
    
  </entry>
  
  <entry>
    <title>AWS面试经验分享</title>
    <link href="http://blog.ozairs.com/%E6%B1%82%E8%81%8C/AWS%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    <id>http://blog.ozairs.com/求职/AWS面试经验分享/</id>
    <published>2019-02-12T10:40:02.000Z</published>
    <updated>2019-02-12T10:48:04.314Z</updated>
    
    <content type="html"><![CDATA[<p>AWS的全名是Amazon Web Services，也就是亚马逊旗下的子公司，专门做云计算，业务遍及全球近200个国家，也是云计算行业的领头羊（有兴趣可以看看这个链接）。依照AWS Senior VP Andy Jassy的话来讲是：“We are building the fastest growing technology business on earth.”我于2014年6月拿到此公司offer，在香港和台湾从事对客户或潜伏客户的培训工作，隶属于亚太区的培训与认证部门（APAC Training &amp; Certification）。这篇文章回顾了我面试及头半年的工作，和一些个人的感想。基于公司政策要求，其中不触及面试具体细节、工作具体内容（包括人名），产品介绍及评论。</p><p><img src="/求职/AWS面试经验分享/20150102123134905.jpg" alt=""></p><p>“云计算”是个有趣的名词，由于现在这个环境下，普通大众想听不到它都难，但多数却完全不知道究竟是甚么。其实狭义且不严格地理解云计算，就是把计算资源像我们生活中水、电、气这类基础设施1样，按需供应计费，提供相对统1的标准或接口给其他厂商（生态圈）或终究客户使用。如果不明白计算资源怎样能像水电1样供应，可以联想1下平时使用的电脑，你在意的其实不是它的CPU内存硬盘网络等计算资源（简单统称方便理解），你在意的是输入的内容能得到你所需要的输出，不论这个输出是字符、图片、视频、音频、游戏画面、其他交互内容等等。那末“云计算”这里说的其实就是将你不在意的那些东西（CPU内存硬盘网络）和你在意的输入输出（比如键盘鼠标、显示器）分离，用户只具有基本的输入输出和网络连接服务，其他的全部放到远端。用户需要就启动使用并付费，不需要就像水电1样关掉。这是其中1个重点：资源分离。分离才方便做其他事情，具体好处这里就不说了。另外还需提及的是，对平时使用的电脑，不论你用还是不用，只要你买回来那末你已为其计算资源付费终了了，这样是否是很划算呢？你1年用1天和用360天，为计算资源付一样的费用，这其实其实不公道。个人使用还行，但企业就很不划算了，这就是按需分配计算资源的必要性，为了公道的利用及分配资源。</p><p>这篇文章不是教学文章，所以只是帮助不懂的朋友粗浅了解1下甚么是“云计算”。其实云计算还分好几类，上面提到的只是说基础设施层面的服务。其他层面的举个例子：想一想你手机上的App，它们也是云计算的1部份。由于他们也是你根据你的需求下载得手机上为你提供服务。所以云计算可以认为是Web Service，即通过网络为客户提供服务，这些服务源自于硬件与软件的组合或结合。我的工作就是介绍亚马逊的云计算服务给客户，让他们理解并学会使用亚马逊的云计算产品。我只负责香港和台湾，大陆培训业务与我无关，所以香港台湾的朋友如果要参加AWS的培训，多半会看到我（Michael Chen）。目前我所负责的区域就我1个人在做培训，也是香港台湾地区的第1个培训师。目前培训过的客户大小公司（世界500强到初创企业）都有，具体就不说了。</p><p><strong>面试经历</strong></p><p>面试</p><p>是1个有趣（折腾且漫长）的进程。由于我并没有主动申请这个职位，也不知道有这个职位在招聘，也没有猎头来找我（Amazon不通过猎头觅人）。当时（2013年）我还在联科团体工作，对AWS的职位只是偷偷想过，但种种缘由未有任何行动。直到：</p><ul><li>2013年5月28日，AWS的Z在LinkedIn上和我联系，问我是不是有兴趣做“Ecosystem Solutions Architect”（以后简称SA）。我其实不认识Z，但看到这个消息确切很惊讶，1是没想到会有AWS的人通过LinkedIn和我联系，2是觉得自己的资格还不够，有这个机会却极可能抓不住。我坦诚告知Z说，我看了职位介绍，觉得自己不合适，但还是很愿意与他交换，问他是不是还希望继续。Z答应了，我却很忐忑。</li></ul><ul><li>2013年6月24日，与Z终究见面，才发现他只说英语（我进AWS后发现他也能说广东话，不过基本不说）。他觉得我还行，然后需要再与其他同事评估，给了简历。我当时我觉得不合适SA，但培训比较合适，但从他和公司的角度，最需要的还是SA，我接受了他的建议。</li></ul><ul><li>2013年7月15日，如我所料，内部评估结果觉得我不适合做SA。Z说可以推荐我去做培训这个职位。</li></ul><ul><li>2013年8月6日，向Z推荐L做SA，不过Z觉得不适合，问A（AWS亚太区培训认证主管）是不是和我联系，我回复还未联系。这位L后来进了Facebook，题外话就不多说了。</li></ul><ul><li>2013年8月22日，与Z分享Gartner IaaS魔力象限报告。Gartner是全球知名的IT咨询机构，它的这个报告系列在IT界有很好的公信力。报告说AWS全球领先，计算资源超过其他14位竞争对手总和的5倍。英文原文是：It is the overwhelming market share leader, with more than five times the cloud IaaS compute capacity in use than the aggregate total of the other 14 providers in this Magic Quadrant.（全文链接：Magic Quadrant for Cloud Infrastructure as a Service）</li></ul><ul><li>2013年10月2日，发邮件给Z国庆祝愿。</li></ul><ul><li>2013年11月18日，我在联科团体获升职，与Z分享。Z恭喜后又问我是不是还有兴趣加入AWS，他会再次帮我争取拿到培训的<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>机会。大约过了34天，HR给我电话，顺利过关。</li></ul><ul><li>2013年12月6日，经过若干次与A约<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>时间，终究与其电话<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>，英语吞吞吐吐地过关，还需要看看粤语及技术方面。</li></ul><ul><li>2013年12月17日，技术兼粤语<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>，粤语没问题，但好几个技术问题不会，以为应聘就此结束。回到家，内心非常难受。还是写了邮件与Z报告了情况。过了1段时间，得到继续<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>的消息，我没想到居然还有机会。其间下班后在家狂看Glassdoor，学习AWS。</li></ul><ul><li>2014年1月30日，经过若干次来回讨论<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>时间，从1月中旬最后定到了1月30日（除夕）。非常辛苦的1对1<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>，1共5个小时不中断，有香港台湾的主管、亚太区培训认证主管、高级培训师、销售等好几个人车轮战，软技能和硬技能（AWS相干技术）、培训表达（英文与粤语）等都有触及，问得非常得仔细。<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>犯了1些小错，整体顺利。</li></ul><ul><li>2014年2月3日，Bar Raiser（简单理解就是提高<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>门坎的人）<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>。其中有几个NoSQL的技术问题，都没有回答得很好。其他问题应当回答正确。当时感觉非常挫败，觉得最后1轮失败，很是惋惜。</li></ul><ul><li>2014年2月11日，讨论后结果是positive！我被录取了。</li></ul><ul><li>2014年2月14日，情人节签约。</li></ul><ul><li>2014年6月11日，经过非常麻烦的签证办理手续，终究开始上班。</li></ul><p>从2013年5月28日到2014年6月11日，全部进程几近是1整年。从上面的描写中你或许能感遭到我当时经历如此漫长的煎熬与纠结吧，他人都在开心过年的时候，我在纠结</p><p>面试</p><p>及结果，好在终究成功了。另外，这全部进程中还有1些其他的事情：</p><ul><li>2014年5月5日至2014年6月9日，陪老婆生孩子坐月子等各种生育相干事情。</li></ul><ul><li>2014年3月23日，推荐M应聘Business Development职位，2014年4月17日，M顺利闯关成功。</li></ul><p>工作经历</p><p>工作经历用1句话就说完了：6月入职飞新加坡，7月飞曼谷，8月飞台北和西雅图，9月飞悉尼，10月再次飞台北，11月飞拉斯维加斯为AWS re:Invent大会帮忙，12月回武汉办理大陆户口注销事宜，这也是为了以后能更方便地去台湾商务旅行。看着飞很多，其实多半时间都在香港，出差1般是1周左右。具体内容就不说了，有几点值得提1下：</p><ul><li>第1次培训是在台北，也是试讲，要被评估，若不合格还要重新再试讲评估。第1次用全英语讲课长达4天，这4天说的英语比我310多年说的都多，而且这几天平均每天睡4个钟头。好在最后1切顺利。但努力空间很大，需要认真学习和练习。在我提交完培训报告后，同事和老板都回邮件，说实话，挺给我信心的：“Great start Michael, the first one I am sure will always be the hardest to get through. But you are learning from the master in D too. Well done and good report.”“AWESOME report full of a lot of great information about our customers, their needs and provides AWS with the information required to help them further from a product/services and adoption perspective all the way back to training.”</li></ul><ul><li>以后在香港用英文培训，台北用普通话培训。每次培训完后，客户都要评分，每次写报告看分数都心跳加速，真是压力山东大学。今年我的整体分数在4.44（满分5分）。这个分数不算高，但就我个人而言，我觉得是客观的分数。</li></ul><ul><li>记得2014年3月听D在香港用英语对着4百来人做公然演讲培训时，1位AWS同事过来拍拍我肩膀，半开玩笑地说，明年此时就是你来演讲了哦！我想这么快啊！我能行吗？很难想象1年后我就可以面对几百人用英语演讲，我非常怀疑我有这个实力并且能做得如D那样好。结果入职不到半年，10月就在台北演讲，11月就在香港演讲，最后评价都还不错（台北4.5+，香港4.1+，这里不做与同事的横向比较）。回头来想一想，有些时候，你不能不需要1些压力来逼迫你提高，以做到自己都不敢想象的事情。</li></ul><ul><li>我1直觉得很难的AWS Solution Architect认证，居然也顺利通过。对那些在企业工作很多年的人来讲，这个认证其实其实不难。但我在企业才工作3年半，之前10年的工作都在两个大学里教书做科研，这其中的难度和跨度，对我是很大的（这里只是对我个人而言，不适用于其他人）。</li></ul><p>百姓网的CEO王建硕曾在其博客里说过他“所看到的伟大的公司，或成功的生意人，发现他们有1种惊人的类似的地方，总结出来就是：对贡献有豪情，对回报有信心。”贡献的是为了兴趣，而不是为了回报。如果做事1定是为了某种回报，那末这件事情会很难坚持久长。这个观点丁香园的冯大辉也转载在其微信公众号的文章中：“只有对贡献有豪情，不在意回报的时候，你才能坚持做1件事情，就像伟大的公司有1个贡献的理念，才可以持久地保持豪情，在获得巨大的成功以后，接着日复1日地寻觅更大的贡献。”这类理念与豪情是对回报有信心的来源。</p><p>我算不上成功，算不上勤奋，乃至算不上坚持。真正了解我的人知道这是实话，比如我老婆肯定知道上面这句话不是谦虚:) 你看这个博客的更新频率都愈来愈低，说忙是理由也是借口。在信息碎片化的今天，能坚持写博客的人貌似不多，还能坚持定阅浏览博客的人也不多，我周围几个90后同事乃至已很少用Facebook而用Instagram。我说了上面这么多乱78糟的话，是为了让自己重新再检讨1下，继续坚持下去。我已草拟了2015年每天需要完成的事情，包括这个博客和健身。固然整体安排还是以工作为主，不会把写博客放到重要的事情列表上，但保持每周1篇的更新频率是应当的，除非出差或其他不可抗因素没法更新。我欠下的游记都差不多足数了，呵呵。</p><p>写博客纯属不写不舒服斯基。想一想博客能带给我甚么回报呢？金钱的回报基本没有，倒是帮很多人拿到了1些学校和公司的offer，解决了1些人在旅游和其他方面的问题。真实的咨询公司我没进去，倒做起了虚拟咨询，有趣。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AWS的全名是Amazon Web Services，也就是亚马逊旗下的子公司，专门做云计算，业务遍及全球近200个国家，也是云计算行业的领头羊（有兴趣可以看看这个链接）。依照AWS Senior VP Andy Jassy的话来讲是：“We are building th
      
    
    </summary>
    
      <category term="求职" scheme="http://blog.ozairs.com/categories/%E6%B1%82%E8%81%8C/"/>
    
    
      <category term="AWS" scheme="http://blog.ozairs.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>详解澳洲房屋物业费计算方式</title>
    <link href="http://blog.ozairs.com/uncategorized/How-to-calculate-the-property-rate-in-Australia/"/>
    <id>http://blog.ozairs.com/uncategorized/How-to-calculate-the-property-rate-in-Australia/</id>
    <published>2019-02-07T06:23:32.000Z</published>
    <updated>2019-02-07T09:34:08.331Z</updated>
    
    <content type="html"><![CDATA[<p>每年，墨尔本市政府会计算您房屋的费率，以资助当地社区的建设，维护和服务。</p><p>关于房屋的费率的计算方式如下：</p><ol><li>将房屋的财产价值乘以市政府为社区项目和服务提供资金所需的“美元汇率”</li><li>增加收到的任何废物服务的成本</li><li>加征防火税</li><li>减去您有资格获得的任何优惠</li></ol><h2 id="房屋物业费计算举例"><a href="#房屋物业费计算举例" class="headerlink" title="房屋物业费计算举例"></a>房屋物业费计算举例</h2><ul><li>确定您房屋的资本改善价值（CIV）<strong>为400,000美元。</strong></li><li>确定’美元汇率’为<strong>0.00244201。</strong></li><li>将400,000乘以0.00244201，基本利率<strong>为976.80美元。</strong></li><li>增加您收到的任何废物服务和消防税的成本。</li><li>减去您有资格获得的任何让步。</li></ul><h2 id="如何进行房屋评估"><a href="#如何进行房屋评估" class="headerlink" title="如何进行房屋评估"></a>如何进行房屋评估</h2><p>市政府每年都会按照维多利亚州政府法律，对当地的房产进行评估。实际操作过程中，会使用合格的估价师根据以下因素评估您的房产：</p><ul><li>最近在该地区的销售</li><li>它的位置</li><li>土地的质量和位置</li><li>建筑物的大小，年龄和状况</li></ul><h3 id="如果您对不同意房屋估价"><a href="#如果您对不同意房屋估价" class="headerlink" title="如果您对不同意房屋估价"></a>如果您对不同意房屋估价</h3><p>如果您不同意您的房产估价，可以和当地市政府联系：</p><p>市政府评估团队成员可以：</p><ul><li>更详细地解释我们如何评估您的财产</li><li>听取并理解您的反对意见</li><li>建议您可以采取哪些进一步措施</li></ul><h2 id="如何计算美元汇率"><a href="#如何计算美元汇率" class="headerlink" title="如何计算美元汇率"></a>如何计算美元汇率</h2><p>通过以下方式计算出美元汇率：</p><ul><li>计算提供所有计划和服务所需的费率收入总额</li><li>将此金额除以当地房产总价值</li></ul><p>这个数字是通过市政府每年的预算流程和每年的变化来确定的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每年，墨尔本市政府会计算您房屋的费率，以资助当地社区的建设，维护和服务。&lt;/p&gt;
&lt;p&gt;关于房屋的费率的计算方式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将房屋的财产价值乘以市政府为社区项目和服务提供资金所需的“美元汇率”&lt;/li&gt;
&lt;li&gt;增加收到的任何废物服务的成本&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="Property" scheme="http://blog.ozairs.com/tags/Property/"/>
    
  </entry>
  
  <entry>
    <title>Git从入门到熟练使用</title>
    <link href="http://blog.ozairs.com/Web%E5%BC%80%E5%8F%91/Git%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.ozairs.com/Web开发/Git从入门到熟练使用/</id>
    <published>2019-02-06T06:41:25.000Z</published>
    <updated>2019-02-06T09:50:08.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ul><li>客户端并不是只提取最新版本的文件快照，而是把代码仓库完整的镜像下来。这样一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</li></ul><h3 id="Git的优势"><a href="#Git的优势" class="headerlink" title="Git的优势"></a>Git的优势</h3><h4 id="直接记录快照"><a href="#直接记录快照" class="headerlink" title="直接记录快照"></a>直接记录快照</h4><ul><li>Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 <strong>快照流</strong>。</li><li>如图，在version2中的 B 即是因为 File B 没有改变，所以直接存储了一个指向 FileB 的链接。只有修改了的文件才会产生一个新的文件，覆盖原来的文件。</li></ul><p><img src="/Web开发/Git从入门到熟练使用/1.png" alt=""></p><h4 id="几乎所有操作都在本地执行"><a href="#几乎所有操作都在本地执行" class="headerlink" title="几乎所有操作都在本地执行"></a>几乎所有操作都在本地执行</h4><ul><li>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。因为你在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。</li></ul><h4 id="Git保证完整性"><a href="#Git保证完整性" class="headerlink" title="Git保证完整性"></a>Git保证完整性</h4><ul><li>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。Git 数据库中保存的信息都是以文件内容的哈希值来确定的，而不是文件名。</li><li>这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。</li></ul><h4 id="Git一般只添加数据"><a href="#Git一般只添加数据" class="headerlink" title="Git一般只添加数据"></a>Git一般只添加数据</h4><ul><li>你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。这个特性使得我们可以尽情的尝试对Git进行操作而不用害怕把它改坏了，只需要回滚即可。</li></ul><h3 id="需要注意的重点"><a href="#需要注意的重点" class="headerlink" title="需要注意的重点"></a>需要注意的重点</h3><h4 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h4><ul><li>已提交 committed ：数据已经保存在本地 Git 仓库</li><li>已修改 modified ： 修改了文件，但是还没保存在仓库中</li><li>已暂存 staged ： 对一个已修改的文件的当前版本做了标记</li></ul><p><img src="/Users/mark/AWS/hexoblog/source/_posts/Git从入门到熟练使用/2.png" alt=""></p><p>工作目录，暂存区域及Git仓库.png</p><h4 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h4><ul><li>工作目录 Working Directory ：对项目的某个版本独立提取出来的内容，这些从Git仓库的压缩数据库提取出来的文件，放在磁盘上供你使用或修改。</li><li>暂存区域 Staging Area ：是<strong>一个文件</strong>，<strong>保存了下次将提交的文件列表</strong>，是待提交文件的暂存区域。一般在Git仓库的目录中，有时也被称为索引。</li><li>Git仓库：用来保存项目的元数据和对象数据库的地方。是Git中最重要的部分，从其他计算机克隆仓库时拷贝的就是这里的数据</li></ul><h4 id="基本的Git工作流程"><a href="#基本的Git工作流程" class="headerlink" title="基本的Git工作流程"></a>基本的Git工作流程</h4><ul><li>在工作目录中修改文件</li><li>暂存文件，将文件的快照存储在暂存区域</li><li>提交更新，找到暂存区域的位置，将快照永久性存储到Git仓库目录<ul><li>提交状态：如果Git目录中保存着特定版本的文件，就属于已提交状态。</li><li>暂存状态：如果做了修改并且已经放入暂存区域，就属于暂存状态。</li><li>已修改状态：如果自上次取出后，做了修改但是还没有存在暂存区域，就是已修改状态。</li></ul></li></ul><h3 id="基本的Git操作流程"><a href="#基本的Git操作流程" class="headerlink" title="基本的Git操作流程"></a>基本的Git操作流程</h3><h4 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h4><ul><li><p>首先最基础的是需要配置用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;lanya&quot;</span><br><span class="line">$ git config --global user.email shenglanya@corp.netease.com</span><br></pre></td></tr></table></figure><p>关于 config 的种类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Config file location</span><br><span class="line"># global 表示配置全局信息，配置之后无论你在该系统上做任何事情，Git都会使用这些信息。</span><br><span class="line">    --global              use global config file</span><br><span class="line">    --system              use system config file</span><br><span class="line">    --local               use repository config file</span><br><span class="line">    -f, --file &lt;file&gt;     use given config file</span><br><span class="line">    --blob &lt;blob-id&gt;      read config from given blob object</span><br></pre></td></tr></table></figure></li><li><p>接着需要检查你的配置信息，使用 <code>$ git config --list</code>指令检查全部配置信息,结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">core.excludesfile=~/.gitignore</span><br><span class="line">core.legacyheaders=false</span><br><span class="line">core.quotepath=false</span><br><span class="line">mergetool.keepbackup=true</span><br><span class="line">push.default=simple</span><br><span class="line">color.ui=auto</span><br><span class="line">color.interactive=auto</span><br><span class="line">repack.usedeltabaseoffset=true</span><br><span class="line">alias.s=status</span><br><span class="line">alias.a=!git add . &amp;&amp; git status</span><br><span class="line">alias.au=!git add -u . &amp;&amp; git status</span><br><span class="line">alias.aa=!git add . &amp;&amp; git add -u . &amp;&amp; git status</span><br><span class="line">alias.c=commit</span><br><span class="line">alias.cm=commit -m</span><br><span class="line">alias.ca=commit --amend</span><br><span class="line">alias.ac=!git add . &amp;&amp; git commit</span><br><span class="line">alias.acm=!git add . &amp;&amp; git commit -m</span><br><span class="line">alias.l=log --graph --all --pretty=format:&apos;%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset&apos;</span><br><span class="line">alias.ll=log --stat --abbrev-commit</span><br><span class="line">alias.lg=log --color --graph --pretty=format:&apos;%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative</span><br><span class="line">alias.llg=log --color --graph --pretty=format:&apos;%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)&apos; --abbrev-commit</span><br><span class="line">alias.d=diff</span><br><span class="line">alias.master=checkout master</span><br><span class="line">alias.spull=svn rebase</span><br><span class="line">alias.spush=svn dcommit</span><br><span class="line">alias.alias=!git config --list | grep &apos;alias\.&apos; | sed &apos;s/alias\.\([^=]*\)=\(.*\)/\1\   =&gt; \2/&apos; | sort</span><br><span class="line">include.path=~/.gitcinclude</span><br><span class="line">include.path=.githubconfig</span><br><span class="line">include.path=.gitcredential</span><br><span class="line">diff.exif.textconv=exif</span><br><span class="line">credential.helper=osxkeychain</span><br><span class="line">core.excludesfile=/Users/shenglanya/.gitignore_global</span><br><span class="line">difftool.sourcetree.cmd=opendiff &quot;$LOCAL&quot; &quot;$REMOTE&quot;</span><br><span class="line">difftool.sourcetree.path=</span><br><span class="line">mergetool.sourcetree.cmd=/Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh &quot;$LOCAL&quot; &quot;$REMOTE&quot; -ancestor &quot;$BASE&quot; -merge &quot;$MERGED&quot;</span><br><span class="line">mergetool.sourcetree.trustexitcode=true</span><br><span class="line">user.name=shenglanya</span><br><span class="line">user.email=shenglanya@corp.netease.com</span><br><span class="line">commit.template=/Users/shenglanya/.stCommitMsg</span><br><span class="line">core.repositoryformatversion=0</span><br><span class="line">core.filemode=true</span><br><span class="line">core.bare=false</span><br><span class="line">core.logallrefupdates=true</span><br><span class="line">core.ignorecase=true</span><br><span class="line">core.precomposeunicode=true</span><br><span class="line">remote.origin.url=https://git.ms.netease.com/netease-precious-metals-client/ios-client.git</span><br><span class="line">remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*</span><br><span class="line">branch.essential.remote=origin</span><br><span class="line">branch.essential.merge=refs/heads/essential</span><br><span class="line">branch.r_4.4.remote=origin</span><br><span class="line">branch.r_4.4.merge=refs/heads/r_4.4</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>$ git config &lt;key&gt;</code>来检查某一项配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">shenglanya</span><br></pre></td></tr></table></figure></li></ul><h4 id="查阅帮助手册方法"><a href="#查阅帮助手册方法" class="headerlink" title="查阅帮助手册方法"></a>查阅帮助手册方法</h4><ul><li><p>以下方法均可找到 Git 命令手册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git help &lt;verb&gt;</span><br><span class="line">$ git &lt;verb&gt; --help</span><br><span class="line">$ man git-&lt;verb&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h4><h5 id="方法一：在现有目录中初始化仓库（创建一个新的自己的仓库）"><a href="#方法一：在现有目录中初始化仓库（创建一个新的自己的仓库）" class="headerlink" title="方法一：在现有目录中初始化仓库（创建一个新的自己的仓库）"></a>方法一：在现有目录中初始化仓库（创建一个新的自己的仓库）</h5><ul><li><p><code>git init</code>该命令将创建一个名为 <code>.git</code>的子目录，这个子目录含有你在初始化的Git仓库中所有的必须文件，这些文件是Git仓库的骨干。但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。</p></li><li><p>如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。 你可通过 <code>git add</code>命令来实现对指定文件的跟踪，然后执行 <code>git commit</code>提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add LICENSE</span><br><span class="line">$ git commit -m &apos;initial project version&apos;</span><br></pre></td></tr></table></figure></li><li><p>具体操作流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 首先</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/shenglanya/Desktop/.git/</span><br><span class="line"></span><br><span class="line">#然后使用 ls -a 可查看隐藏文件，发现存在名为 .git 的子目录</span><br><span class="line">$ ls -a</span><br><span class="line">.     .DS_Store   .localized</span><br><span class="line">..        .git        pic</span><br><span class="line"></span><br><span class="line"># 接着进入子目录,发现此目录中包含你初始化仓库中所有的必须文件，这些文件是 Git 仓库的骨干</span><br><span class="line">$ cd .git</span><br><span class="line">$ ls</span><br><span class="line">HEAD      config      hooks       objects</span><br><span class="line">branches  description info        refs</span><br><span class="line"></span><br><span class="line"># 接着需要跟踪项目里的文件，需要注意的是，当创建一个新的项目里的文件时，它默认是未被跟踪的，所以此时我们需要手动的将它添加到版本控制中，也就是被跟踪</span><br></pre></td></tr></table></figure></li></ul><h5 id="方法二：克隆现有仓库（clone别人的）"><a href="#方法二：克隆现有仓库（clone别人的）" class="headerlink" title="方法二：克隆现有仓库（clone别人的）"></a>方法二：克隆现有仓库（clone别人的）</h5><ul><li><p>如果你想获得一份已经存在了的 Git 仓库的拷贝，比如说，你想为某个开源项目贡献自己的一份力，这时就要用到 <code>git clone</code>命令。Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 <code>git clone</code>命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure><p>Git 支持多种数据传输协议。 上面的例子使用的是 <code>https://</code>协议，不过你也可以使用 <code>git://</code>协议或者使用 SSH 传输协议，比如 <code>user@server:path/to/repo.git</code>。</p></li></ul><h4 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h4><ul><li>你工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。 工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。</li></ul><h4 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h4><ul><li><p>要查看哪些文件处于什么状态，可以用 <code>git status</code>命令。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>这说明你现在的工作目录相当干净。表示所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。 最后，该命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。 现在，分支名是 “master”,这是默认的分支名。</p></li><li><p>如果你在当前已经有仓库管理的项目中添加了一个文件，名字叫做 README 。然后使用 <code>git status</code>命令，你会发现会出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;My Project&apos; &gt; README</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">    README</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure><p>表示 README 还未被跟踪，表示 Git 之前的提交中没有这些文件。Git也不会自动跟踪它，这使得你不必担心将生成的二进制文件或者其他不想被包含的文件包含进来。若你想跟踪它，则需要明明白白的告诉它你想跟踪这个文件，使用 <code>git add</code>指令。</p></li></ul><h4 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h4><ul><li><p>使用 <code>git add</code>可以跟踪新文件。所以可以使用 <code>git add README</code>, 然后再运行 <code>git status</code>会看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   pic/git存储项目虽时间改变的快照.png</span><br><span class="line">  new file:   pic/lifecycle.png</span><br><span class="line">  new file:   pic/工作目录，暂存区域及Git仓库.png</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">  pic/实习学习笔记.md</span><br><span class="line"></span><br><span class="line"># 使用 git add 后</span><br><span class="line">$ git add pic/实习学习笔记.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   pic/git存储项目虽时间改变的快照.png</span><br><span class="line">  new file:   pic/lifecycle.png</span><br><span class="line">  new file:   pic/实习学习笔记.md</span><br><span class="line">  new file:   pic/工作目录，暂存区域及Git仓库.png</span><br></pre></td></tr></table></figure><p>只要在 <code>Changes to be committed</code>这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。 你可能会想起之前我们使用 <code>git init</code>后就运行了 <code>git add (files)</code>命令，开始跟踪当前目录下的文件。 <code>git add</code>命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。</p></li><li><p>关于 <code>git add</code>指令还有别的作用：</p><ul><li>用于追踪新文件</li><li>用于将已跟踪的文件放入暂存区</li><li>用于合并时把有冲突的文件标记为已解决</li></ul></li></ul><h4 id="暂存已修改文件"><a href="#暂存已修改文件" class="headerlink" title="暂存已修改文件"></a>暂存已修改文件</h4><ul><li><p>修改已被跟踪的文件。比如说修改了一个名为 实习学习笔记.md 的文件，然后运行 <code>git status</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   pic/git存储项目虽时间改变的快照.png</span><br><span class="line">  new file:   pic/lifecycle.png</span><br><span class="line">  new file:   pic/实习学习笔记.md</span><br><span class="line">  new file:   pic/工作目录，暂存区域及Git仓库.png</span><br><span class="line"></span><br><span class="line"># 说明已跟踪文件内容发生了变化，但是还未放入暂存区。如果想暂存这次更新，需要使用 git add 指令。 git add 指令是一个多功能命令：可以用它来跟踪新文件，或者把已经跟踪的文件放到暂存区中，还能用于合并时把有冲突的文件标记为已解决状态等。</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">  modified:   pic/实习学习笔记.md</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"># 使用 git add 指令将其添加到暂存区</span><br><span class="line">$ git add pic/实习学习笔记.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   pic/git存储项目虽时间改变的快照.png</span><br><span class="line">  new file:   pic/lifecycle.png</span><br><span class="line">  new file:   pic/实习学习笔记.md</span><br><span class="line">  new file:   pic/工作目录，暂存区域及Git仓库.png</span><br></pre></td></tr></table></figure></li><li><p>需要注意的是，当已经使用了 <code>git add</code>指令暂存的版本又经过修改之后，需在再重新使用 <code>git add</code>指令将最新的修改放入暂存区，否则此时暂存区里只有上一次修改的内容。</p></li></ul><h4 id="提交文件到仓库"><a href="#提交文件到仓库" class="headerlink" title="提交文件到仓库"></a>提交文件到仓库</h4><ul><li><p>使用 <code>git commit</code>指令可以使得暂存在暂存区的文件被提交到仓库中去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br><span class="line">[master (root-commit) 2713657] 第一次的修改提交</span><br><span class="line"> 4 files changed, 22 insertions(+)</span><br><span class="line"> create mode 100644 pic/git存储项目虽时间改变的快照.png</span><br><span class="line"> create mode 100644 pic/lifecycle.png</span><br><span class="line"> create mode 100644 pic/实习学习笔记.md</span><br><span class="line"> create mode 100644 pic/工作目录，暂存区域及Git仓库.png</span><br></pre></td></tr></table></figure></li></ul><h3 id="基本的-Git-操作指令"><a href="#基本的-Git-操作指令" class="headerlink" title="基本的 Git 操作指令"></a>基本的 Git 操作指令</h3><h4 id="git-status-命令概述"><a href="#git-status-命令概述" class="headerlink" title="git status 命令概述"></a>git status 命令概述</h4><ul><li><p>使用 <code>git status</code>时，实际上可以使用更为方便的指令来达到更为紧凑的格式输出。比如使用 <code>git status -s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"></span><br><span class="line">#  M 靠右的 M 表示修改过的文件并且还未被放入暂存区</span><br><span class="line"> M README</span><br><span class="line"> </span><br><span class="line"># MM 靠左的 M 表示该文件被修改后放入了暂存区，靠右的表示修改过的文件并且还未被放入暂存区，所以 Rakefile 文件被修改过后放入了暂存区，但是之后又进行了修改，还未将最后一次修改放入暂存区</span><br><span class="line">MM Rakefile</span><br><span class="line"></span><br><span class="line"># A 表示新添加到暂存区的文件</span><br><span class="line">A  lib/git.rb</span><br><span class="line"></span><br><span class="line"># M 靠左的 M 表示该文件被修改后放入了暂存区</span><br><span class="line">M  lib/simplegit.rb</span><br><span class="line"></span><br><span class="line"># ?? 表示还未被跟踪</span><br><span class="line">?? LICENSE.txt  </span><br><span class="line"></span><br><span class="line"># 所以此时暂存区中的文件有 Rakefile, lib/git.rb, lib/simplegit.rb</span><br></pre></td></tr></table></figure></li></ul><h4 id="git-diff-命令概述"><a href="#git-diff-命令概述" class="headerlink" title="git diff 命令概述"></a>git diff 命令概述</h4><ul><li><p><code>git diff</code>可以说是 <code>git status</code>的具体版本，<code>git status</code>只能查看修改了哪些文件，而 <code>git diff</code>能够具体到该文件的某一部分。通常有以下两个用法</p><ul><li><p>当前做的更新哪些还没有暂存？</p><p>首先修改 pic/实习学习笔记.md 文件，然后使用 git status 指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">    modified:   pic/实习学习笔记.md</span><br><span class="line">    </span><br><span class="line"># 表示该文件修改后还没有暂存</span><br></pre></td></tr></table></figure><p>此时使用 <code>git diff</code>可以查看当前未暂存文件更新了哪些部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/实习学习笔记.md</span><br><span class="line">index 2b4e07b..a50f1a2 100644</span><br><span class="line">--- a/pic/实习学习笔记.md</span><br><span class="line">+++ b/pic/实习学习笔记.md</span><br><span class="line">@@ -14,7 +14,7 @@</span><br><span class="line">-* 有额外时间的话，需要将之前没读完的书继续读下去。</span><br><span class="line">+* 有额外时间的话，需要将之前没读完的书继续读下去。呵呵呵</span><br></pre></td></tr></table></figure><p>此时就可以查看未暂存文件修改的部分了。</p><ul><li><p>有哪些更新已经暂存起来了准备好了下次提交？</p><p>可以使用 <code>git diff --staged</code>指令查看，首先需要使用 <code>git add</code>指令将刚刚修改的文件加入暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git add pic/实习学习笔记.md</span><br><span class="line">shenglanyadeMacBook-Pro:desktop shenglanya$ git diff --staged</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/实习学习笔记.md</span><br><span class="line">index 2b4e07b..a50f1a2 100644</span><br><span class="line">--- a/pic/实习学习笔记.md</span><br><span class="line">+++ b/pic/实习学习笔记.md</span><br><span class="line">@@ -14,7 +14,7 @@</span><br><span class="line">-* 有额外时间的话，需要将之前没读完的书继续读下去。</span><br><span class="line">+* 有额外时间的话，需要将之前没读完的书继续读下去。呵呵呵</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>当我们将文件暂存后继续编辑时，使用 <code>git status</code>指令查看如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  modified:   pic/实习学习笔记.md</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">  modified:   pic/实习学习笔记.md</span><br><span class="line"></span><br><span class="line"># 该文件同时出现在了暂存区和修改部分。</span><br></pre></td></tr></table></figure></li><li><p>现在运行 <code>git diff</code>查看暂存前后的变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/实习学习笔记.md</span><br><span class="line">index a50f1a2..2b4e07b 100644</span><br><span class="line">--- a/pic/实习学习笔记.md</span><br><span class="line">+++ b/pic/实习学习笔记.md</span><br><span class="line">@@ -14,7 +14,7 @@</span><br><span class="line">-* 有额外时间的话，需要将之前没读完的书继续读下去。呵呵呵</span><br><span class="line">+* 有额外时间的话，需要将之前没读完的书继续读下去。</span><br></pre></td></tr></table></figure></li><li><p>再使用 <code>git diff --staged</code>查看变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --staged</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/实习学习笔记.md</span><br><span class="line">index 2b4e07b..a50f1a2 100644</span><br><span class="line">--- a/pic/实习学习笔记.md</span><br><span class="line">+++ b/pic/实习学习笔记.md</span><br><span class="line">@@ -14,7 +14,7 @@</span><br><span class="line">-* 有额外时间的话，需要将之前没读完的书继续读下去。</span><br><span class="line">+* 有额外时间的话，需要将之前没读完的书继续读下去。呵呵呵</span><br></pre></td></tr></table></figure><p>表示这个指令查看的是暂存区中文件的修改。</p></li></ul><h4 id="git-commit-命令概述"><a href="#git-commit-命令概述" class="headerlink" title="git commit 命令概述"></a>git commit 命令概述</h4><ul><li><p>当使用 <code>git commit</code>命令提交暂存区域的文件时，一定要确认是否还有什么修改过或新建的文件还未放入暂存区，否则一旦提交，这些文件或修改都会只留在本地磁盘，不会加入版本控制中。所以每次提交前都需要执行 <code>git status</code>命令来查看是否都暂存起来了</p></li><li><p>可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;</span><br><span class="line"></span><br><span class="line"># 表示当前在 master 分支上提交的，本次提交的完整 SHA-1 校验和是 463dc4f</span><br><span class="line">[master 463dc4f] Story 182: Fix benchmarks for speed</span><br><span class="line"></span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 README</span><br></pre></td></tr></table></figure></li><li><p>注意：提交的是放在暂存区的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时再纳入版本管理。每一次提交都是对项目的一次快照，以后可以回到这个状态或进行比较。</p></li><li><p>使用 <code>git commit -a</code>可以跳过暂存这一步骤，git 会自动把所有已经跟踪过的文件暂存起来并且提交，即跳过 <code>git add</code>步骤。</p></li></ul><h4 id="git-rm-命令概述"><a href="#git-rm-命令概述" class="headerlink" title="git rm 命令概述"></a>git rm 命令概述</h4><ul><li><p>要从 Git 中移除某个文件，就必须从已经跟踪的文件清单中删除，然后提交。</p></li><li><p>删除有两种方式</p><ul><li>第一种是简单的从暂存区中删除。但是文件还在被跟踪着。</li><li>第二种是直接在未暂存区域中移除文件，表示直接将文件移除版本控制中。不再跟踪。</li></ul></li><li><p>下面来演示一下，首先对工作区域中的文件删除,使用 <code>rm pic/实习学习笔记.md</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ rm pic/实习学习笔记.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">  deleted:    pic/实习学习笔记.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line"></span><br><span class="line"># 此时将文件从暂存区域中删除，但是文件还在被追踪</span><br></pre></td></tr></table></figure></li><li><p>然后再将文件从跟踪中删除，这里两种指令 <code>$ git rm pic/实习学习笔记.md</code>和 <code>$ git add pic/实习学习笔记.md</code>都能达到同样效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git add pic/实习学习笔记.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  deleted:    pic/实习学习笔记.md</span><br></pre></td></tr></table></figure></li><li><p>需要注意的是，如果删除文件之前文件修改过并且已经放入了暂存区域，则必须使用强制删除选项<code>-f</code>才能将其删除。主要是为了防止误删。</p></li><li><p>当我们想要将文件从 Git 仓库中删除但是却想让他仍在我们的工作区域中时，（即保存在本地磁盘并且不被 Git 跟踪），为了达到这一目的，使用 <code>--cached</code>选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached pic/git存储项目虽时间改变的快照.png</span><br><span class="line">rm &apos;pic/git存储项目虽时间改变的快照.png&apos;</span><br><span class="line"></span><br><span class="line"># 执行完此命令后，pic/git存储项目虽时间改变的快照.png 文件还在本地磁盘上，并没有被删除。</span><br></pre></td></tr></table></figure></li></ul><h4 id="git-mv-命令概述"><a href="#git-mv-命令概述" class="headerlink" title="git mv 命令概述"></a>git mv 命令概述</h4><ul><li><p>Git 并不显式的跟踪文件移动操作。所以如果 Git 重命名某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。</p></li><li><p>当我们想在 Git 中对文件进行改名可以使用 <code>git mv a b</code>方式来操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git mv pic/实习学习笔记.md pic/note.md</span><br><span class="line">$ git diff --staged</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/note.md</span><br><span class="line">similarity index 100%</span><br><span class="line">rename from pic/实习学习笔记.md</span><br><span class="line">rename to pic/note.md</span><br></pre></td></tr></table></figure></li><li><p><code>git mv</code>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv pic/实习学习笔记.md pic/note.md</span><br><span class="line">$ git rm pic/实习学习笔记.md</span><br><span class="line">$ git add pic/note.md</span><br></pre></td></tr></table></figure></li></ul><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><ul><li><p>我们有时会有些文件不需要 Git 来进行管理，也不希望他们总是出现在未跟踪列表中，所以此时，我们可以创建一个名为 .gitignore 的文件，并在其中列出要忽略掉文件模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 先创建此忽略文件并向其中添加需要忽略的文件</span><br><span class="line">$ vi .gitignore</span><br><span class="line"></span><br><span class="line"># 查看此文件</span><br><span class="line">$ cat .gitignore</span><br><span class="line">.localized</span><br><span class="line"></span><br><span class="line"># 表示忽略所有以 .o 或 .a 结尾的文件</span><br><span class="line">*.[oa]</span><br><span class="line"></span><br><span class="line"># 表示忽略所有以波浪符（~）结尾的文件</span><br><span class="line">*~</span><br></pre></td></tr></table></figure></li><li><p>一些规范如下</p><ul><li>所有空行或者以 <code>＃</code>开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。glob 即是指 shell 简化了的正则表达式。<ul><li>其中 * 可以匹配 0 ~ n 个字符</li><li>？ 只能匹配一个字符</li><li>[0-9]表示匹配所有 0 到 9 的数字</li><li><strong> 表示匹配任意中间目录 比如 `a/</strong>/z`可以匹配 a/z, a/b/z, a/b/c/z 等</li></ul></li><li>匹配模式可以以（<code>/</code>）开头防止递归。</li><li>匹配模式可以以（<code>/</code>）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</li></ul></li></ul><h4 id="git-stash-命令概述"><a href="#git-stash-命令概述" class="headerlink" title="git stash 命令概述"></a>git stash 命令概述</h4><ul><li><p>当我们已经在一个分支上修改文件后，如果必须要切换到其他分支展开其他的工作，而当前分支的工作还没有完成，此时我们需要使用 <code>$ git stash</code>或 <code>$ git stash save</code>命令将当前分支上的工作暂存到栈上，这时你的工作目录就干净了，就可以切换到其他分支工作，等工作完成后，再切换回原来的分支，可以使用 <code>$ git stash apply</code>将你刚刚的储藏重新应用。如果想查看你当前一共有多少个储藏，可以使用 <code>$ git stash list</code>来查看。如果你并不想应用最新的分支，而是想应用某一个早些时间的分支，你可以使用 <code>$ git stash apply stash@{1}</code>，其中最后一个括号内的数字为你某一次提交到工作栈上的暂存记录。如果你不指定 apply 的参数，git 将认为你想要应用最近一次的储藏。</p></li><li><p>当我们返回原本的分支后，使用 <code>$ git stash apply</code>指令恢复了工作栈中暂存的数据，但是如果当你提交这个分支之前，已经在暂存区缓存了一部分工作内容，并且使用 stash 保存了工作状态，此时当你恢复工作栈中的数据后，实际上暂存区中的内容将会被移出暂存区，而被放在了工作目录中修改的部分，你需要手动将它再放回暂存区，否则可以使用 <code>$ git stash apply --index</code>来尝试重新将暂存区的文件恢复到暂存区中。当你把这个修改放入暂存区后，实际上堆栈上还有这个修改的记录，此时你可以使用 <code>$ git stash drop stash@{1}</code>来从栈中移除它，或者直接使用 <code>$ git stash pop</code>来应用储藏栈这样它就会自动从储藏栈上消失了。</p></li><li><p><code>$ git stash --keep-index</code>指令的作用在于告诉 Git 不要储藏任何你通过 git add 命令已经暂存的东西，也就是说比如你现在已经修改了一部分工作目录中的内容，并且还有一部分已经被你暂存了下来。此时你暂时不想继续改工作目录中的内容了，可是你也不想将它暂存到暂存区，此时可以使用这个指令将它暂存到工作栈上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">M  index.html</span><br><span class="line"> M lib/simplegit.rb</span><br><span class="line"></span><br><span class="line">$ git stash --keep-index</span><br><span class="line">Saved working directory and index state WIP on master: 1b65b17 added the index file</span><br><span class="line">HEAD is now at 1b65b17 added the index file</span><br><span class="line"></span><br><span class="line">$ git status -s</span><br><span class="line">M  index.html</span><br></pre></td></tr></table></figure></li><li><p><code>$ git stash -u</code>可以储藏还未跟踪的文件到工作栈</p></li><li><p><code>$ git stash branch</code>如果使用 stash 储藏了一些工作，然后继续在储藏的分支上工作，在重新应用 stash 储藏的文件工作时可能会有问题。 如果应用尝试修改刚刚储藏的修改的文件，也就是两次同时修改了一个文件，你会得到一个合并冲突并不得不解决它。 如果想要一个轻松的方式来再次测试储藏的改动，可以运行 <code>git stash branch</code>创建一个新分支，检出储藏工作时所在的提交，重新在那应用工作，然后在应用成功后扔掉储藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git stash branch testchanges</span><br><span class="line">Switched to a new branch &quot;testchanges&quot;</span><br><span class="line"># On branch testchanges</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">#</span><br><span class="line">#      modified:   index.html</span><br><span class="line">#</span><br><span class="line"># Changed but not updated:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">#</span><br><span class="line">#      modified:   lib/simplegit.rb</span><br><span class="line">#</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (f0dfc4d5dc332d1cee34a634182e168c4efc3359)</span><br></pre></td></tr></table></figure></li><li><p><code>$ git stash -all</code>可以移除工作目录中所有未跟踪的文件并且存储在工作栈上，相应的一个不怎么安全的方法是 <code>$ git clean</code>直接清除了内容，无法追溯回。不过可以使用 <code>git clean</code>命令去除冗余文件或者清理工作目录。 使用<code>git clean -f -d</code>命令来移除工作目录中所有未追踪的文件以及空的子目录。 <code>-f</code>意味着 <em>强制</em>或 “确定移除”。在使用 <code>$ git clean</code>之前，我们可以先使用 <code>$ git clean -d -n</code>来看一下这样做的后果是什么，也就是有什么文件会被移除。</p></li></ul><h4 id="git-log-命令概述"><a href="#git-log-命令概述" class="headerlink" title="git log 命令概述"></a>git log 命令概述</h4><ul><li><p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 此时便需要 <code>git log</code>命令。默认不加其他参数时， <code>git log</code>惠安提交时间列出所有更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add pic</span><br><span class="line"></span><br><span class="line">commit ec50914561593b769a98ff468de6697a6d964cbd</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:33:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    xiugai</span><br><span class="line"></span><br><span class="line">commit a7372097ab8f063e17beca6fa8f82a15bb11c5e3</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:20:05 2018 +0800</span><br><span class="line"></span><br><span class="line">    提交</span><br></pre></td></tr></table></figure></li><li><p>常用选项 <code>-p</code>,用来显示每次提交的内容差异，可以加上 -2 来仅仅显示最近两次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ git log -p</span><br><span class="line">commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add pic</span><br><span class="line"></span><br><span class="line">diff --git a/pic/git存储项目虽时间改变的快照.png b/pic/git存储项目虽时间改变的快照.png</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..1036a42</span><br><span class="line">Binary files /dev/null and b/pic/git存储项目虽时间改变的快照.png differ</span><br><span class="line"></span><br><span class="line">commit ec50914561593b769a98ff468de6697a6d964cbd</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:33:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    xiugai</span><br><span class="line"></span><br><span class="line">diff --git a/pic/git存储项目虽时间改变的快照.png b/pic/git存储项目虽时间改变的快照.png</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index 1036a42..0000000</span><br><span class="line">Binary files a/pic/git存储项目虽时间改变的快照.png and /dev/null differ</span><br></pre></td></tr></table></figure></li><li><p><code>--stat</code>选项可以看到每次提交的简略统计信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ git log --stat</span><br><span class="line">commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add pic</span><br><span class="line"></span><br><span class="line"> pic/git存储项目虽时间改变的快照.png | Bin 0 -&gt; 20722 bytes</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"></span><br><span class="line">commit ec50914561593b769a98ff468de6697a6d964cbd</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:33:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    xiugai</span><br><span class="line"></span><br><span class="line"> pic/git存储项目虽时间改变的快照.png | Bin 20722 -&gt; 0 bytes</span><br><span class="line"> pic/实习学习笔记.md                       |  22 ++++++++++++++++++++++</span><br><span class="line"> 2 files changed, 22 insertions(+)</span><br><span class="line"></span><br><span class="line">commit a7372097ab8f063e17beca6fa8f82a15bb11c5e3</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:20:05 2018 +0800</span><br></pre></td></tr></table></figure></li><li><p>常用选项 <code>--pretty</code>可以指定使用不同于默认格式的方式展示提交信息。比如 <code>oneline</code>将每个提交放在一行显示，查看到提交数很大时非常有用。另外还有 <code>short`</code>full`等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master) add pic</span><br><span class="line">ec50914561593b769a98ff468de6697a6d964cbd xiugai</span><br><span class="line">a7372097ab8f063e17beca6fa8f82a15bb11c5e3 提交</span><br><span class="line">2713657f264a3a019580dc3a489d303fade5dc5c 第一次的修改提交</span><br></pre></td></tr></table></figure></li><li><p><code>format</code>选项可以定制要显示的记录格式。这样的输出对后期提取分析格外有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$git log --pretty=format:&quot;%h - %an, %ar : s&quot;</span><br><span class="line">fb40f7a - shenglanya, 60 minutes ago : add pic</span><br><span class="line">ec50914 - shenglanya, 61 minutes ago : xiugai</span><br><span class="line">a737209 - shenglanya, 74 minutes ago : 提交</span><br><span class="line">2713657 - shenglanya, 3 hours ago : 第一次的修改提交</span><br></pre></td></tr></table></figure><p>常用选项以及其代表意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">选项        说明</span><br><span class="line">%H    提交对象（commit）的完整哈希字串</span><br><span class="line">%h        提交对象的简短哈希字串</span><br><span class="line">%T        树对象（tree）的完整哈希字串</span><br><span class="line">%t        树对象的简短哈希字串</span><br><span class="line">%P        父对象（parent）的完整哈希字串</span><br><span class="line">%p        父对象的简短哈希字串</span><br><span class="line">%an       作者（author）的名字</span><br><span class="line">%ae       作者的电子邮件地址</span><br><span class="line">%ad       作者修订日期（可以用 --date= 选项定制格式）</span><br><span class="line">%ar       作者修订日期，按多久以前的方式显示</span><br><span class="line">%cn       提交者（committer）的名字</span><br><span class="line">%ce       提交者的电子邮件地址</span><br><span class="line">%cd       提交日期</span><br><span class="line">%cr       提交日期，按多久以前的方式显示</span><br><span class="line">%s        提交说明</span><br></pre></td></tr></table></figure></li><li><p>选项 <code>--graph</code>可以形象的展示分支，合并历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty --graph</span><br><span class="line">* commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master)</span><br><span class="line">| Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">| Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line">| </span><br><span class="line">|     add pic</span><br><span class="line">| </span><br><span class="line">* commit ec50914561593b769a98ff468de6697a6d964cbd</span><br><span class="line">| Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">| Date:   Wed Mar 7 11:33:36 2018 +0800</span><br><span class="line">| </span><br><span class="line">|     xiugai</span><br><span class="line">| </span><br><span class="line">* commit a7372097ab8f063e17beca6fa8f82a15bb11c5e3</span><br><span class="line">| Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">| Date:   Wed Mar 7 11:20:05 2018 +0800</span><br><span class="line">| </span><br><span class="line">|     提交</span><br></pre></td></tr></table></figure></li><li><p>git log 的常用选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">选项                说明</span><br><span class="line">-p                按补丁格式显示每个更新之间的差异。</span><br><span class="line">--stat            显示每次更新的文件修改统计信息。</span><br><span class="line">--shortstat       只显示 --stat 中最后的行数修改添加移除统计。</span><br><span class="line">--name-only       仅在提交信息后显示已修改的文件清单。</span><br><span class="line">--name-status 显示新增、修改、删除的文件清单。</span><br><span class="line">--abbrev-commit   仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</span><br><span class="line">--relative-date   使用较短的相对时间显示（比如，“2 weeks ago”）。</span><br><span class="line">--graph           显示 ASCII 图形表示的分支合并历史。</span><br><span class="line">--pretty      使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</span><br></pre></td></tr></table></figure></li><li><p>限制 <code>git log</code>输出的选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">选项                说明</span><br><span class="line">-(n)          仅显示最近的 n 条提交</span><br><span class="line">--since, --after仅显示指定时间之后的提交。</span><br><span class="line">--until, --before仅显示指定时间之前的提交。</span><br><span class="line">--author      仅显示指定作者相关的提交。</span><br><span class="line">--committer       仅显示指定提交者相关的提交。</span><br><span class="line">--grep            仅显示含指定关键字的提交</span><br><span class="line">-S                仅显示添加或移除了某个关键字的提交</span><br></pre></td></tr></table></figure></li></ul><h4 id="撤销操作指令"><a href="#撤销操作指令" class="headerlink" title="撤销操作指令"></a>撤销操作指令</h4><ul><li><p><strong>重新提交</strong>：有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code>选项的提交命令尝试重新提交：<code>$ git commit --amend</code>这个命令将暂存区中的文件提交，如果自从上次提交以来还未做任何修改，则快照保持不变，你修改的只有提交信息。例如你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &apos;initial commit&apos;</span><br><span class="line">$ git add forgotten_file</span><br><span class="line">$ git commit --amend</span><br><span class="line"></span><br><span class="line"># 最终只会有一个提交，第二次提交将代替第一次提交的结果</span><br></pre></td></tr></table></figure></li><li><p><strong>取消暂存的文件</strong>：可以使用 <code>git reset HEAD yourfile</code>来进行取消暂存区域内文件的暂存操作。</p></li><li><p><strong>撤销对文件的修改</strong>：如果你不想保存对文件的修改，如何方便的将其还原成上次提交的样子？使用 <code>$ gitcheckout -- pic/实习学习笔记.md</code>撤销之前所做的修改。</p></li></ul><h3 id="Git-远程仓库的使用"><a href="#Git-远程仓库的使用" class="headerlink" title="Git 远程仓库的使用"></a>Git 远程仓库的使用</h3><ul><li><p><strong>查看远程仓库</strong>: 使用 <code>git remote</code>命令可以列出你指定的每个远程服务器的简写。如果已经克隆了自己的仓库，那么至少能看到 origin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ios-client</span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><p>可以指定参数 -v 可以查看你的读写权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin    https://git.ms.netease.com/netease-precious-metals-client/ios-client.git (fetch)</span><br><span class="line">origin    https://git.ms.netease.com/netease-precious-metals-client/ios-client.git (push)</span><br></pre></td></tr></table></figure></li><li><p><strong>添加远程仓库</strong>： 运行 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code>添加一个新的远程 Git 仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote add test https://github.com/lanyasheng/NTAlgorithm.git</span><br><span class="line">$ git remote -v</span><br><span class="line">origin    https://git.ms.netease.com/netease-precious-metals-client/ios-client.git (fetch)</span><br><span class="line">origin    https://git.ms.netease.com/netease-precious-metals-client/ios-client.git (push)</span><br><span class="line">test  https://github.com/lanyasheng/NTAlgorithm.git (fetch)</span><br><span class="line">test  https://github.com/lanyasheng/NTAlgorithm.git (push)</span><br></pre></td></tr></table></figure><p>现在就可以使用 test 来代替整个 URL ，例如使用 <code>git fetch test</code>来拉取远端 Git 仓库中有但你没有的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch test</span><br><span class="line">warning: no common commits</span><br><span class="line">remote: Counting objects: 84, done.</span><br><span class="line">remote: Total 84 (delta 0), reused 0 (delta 0), pack-reused 83</span><br><span class="line">Unpacking objects: 100% (84/84), done.</span><br><span class="line">From https://github.com/lanyasheng/NTAlgorithm</span><br><span class="line"> * [new branch]          develop    -&gt; test/develop</span><br><span class="line"> * [new branch]          master     -&gt; test/master</span><br></pre></td></tr></table></figure><p>现在可以在本地访问 test/master 分支了，实际上对应远端的 master 分支。</p></li><li><p><strong>从仓库中抓取</strong>: <code>git fetch</code>会访问远端仓库，从中拉取所有你没有的信息。执行完后，你会拥有该仓库的所有分支引用可以用来随时合并和查看。当使用了 <code>git clone</code>命令克隆一个远端仓库时，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。<code>git fetch origin</code>会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 <code>git fetch</code>命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p></li><li><p><strong>从仓库上拉取</strong>: <code>git pull</code>可以用来自动的抓取然后合并远程分支到当前分支，前提是你有一个分支设置为跟踪一个远程的分支。所以 <code>git pull == git fetch + git merge</code>。默认情况下， <code>git clone</code>会自动设置本地的 master 分支跟踪远程仓库的 master 分支，运行 <code>git pull</code>通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。</p></li><li><p><strong>推送到远程分支</strong>：<code>git push [remote-name][branch-name]</code>指令可以将你的项目推送到服务器。例如当你想将 master 推到 origin 时，可以使用 <code>$ git push origin master</code>只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送</p></li><li><p><strong>查看远程仓库</strong>: 如果想查看一个远程仓库的更多信息，可以使用 <code>$ git remote show test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show test</span><br><span class="line">* remote test</span><br><span class="line">  Fetch URL: https://github.com/lanyasheng/NTAlgorithm.git</span><br><span class="line">  Push  URL: https://github.com/lanyasheng/NTAlgorithm.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    develop tracked</span><br><span class="line">    master  tracked</span><br><span class="line">    </span><br><span class="line">  Local branches configured for &apos;git pull&apos;:</span><br><span class="line">    develop merges with remote develop</span><br><span class="line">    master  merges with remote master</span><br><span class="line">  Local refs configured for &apos;git push&apos;:</span><br><span class="line">    develop pushes to develop (local out of date)</span><br><span class="line">    master  pushes to master  (local out of date)</span><br></pre></td></tr></table></figure><p>这个命令列出了当你在特定的分支上执行 <code>git push</code>会自动地推送到哪一个远程分支。 它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了，还有当你执行 <code>git pull</code>时哪些分支会自动合并</p></li><li><p><strong>远程仓库的移除与命名</strong>：运行 <code>git remote rename &lt;shortname&gt; &lt;url&gt;</code>重命名远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename test testNea</span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">testNea</span><br></pre></td></tr></table></figure></li><li><p><strong>移除远程仓库</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm testNea</span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure></li></ul><h3 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h3><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><ul><li><p>轻量标签 — 就像一个不会改变的分支，只是一个特定提交的引用，创建轻量标签只需要提供版本号即可。<code>git tag v1.4-1w</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.4-1w</span><br><span class="line">$ git show</span><br><span class="line">commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master, tag: v1.4-1w, tag: v1.3)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add pic</span><br><span class="line"></span><br><span class="line">diff --git a/pic/git存储项目虽时间改变的快照.png b/pic/git存储项目虽时间改变的快照.png</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..1036a42</span><br><span class="line">Binary files /dev/null and b/pic/git存储项目虽时间改变的快照.png differ</span><br></pre></td></tr></table></figure></li><li><p>附注标签 — 一个存储在 Git 数据库中的一个完整对象，他们可以被校验。其中包含打标签者的名字，电子邮件地址、日期时间，标签信息。并且可以使用 GNU Privacy Guard （GPG）签名与验证。可以使用<code>$ git tag -a v1.3</code>这样就给当前版本打上了 v1.3 标签。也可以使用 <code>$ git tag -a v1.3 -m &#39;my version 1.3&#39;</code>这样就直接标备注了。 <code>git show</code>可以查看标签信息与对应的提交信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.3</span><br><span class="line">$ git show</span><br><span class="line">commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master, tag: v1.3)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add pic</span><br><span class="line"></span><br><span class="line">diff --git a/pic/git存储项目虽时间改变的快照.png b/pic/git存储项目虽时间改变的快照.png</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..1036a42</span><br><span class="line">Binary files /dev/null and b/pic/git存储项目虽时间改变的快照.png differ</span><br></pre></td></tr></table></figure></li></ul><h4 id="后期打标签"><a href="#后期打标签" class="headerlink" title="后期打标签"></a>后期打标签</h4><ul><li><p>也可以对过去提交打标签。例如提交历史如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master, tag: v1.4-1w, tag: v1.3) add pic</span><br><span class="line">ec50914561593b769a98ff468de6697a6d964cbd xiugai</span><br><span class="line">a7372097ab8f063e17beca6fa8f82a15bb11c5e3 提交</span><br><span class="line">20c944dba3f056aef30aada88d0a452e8faffcbc hehe</span><br><span class="line">2713657f264a3a019580dc3a489d303fade5dc5c 第一次的修改提交</span><br></pre></td></tr></table></figure><p>可以使用 <code>$ git tag -a v1.2 2713657</code>表示对该校验和的版本打上标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.2</span><br><span class="line">v1.3</span><br><span class="line">v1.4-1w</span><br><span class="line">$ git show v1.2</span><br><span class="line">tag v1.2</span><br><span class="line">Tagger: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 15:00:31 2018 +0800</span><br><span class="line"></span><br><span class="line">对之前的打标签`</span><br><span class="line"></span><br><span class="line">commit 2713657f264a3a019580dc3a489d303fade5dc5c (tag: v1.2)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 09:41:21 2018 +0800</span><br><span class="line"></span><br><span class="line">    第一次的修改提交</span><br><span class="line"></span><br><span class="line">diff --git a/pic/git存储项目虽时间改变的快照.png b/pic/git存储项目虽时间改变的快照.png</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..1036a42</span><br><span class="line">Binary files /dev/null and b/pic/git存储项目虽时间改变的快照.png differ</span><br><span class="line">diff --git a/pic/lifecycle.png b/pic/lifecycle.png</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..922b02c</span><br><span class="line">Binary files /dev/null and b/pic/lifecycle.png differ</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/实习学习笔记.md</span><br><span class="line">new file mode 100644</span><br></pre></td></tr></table></figure></li></ul><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><h3 id="分支简介"><a href="#分支简介" class="headerlink" title="分支简介"></a>分支简介</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>Git 保存到不是文件的变化或差异，而是一系列不同时刻的文件快照。当提交时，Git 会保存一个提交的对象。该提交对象会包含一个指向暂存内容快照的指针，还会包含作者姓名和邮箱，提交时输入的信息以及指向他的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象。</li><li>我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和然后会把当前版本的文件快照保存到 Git 仓库中，最终将校验和加入到暂存区域等待提交：</li></ul><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><ul><li>Git 创建新分支的本质就是创建一个可以移动的新的指针。比如创建一个 testing 分支。<code>$ git branch testing</code>这会在当前所提交的对象上创建一个指针，此时如图：</li></ul><p><img src="/Web开发/Git从入门到熟练使用/3.png" alt=""></p><p>two-branches.png</p><ul><li>如何判断 Git 当前在哪一个分支？此时就要依靠</li></ul><p>  HEAD</p><p>  指针。该指针指向当前所在的本地分支。如图</p><p>  <img src="/Web开发/Git从入门到熟练使用/4.png" alt=""></p><p>此时 HEAD 指针指向 master 指针，也就是实际上 HEAD 指针指向的时当前所在的本地分支。在本例中，我们仍在 master 分支上，因为 <code>git branch</code>命令仅仅是创建了一个新分支，并没有切换到它上面。可以使用以下命令来查看各个分支当前所指的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --decorate</span><br><span class="line">5a5f9fe (HEAD -&gt; master) rename</span><br><span class="line">fb40f7a (tag: v1.4-1w, tag: v1.3, testing) add pic</span><br><span class="line">ec50914 xiugai</span><br><span class="line">a737209 提交</span><br><span class="line">2713657 (tag: v1.2) 第一次的修改提交</span><br></pre></td></tr></table></figure><p>可以看到，当前 HEAD 和 master 分支均指向 5a5f9fe 开头的对象</p><h4 id="分支切换"><a href="#分支切换" class="headerlink" title="分支切换"></a>分支切换</h4><ul><li><p>使用 <code>git checkout</code>命令可以切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout testing</span><br><span class="line">Switched to branch &apos;testing&apos;</span><br><span class="line">$ git log --oneline --decorate</span><br><span class="line">fb40f7a (HEAD -&gt; testing, tag: v1.4-1w, tag: v1.3) add pic</span><br><span class="line">ec50914 xiugai</span><br><span class="line">a737209 提交</span><br><span class="line">2713657 (tag: v1.2) 第一次的修改提交</span><br></pre></td></tr></table></figure><p>可以看到，此时 HEAD 指针指向了 testing 指针，表示当前的本地分支切换为 testing 分支。然后在 testing 分支上进行一些操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a -m &apos;made a change on tesing&apos;</span><br><span class="line">[testing 844332b] made a change on tesing</span><br><span class="line"> 3 files changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 pic/head-to-master.png</span><br><span class="line"> create mode 100644 pic/test.md</span><br><span class="line"> create mode 100644 pic/two-branches.png</span><br><span class="line">$ git log --oneline --decorate</span><br><span class="line">844332b (HEAD -&gt; testing) made a change on tesing</span><br><span class="line">fb40f7a (tag: v1.4-1w, tag: v1.3) add pic</span><br><span class="line">ec50914 xiugai</span><br><span class="line">a737209 提交</span><br><span class="line">20c944d hehe</span><br><span class="line">2713657 (tag: v1.2) 第一次的修改提交</span><br></pre></td></tr></table></figure><p>此时可以发现 HEAD 指针指向 testing 指针指向了新提交的文件。[图片上传失败…(image-dde0a4-1520604809580)]</p><p>此时再切换到 master 分支看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">$ git log --oneline --decorate</span><br><span class="line">5a5f9fe (HEAD -&gt; master) rename</span><br><span class="line">fb40f7a (tag: v1.4-1w, tag: v1.3) add pic</span><br><span class="line">ec50914 xiugai</span><br><span class="line">a737209 提交</span><br><span class="line">2713657 (tag: v1.2) 第一次的修改提交</span><br></pre></td></tr></table></figure><p>可以发现此时 master 分支还指向刚刚它指向的位置，也就是[图片上传失败…(image-85e5da-1520604809580)]</p></li></ul><ul><li><p><code>git checkout master</code>一共做了两件事：</p><ul><li>使 HEAD 指向 master 分支</li><li>将工作目录恢复成 master 分支所指向的快照内容，也就是忽略 testing 分支所做的修改。</li></ul></li><li><p>若我们此时再对 master 分支上的文件上进行修改，就会产生分叉。因为你刚创建了一个新分支，并且切换过去进行了一些工作，然后后切换回了 master 分支进行了一些额外的工作。上述改动针对的是不同分支，你可以在不同分支之间来回切换并在某一时刻将他们合并。</p></li></ul><h4 id="项目分叉历史"><a href="#项目分叉历史" class="headerlink" title="项目分叉历史"></a>项目分叉历史</h4><ul><li><p>可以使用 <code>git log</code>命令查看分叉历史。运行 <code>git log --oneline --decorate --graph —all</code>，他会输出你的提交历史各个分支的指向以及项目的分支分叉情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --decorate --graph --all</span><br><span class="line">* b551643 (HEAD -&gt; master) made a change on master</span><br><span class="line">* 5a5f9fe rename</span><br><span class="line">| * 844332b (testing) made a change on tesing</span><br><span class="line">|/  </span><br><span class="line">* fb40f7a (tag: v1.4-1w, tag: v1.3) add pic</span><br><span class="line">* ec50914 xiugai</span><br><span class="line">* a737209 提交</span><br><span class="line">* 20c944d hehe</span><br><span class="line">* 2713657 (tag: v1.2) 第一次的修改提交</span><br></pre></td></tr></table></figure><p>由于 Git 的分支实际上只是包含所指对象的校验和，创建一个新分支仅仅相当于往一个文件中写入 41 个字节。</p></li></ul><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="分支的新建与合并"><a href="#分支的新建与合并" class="headerlink" title="分支的新建与合并"></a>分支的新建与合并</h4><ul><li><p>具体实例总结在此文章中 <a href="https://link.jianshu.com/?t=https%3A%2F%2Fgit-scm.com%2Fbook%2Fzh%2Fv2%2FGit-%25E5%2588%2586%25E6%2594%25AF-%25E5%2588%2586%25E6%2594%25AF%25E7%259A%2584%25E6%2596%25B0%25E5%25BB%25BA%25E4%25B8%258E%25E5%2590%2588%25E5%25B9%25B6" target="_blank" rel="noopener">分支的新建与合并</a></p></li><li><p>需要注意的地方：</p><ul><li><p>首先当你想直接从当前分支创建并切换到新分支时，可以使用 <code>$ git checkout -b yourname</code>来进行操作，这个命令等价于 <code>$ git branch yourname + $ git checkout yourname</code></p></li><li><p>当你在新分支上工作时，突然需要切换到之前开始分叉的 master 分支并且需要在 master 分支上开一个新的分支进行工作，则首先需要暂存你在 yourname 分支上还未进行暂存的修改，然后将其提交到仓库。否则可能会跟你即将检出的分支产生冲突。</p></li><li><p>当你在 master 分支上开了一个新分支并且已经解决完问题后，可以将 master 和 hotfix 进行合并，使用</p></li></ul></li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master, $ git merge hotfix</span><br></pre></td></tr></table></figure>进行合并。- 快进 （Fast forward）：在合并时，如果当前的 master 分支是你要合并分支的直接上游，则 Git 会直接将 master 指针向前推进到 hotfix 上面。然后就可以将 hotfix 进行删除。 使用 `$ git branch -d hotfix`- 合并提交：而如果 master 不是你要合并分支的直接上游，比如此时 master 分支已经指向了原本 hotfix 指向的位置，则将它与 yourname 分支合并起来会比较麻烦。由于此时 master 分支已经更新了，如果我们需要它新的内容可以将 master 合并到 yourname 上，如果不需要可以直接等 yourname 分支任务完成后，将其合并到 master 上面。如果我们想将 yourname 合并到 master 上，首先会记录他们两个指针所指向的最后一个快照，然后记录他们共同的祖先快照，最后将三方合并的结果做一个新的快照并且自动创建一个新的提交指向它。合并后可以删除 yourname 分支。</code></pre><ul><li>遇到冲突的分之合并：可以直接使用 <code>git status</code>状态来查看具体是哪个文件产生了冲突，然后直接打开该文件删除乱码部分和不需要的部分。</li></ul><h4 id="分支管理-git-branch-命令"><a href="#分支管理-git-branch-命令" class="headerlink" title="分支管理(git branch 命令)"></a>分支管理(git branch 命令)</h4><ul><li><p><code>$ git branch</code>命令不仅可以创建或删除分支，当不加参数时，其作用为可以查看当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><p>其中 * 表示当前分支</p></li><li><p><code>$ git branch -v</code>可以查看每个分支的最后一次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -v</span><br><span class="line">* master  b551643 made a change on master</span><br><span class="line">  testing 844332b made a change on tesing</span><br></pre></td></tr></table></figure></li><li><p><code>$ git branch --merged</code>可以查看哪些分支已经合并到当前分支上，同理 <code>$ git branch --no-merged</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --merged</span><br><span class="line">* master</span><br><span class="line">$ git branch --no-merged</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure></li><li><p><code>$ git branch -d yourname</code>可以用来删除已经合并的分支，如果是未合并的分支则会报错。</p></li></ul><h4 id="分支开发工作流程"><a href="#分支开发工作流程" class="headerlink" title="分支开发工作流程"></a>分支开发工作流程</h4><ul><li>长期分支（最常用）<ul><li>如只在 master 上保留稳定的代码，有可能仅仅是已经发布的代码。还有一些其他的分支如 develop 和 next 平行分支用来进行后续开发，一旦在在这些分支上达到了稳定，再将他们合并到 master 分支上。这样在确保这些已完成的特性分支能够通过所有的测试，并且不会引入 bug 后再将他们合并到 master 上等待下一次发布。</li></ul></li><li>特性分支<ul><li>特性分支被用来实现单一特性或相关工作，一旦工作完成它就会被删除。这项技术可以使你快速的进行上下文切换。当你做这么多操作时，这些分支要确保存于本地，而不会与服务器进行交互。</li></ul></li></ul><h4 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h4><ul><li>远程引用是指对远程仓库的引用，包括分支标签等。他们是你不能移动的本地引用，当你做任何网络通信操作时，他们会自动移动。远程跟踪分支像是你上次连接到远程仓库时，那些分支所处状态的书签。他们的命名格式为 (remote)/(branch) 。如果你想要看你最后一次与远程 origin 分支通信时 master 分支的状态，则可以查看 origin / master 分支。你与同事合作解决一个问题并且他们推送了一个 <code>iss53</code>分支，你可能有自己的本地 <code>iss53</code>分支；但是在服务器上的分支会指向 <code>origin/iss53</code>的提交。</li><li>当与远端仓库共同工作时，如果你不抓取fetch远端 orgin/master ，则它将会一直指向在你上次 fetch 的那个文件。此时即使你本地的 master 已经指向很远的地方了，远端的 orgin/master 还依旧指向你上次 fetch 的那个位置。直到你下一次 fetch。</li></ul><h3 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h3><ul><li><p>当我们使用分支合并时，要确定是谁合并到谁：当我们需要使用其他分支的内容时，可以把其他分支合并到我们的分支上。但是当我们在开发时，有时可能是从 master 或 develop 分支上拉取的工作分支，此时如果 master 或 develop 分支有更新并且我们需要用到，可以将 master 或 develop 分支拉取到我们的分支。否则，则应该等开发完毕后，将我们的分支合并到 master 或 develop 分支上。当开发完毕后，首先需要检出 master 分支，然后将工作分支合并到 master 上即可。 <code>$ git checkout master $ git merge workBranch</code>。合并完成后，可以将工作分支删除。<code>$ git branch -d workBranch</code>，需要注意的是，当我们删除的分支还包含未提交的内容，分支删除会失效。强制删除可以使用 <code>-D</code></p></li><li><p>当 merge 出现冲突时，我们可以先 <code>$ git status</code>来查看是哪里出现了问题，然后 cd 进入该文件，直接将冲突部分删除即可解决问题。合并完成后再次执行 <code>$ git status</code>来查看问题是否解决。若问题解决，即可提交。</p></li><li><p>当已经使用了 <code>git add</code>指令暂存的版本又经过修改之后，需在再重新使用 <code>git add</code>指令将最新的修改放入暂存区，否则此时暂存区里只有上一次修改的内容</p></li><li><p><code>$ git commit</code>指令仅仅是将暂存区内的文件快照提交到本地仓库中，想要推送到远程仓库则还需要 push 操作，在 push 操作之前我们需要先 <code>$ git fetch</code>操作将远程仓库的需要合并的文件抓取到本地，然后进行合并，合并完成后使用 <code>$ git status</code>指令进行查看，没问题后再推送到远端。这里其实也可以使用 <code>$ git pull</code>来拉取远端分支的快照，但是这容易产生冲突，若产生冲突则可以找到产生冲突的文件，修改冲突部分再重新提交。提交完成后若想删掉远端工作分支，则可以使用 <code>$ git push origin --delete</code>指令。</p></li><li><p>当我们想删除本地暂存区中的内容，可以使用<code>$ git rm --cache 文件名</code>指令，当我们想删除工作区的某个文件可以使用 <code>$ git rm -f</code>。</p></li><li><p>当我们想要删除错误提交到本地仓库的 commit</p><ul><li><code>$ git reset --soft 版本库ID</code>仅仅撤销已经提交的版本库，不会修改暂存区和工作区</li><li><code>$ git reset --mixed 版本库ID</code>仅仅撤销提交到版本库和暂存区的内容，不会修改工作区的内容</li><li><code>$ git reset --hard 版本库ID</code>将工作区，暂存区，和版本库记录恢复到指定版本。</li></ul></li><li><p><code>$ git stash branch</code>如果使用 stash 储藏了一些工作，然后继续在储藏的分支上工作，在重新应用 stash 储藏的文件工作时可能会有问题。 如果应用尝试修改刚刚储藏的修改的文件，也就是两次同时修改了一个文件，你会得到一个合并冲突并不得不解决它。 如果想要一个轻松的方式来再次测试储藏的改动，可以运行 <code>git stash branch</code>创建一个新分支，检出储藏工作时所在的提交，重新在那应用工作，然后在应用成功后自动扔掉储藏。</p></li><li><p>可以使用 <code>$ git stash -all</code>来清除工作目录中所有冗余的未被跟踪的文件，并且他们会被存储在工作栈上，当你想要恢复时也可以使用 <code>$ git stash apply</code>恢复使用。</p></li><li><p>当在本地新创建一个分支时，需要先 push 到远端仓库，远端仓库才会有这个分支，否则会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">error: the requested upstream branch &apos;origin/f_tradeReverse&apos; does not exist</span><br><span class="line">hint:</span><br><span class="line">hint: If you are planning on basing your work on an upstream</span><br><span class="line">hint: branch that already exists at the remote, you may need to</span><br><span class="line">hint: run &quot;git fetch&quot; to retrieve it.</span><br><span class="line">hint:</span><br><span class="line">hint: If you are planning to push out a new local branch that</span><br><span class="line">hint: will track its remote counterpart, you may want to use</span><br><span class="line">hint: &quot;git push -u&quot; to set the upstream config as you push.</span><br><span class="line">$ git fetch</span><br><span class="line">$ git status</span><br><span class="line">On branch f_tradeReverse</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">$ git push</span><br><span class="line">fatal: The current branch f_tradeReverse has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin f_tradeReverse</span><br><span class="line"></span><br><span class="line">$  git push --set-upstream origin f_tradeReverse</span><br><span class="line">Username for &apos;https://git.ms.netease.com&apos;: shenglanya</span><br><span class="line">Password for &apos;https://shenglanya@git.ms.netease.com&apos;:</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote:</span><br><span class="line">remote: Create merge request for f_tradeReverse:</span><br><span class="line">remote:   https://git.ms.netease.com/preciousmetals/LDPMTrade/merge_requests/new?merge_request%5Bsource_branch%5D=f_tradeReverse</span><br><span class="line">remote:</span><br><span class="line">To https://git.ms.netease.com/preciousmetals/LDPMTrade.git</span><br><span class="line"> * [new branch]        f_tradeReverse -&gt; f_tradeReverse</span><br><span class="line">Branch &apos;f_tradeReverse&apos; set up to track remote branch &apos;f_tradeReverse&apos; from &apos;origin&apos;.</span><br></pre></td></tr></table></figure></li><li><p>git 拉取远程分支并且创建本地分支 <code>$ git checkout -b 本地分支名x origin/远程分支名x</code></p></li><li><p>如果写错名字，重命名远程为dev1。思路：删除远程分支、重命名本地分支、重新提交一个远程分支</p><p>1、git push –delete origin dev——删除远程分支</p><p>2、git branch -m dev dev1——重命名本地分支为dev1</p><p>3、git push origin dev1——重新推送远端仓库分支名称为dev1</p></li><li><p>如何删除本地的文件的修改？</p><ul><li>如果是删除已经暂存的文件，则直接使用 <code>$ git reset HEAD 文件名</code></li><li>如果是要删除未暂存的文件，使用 <code>$ git checkout --文件名</code>这样会使得这个文件去掉所有还未暂存的修改</li><li>如果删除未跟踪的文件，使用 <code>$ git clean -df</code></li><li>删除不想要的修改 <code>$ git stash &amp;&amp; $ git stash clear</code></li><li>删除本地分支 <code>$ git branch -D BranchName</code></li></ul></li><li><p>删除远端分支</p><ul><li>删除本地的远端分支 <code>$ git branch -r -D origin/BranchName</code></li><li>删除远端服务器的分支 <code>$ git push origin -d BranchName</code></li></ul></li><li><p>打 tag</p><ul><li>在本地打 tag ：<code>$ git tag 4.20.1</code></li><li>将 tag 推送到远端 ： <code>$ git push origin :4.20.1</code></li></ul></li><li><p>查看远端分支 <code>$ git branch -r</code></p></li><li><p>从远端拉取分支 <code>$ git checkout -b x origin/x</code></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>本次 Git 基础学习总结到现在就告一段落，文章由于时间，精力和自己本身能力原因并未能够完整的写完，留到日后的学习工作中当有时间和精力，以及对 Git 的使用更加了解后，将继续完善。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-基础&quot;&gt;&lt;a href=&quot;#Git-基础&quot; class=&quot;headerlink&quot; title=&quot;Git 基础&quot;&gt;&lt;/a&gt;Git 基础&lt;/h2&gt;&lt;h3 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基
      
    
    </summary>
    
      <category term="Web开发" scheme="http://blog.ozairs.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Git" scheme="http://blog.ozairs.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>How to network like a pro at social events</title>
    <link href="http://blog.ozairs.com/Jobs/How-to-network-like-a-pro-at-social-events/"/>
    <id>http://blog.ozairs.com/Jobs/How-to-network-like-a-pro-at-social-events/</id>
    <published>2019-02-05T02:45:31.000Z</published>
    <updated>2019-02-05T05:47:46.560Z</updated>
    
    <content type="html"><![CDATA[<p>With the Christmas party season just around the corner, now is the time to brush up on your <a href="https://findajob.blog/2018/02/05/you-cant-get-a-job-because-of-your-friends/" target="_blank" rel="noopener">networking</a> skills. Your <a href="https://youtu.be/Ht4QawYLpKI" target="_blank" rel="noopener">friends and family can help you network</a> and help in your job search, but you never know who you might meet at a BBQ, Christmas drinks, or extended family get-together. You don’t want to miss out on the perfect opportunity to land your next job. Here’s our top tips on how to network like a pro at social events.</p><p><img src="/Jobs/How-to-network-like-a-pro-at-social-events/1.jpg" alt=""></p><h2 id="Accept-invitations"><a href="#Accept-invitations" class="headerlink" title="Accept invitations"></a>Accept invitations</h2><p>This might sound obvious, but if you don’t get out there, you won’t meet people. Networking can be a numbers game. The more people you meet, the more chances you have of meeting someone who can help you find a new job. So say yes, yes, yes to those invitations!</p><h2 id="Introduce-yourself"><a href="#Introduce-yourself" class="headerlink" title="Introduce yourself"></a>Introduce yourself</h2><p>Everyone has contacts – don’t forget to introduce yourself to everyone you meet. To feel more confident, it helps to have an introduction and some <a href="https://www.indeed.com/career-advice/finding-a-job/icebreaker-questions-to-use-when-meeting-new-people" target="_blank" rel="noopener">ice-breaker questions</a> ready to go. It doesn’t have to be a formal party for you to use these, any gathering where there are a group of people is the prime opportunity to connect. You could be at a game of backyard cricket, watching your kids play sport, or just enjoying a BBQ with mates.</p><p>While it’s great to introduce yourself to everyone you meet, this doesn’t mean hassling everyone at a party to give you a job. Networking is about building relationships – these may or may not lead a job offer but they can have many other <a href="https://www.michaelpage.com.au/advice/career-advice/career-progression/benefits-networking" target="_blank" rel="noopener">benefits</a>. Be conversational and genuinely interested in what other people have to say. Avoid constantly talking about yourself and don’t just talk about how badly you need a job.</p><h2 id="Dress-to-impress"><a href="#Dress-to-impress" class="headerlink" title="Dress to impress"></a>Dress to impress</h2><p>If you are looking to professionally network at Christmas parties, it is important to dress well. You want people to remember you for the right reasons. If you dress well, ask questions, listen well and speak confidently to people you meet, you will leave a good impression. If you’re chatting to someone and the conversation veers towards your career, make sure you have your <a href="https://findajob.blog/2018/11/05/6-steps-to-a-killer-elevator-pitch/" target="_blank" rel="noopener">elevator pitch</a> ready to go.</p><p>Remember, if you are using social events to network to find a job, you need to act professionally at all times. Don’t go heavy on the alcohol and act like you would at a formal networking event.</p><h2 id="Take-notes-about-the-people-you-meet"><a href="#Take-notes-about-the-people-you-meet" class="headerlink" title="Take notes about the people you meet"></a>Take notes about the people you meet</h2><p>Take notes of people who you think could be a good contact or who offer you help. Get their LinkedIn contact details, business card or email address. Jot down something about your conversation as it will help jog your memory later.</p><h2 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h2><p>Make sure you follow up with anyone you connect with. <a href="https://youtu.be/WlNWXRBD2Sk" target="_blank" rel="noopener">Integrity</a> is a key attribute people look for when networking or hiring. If you say you’re going to contact someone, do it. Otherwise, you’ll undo all the hard work you did when you first met the person. Follow up with an email, LinkedIn message or phone call.</p><h2 id="Stay-positive"><a href="#Stay-positive" class="headerlink" title="Stay positive"></a>Stay positive</h2><p>If you’ve been looking for work for awhile, it can be hard to remain positive. Being social might be the last thing you feel like doing, but going to different events can be a surprising way to meet people and build professional networks. Networking can also be a fun way to boost your job search, and beats sitting in front of the computer all day.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;With the Christmas party season just around the corner, now is the time to brush up on your &lt;a href=&quot;https://findajob.blog/2018/02/05/you
      
    
    </summary>
    
      <category term="Jobs" scheme="http://blog.ozairs.com/categories/Jobs/"/>
    
    
      <category term="Australia" scheme="http://blog.ozairs.com/tags/Australia/"/>
    
  </entry>
  
  <entry>
    <title>Top 10 job interview questions and how to answer them</title>
    <link href="http://blog.ozairs.com/Jobs/Top-10-job-interview-questions-and-how-to-answer-them/"/>
    <id>http://blog.ozairs.com/Jobs/Top-10-job-interview-questions-and-how-to-answer-them/</id>
    <published>2019-02-05T02:27:07.000Z</published>
    <updated>2019-02-05T06:37:13.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Top-10-job-interview-questions-and-how-to-answer-them"><a href="#Top-10-job-interview-questions-and-how-to-answer-them" class="headerlink" title="Top 10 job interview questions and how to answer them"></a>Top 10 job interview questions and how to answer them</h1><p>If you’ve got an interview coming up there’s a good chance you’ll be asked at least one of these top 10 job interview questions. Don’t get nervous, we’ve got you covered.</p><h2 id="How-to-answer-the-top-10-job-interview-questions"><a href="#How-to-answer-the-top-10-job-interview-questions" class="headerlink" title="How to answer the top 10 job interview questions"></a>How to answer the top 10 job interview questions</h2><p>The key to a successful job interview to think about what an employer might ask you, and prepare some answers.</p><p><img src="/Jobs/Top-10-job-interview-questions-and-how-to-answer-them/1.jpg" alt=""></p><p>Here’s some good and bad examples of how to answer the top 10 job interview questions.</p><h3 id="1-Tell-me-about-yourself"><a href="#1-Tell-me-about-yourself" class="headerlink" title="1. Tell me about yourself"></a>1. Tell me about yourself</h3><p>Employers ask this to see how you’ll fit in. They already have a copy of your resume, so you don’t need to go over everything on it. Give a quick summary of your key qualities, skills, experience and goals. Some people call this an <a href="https://www.seek.com.au/career-advice/the-30-second-elevator-pitch" target="_blank" rel="noopener">elevator pitch</a>.</p><p><strong>Good:</strong> “I am passionate about giving customers excellent services and experiences. My background is in hotels and restaurants, where I learnt the power of hard work and enthusiasm. I want to shift my focus and take on opportunities in tourism management.”</p><p><strong>Bad:</strong> Don’t tell your interviewer what you did on the weekend or your favourite TV show (unless it’s actually relevant to the job).</p><h3 id="2-What-are-your-strengths"><a href="#2-What-are-your-strengths" class="headerlink" title="2. What are your strengths?"></a>2. What are your strengths?</h3><p>This is a great opportunity to sell yourself, but you need to give examples.</p><p><strong>Good:</strong> “I’m a great project manager. In my last job as a chef my role expanded to ordering food for the kitchen. As a result, the kitchen no longer ran out of food before the end of a shift and customer numbers increased by 30 per cent.”</p><p><strong>Bad:</strong> Don’t give an answer that you can’t back up. Anyone can say they’re hard working. You need to explain how and why.</p><h3 id="3-What-are-your-weaknesses"><a href="#3-What-are-your-weaknesses" class="headerlink" title="3. What are your weaknesses?"></a>3. What are your weaknesses?</h3><p>Don’t be afraid of this question. The ability to identify a weakness is actually a strength! But, you need to say what you have done or plan to do to fix any weakness.</p><p><strong>Good:</strong> “I don’t have experience using spreadsheets in the workplace. But I asked a friend to show me the basics, and I am doing a course online to learn more.”</p><p><strong>Bad:</strong> Don’t say you don’t have any weaknesses. It will make you sound like you lack self-awareness. “I work too hard” won’t cut it either.</p><p><strong><em>Bonus tip:</em></strong> Don’t list a weakness that is a key part of the job you’re interviewing for. Don’t say you can’t spell if you’re trying to get a job as a writer. Don’t say you are bad at talking to people if you’re trying to get a sales job.</p><h3 id="4-Why-do-you-want-to-work-here"><a href="#4-Why-do-you-want-to-work-here" class="headerlink" title="4. Why do you want to work here?"></a>4. Why do you want to work here?</h3><p>An employer wants to know if you’re really interested in the job or if you just want a paycheck. Do some research on the company. Talk about the products or services they sell and why you like them.</p><p><strong>Good:</strong> “I know you recently won an award for your new recyclable coffee cups. I’m passionate about the environment and I want to work for a company that reflects my values.”</p><p><strong>Bad:</strong> Don’t say that you just want a job.</p><h3 id="5-Why-should-we-hire-you"><a href="#5-Why-should-we-hire-you" class="headerlink" title="5. Why should we hire you?"></a>5. Why should we hire you?</h3><p>Employers want to know why you’re a perfect fit for the job. Tell them how hiring you will help solve their problems. If you’ve done your research you can work out what these problems are.</p><p><strong>Good:</strong> You found out the company has opened five new stores in your city, and is hiring a lot of new staff. Tell them you were responsible for training new staff in your last job and have skills in this area.</p><p><strong>Bad:</strong> Don’t just say you’d be an asset to the team. Explain why.</p><h3 id="5-What-has-been-your-biggest-achievement-at-work"><a href="#5-What-has-been-your-biggest-achievement-at-work" class="headerlink" title="5. What has been your biggest achievement at work?"></a>5. What has been your biggest achievement at work?</h3><p>Talk about an achievement you’re proud of that relates to the job. Use examples from study or your personal life if you don’t have a work one.</p><p><strong>Good:</strong> If the job ad you responded to said you need to be a hard worker; you might say: “At my old job at a fast food restaurant I got an award for serving the most customers in a month.”</p><p><strong>Bad:</strong> Don’t say that you don’t have any achievements!</p><h3 id="6-What-has-been-your-biggest-obstacle-or-problem-at-work-and-how-have-you-overcome-it"><a href="#6-What-has-been-your-biggest-obstacle-or-problem-at-work-and-how-have-you-overcome-it" class="headerlink" title="6. What has been your biggest obstacle or problem at work and how have you overcome it?"></a>6. What has been your biggest obstacle or problem at work and how have you overcome it?</h3><p>Use an example that relates to the job you’re going for.</p><p><strong>Good:</strong> A customer at the record store you worked at was not happy the store had sold out of a new album and was threatening to buy it online. You solved it by asking the manager to order extra copies, and suggested that in future the manager could order extra stock of the store’s top five releases.</p><p><strong>Bad:</strong> Don’t say that you’ve never had an obstacle. Everybody has.</p><h3 id="7-Where-do-you-see-yourself-in-five-years"><a href="#7-Where-do-you-see-yourself-in-five-years" class="headerlink" title="7. Where do you see yourself in five years?"></a>7. Where do you see yourself in five years?</h3><p>Employers want to know how the <a href="http://lmip.gov.au/PortalFile.axd?FieldID=2795683&amp;.pdf" target="_blank" rel="noopener">job lines up with your ambitions and values</a>, and whether you’re likely to stick around or leave after a few months. If you’re not sure what the future holds, that’s OK – you can say the position will help you decide.</p><p><strong>Good:</strong> For a sales position, you could say, “Within two years I would like to be seen as an expert in customer management and have increased my average monthly sales by 50 per cent.”</p><p><strong>Bad:</strong> Don’t say that you don’t know. And don’t go in the other direction and something unrealistic like you want to be company CEO.</p><h3 id="8-Why-do-you-want-to-leave-your-current-job-Why-did-you-leave-your-last-job"><a href="#8-Why-do-you-want-to-leave-your-current-job-Why-did-you-leave-your-last-job" class="headerlink" title="8. Why do you want to leave your current job / Why did you leave your last job?"></a>8. Why do you want to leave your current job / Why did you leave your last job?</h3><p>Regardless of the actual reason you left, NEVER badmouth your last employer. Think of a way to be diplomatic about why you left.</p><p><strong>Good:</strong> “My company was cutting back and my position changed in a way that didn’t match my goals” or “I’m looking for a new challenge and to grow my career”.</p><p><strong>Bad:</strong> “The hours were terrible, they didn’t pay me enough, I hated it.”</p><h3 id="9-What-are-your-salary-expectations"><a href="#9-What-are-your-salary-expectations" class="headerlink" title="9. What are your salary expectations?"></a>9. What are your salary expectations?</h3><p>Most jobs will specify a salary range in the advertisement. If you’re feeling bold, aim for the top! But note that it’s generally not a good idea to discuss salary at the first interview, unless the employer raises it first.</p><p><strong>Good:</strong> “Your ad said the salary range for this job was between $45,000 and $55,000. Based on my experience and qualifications I expect a salary at the top end of your range.” An employer might want a specific answer. Do your research and find out what other <a href="http://joboutlook.gov.au/" target="_blank" rel="noopener">people get paid to do the job</a>.</p><p><strong>Bad:</strong> Don’t ask for a salary that’s too high (you might price yourself out of the job) or too low (you need to be able to buy groceries every week!)</p><h3 id="10-Do-you-have-any-questions"><a href="#10-Do-you-have-any-questions" class="headerlink" title="10. Do you have any questions?"></a>10. Do you have any questions?</h3><p>This is a great opportunity to impress an employer. An interview is a two-way street and a good chance to see if you like the organisation, too. Think of a few questions beforehand, and try to come up with a question based on something said during the interview also.</p><p><strong>Good:</strong> You’re being interviewed for a job at a bike hire shop. When you checked out the store’s website you noticed the page to hire bikes was broken. Ask if this is being repaired or improved.</p><p><strong>Bad:</strong> Don’t say that you don’t have any questions. You won’t seem interested in the job.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Top-10-job-interview-questions-and-how-to-answer-them&quot;&gt;&lt;a href=&quot;#Top-10-job-interview-questions-and-how-to-answer-them&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="Jobs" scheme="http://blog.ozairs.com/categories/Jobs/"/>
    
    
      <category term="Australia" scheme="http://blog.ozairs.com/tags/Australia/"/>
    
  </entry>
  
  <entry>
    <title>Tips to help you get a job</title>
    <link href="http://blog.ozairs.com/Jobs/Tips-to-help-you-get-a-job/"/>
    <id>http://blog.ozairs.com/Jobs/Tips-to-help-you-get-a-job/</id>
    <published>2019-02-05T02:02:59.000Z</published>
    <updated>2019-02-05T05:08:13.456Z</updated>
    
    <content type="html"><![CDATA[<p>It’s New Year’s Day 2019, it’s 38 degrees and I am lying in the river with some of my best friends talking about what lies ahead for 2019.</p><p>Janet, who’s a bit of a procrastinator, says <em>“This is the year of 100 for me. I am going to swim 100 kilometres this year. I am going to clean all the clutter from my apartment in the first 100 days. I’m going to save an extra $100 a month.”</em></p><p>Janet took things she thought were insurmountable and broke them into simple goals. She didn’t make general New Year resolutions like getting fit, losing weight, cleaning up her house. Janet made her goals clear. She broke them down into things she could do and show she had done.</p><p>It got us all talking about goals and how to achieve them. Just like The White Stripes song <a href="https://youtu.be/oOS00ttAblQ" target="_blank" rel="noopener">Little Acorns</a>, it’s important to break down your goals into bite-size chunks. Like a squirrel putting away acorns for the winter, you do it one acorn at a time.</p><p><img src="/Jobs/Tips-to-help-you-get-a-job/1.jpg" alt=""></p><h2 id="How-to-get-a-job-in-2019"><a href="#How-to-get-a-job-in-2019" class="headerlink" title="How to get a job in 2019?"></a>How to get a job in 2019?</h2><p>The first thing to do is break down your job search into bite-size chunks and set goals to achieve them. Here’s some job search tips to get you going.</p><h2 id="1-Freshen-up-your-resume"><a href="#1-Freshen-up-your-resume" class="headerlink" title="1. Freshen up your resume"></a>1. Freshen up your resume</h2><p>Start the year with a fresh resume. Make sure it’s up to date and includes any voluntary work you’ve been doing over the break. Don’t forget any holiday <a href="https://findajob.blog/2018/11/12/3-reasons-christmas-casual-jobs-rock/" target="_blank" rel="noopener">casual work</a>. It’s also time to rewrite your About Me section. There’s some great tips on <a href="https://jobsearch.gov.au/jobsearchtips" target="_blank" rel="noopener">jobactive.gov.au</a> if you need some examples. Why not create a range of different resumes for different jobs? Create 5 resumes in 5 days.</p><h2 id="2-Make-a-list-of-businesses-to-cold-call"><a href="#2-Make-a-list-of-businesses-to-cold-call" class="headerlink" title="2. Make a list of businesses to cold call"></a>2. Make a list of businesses to cold call</h2><p>One-in-three jobs aren’t advertised at all. The best way to get your foot in the door is to cold call places you’d like to work in your suburb or town. Take a walk this week and spot the places you’d like to work. Make a list of 10 places and contact them all in 10 days. You could have a job before the end of January! There’s some great tips on <a href="https://youtu.be/HIt0ZdvIYT0" target="_blank" rel="noopener">youtube.com/jobactivejobs</a>to build your confidence to cold call places.</p><p><img src="/Jobs/Tips-to-help-you-get-a-job/2.jpg" alt=""></p><h2 id="3-Pick-a-job-that’s-ripe-for-you"><a href="#3-Pick-a-job-that’s-ripe-for-you" class="headerlink" title="3. Pick a job that’s ripe for you"></a>3. Pick a job that’s ripe for you</h2><p>It’s peak fruit picking season, that means lots of fruit and vegetable picking jobs right across Australia. You could have a job in less than 5 days with harvest work. If you have never considered it, you could have regular work right now. Remember, picking fruit is a great stepping stone to a great job. It shows other employers you’re reliable and a hard worker. Just hit the <a href="https://jobsearch.gov.au/harvest" target="_blank" rel="noopener"><em>Search</em> button on this page</a> to see all the fruit and vegie jobs – or <a href="https://findajob.blog/2018/12/10/pick-fruit-and-vegies-land-a-job-right-now/" target="_blank" rel="noopener">read more about it</a>. You could apply for a harvest job today and be picking next week!</p><h2 id="4-Find-out-where-the-most-jobs-are"><a href="#4-Find-out-where-the-most-jobs-are" class="headerlink" title="4. Find out where the most jobs are"></a>4. Find out where the most jobs are</h2><p>Some industries are booming. Australia is going through an <a href="https://www.afr.com/news/economy/australias-next-boom-has-barely-started-20170922-gympx4" target="_blank" rel="noopener">infrastructure boom</a>. New schools are going up. New roads being built. There’s a new <a href="https://inlandrail.artc.com.au/" target="_blank" rel="noopener">railway line being built inland</a>. The health industry is also going crazy with enormous <a href="https://www.news.com.au/finance/work/careers/australias-health-care-sector-job-numbers-rising-for/news-story/012dade8fb0843701ade4755e169a0a6" target="_blank" rel="noopener">demand for carers</a>. One of the best ways to get a job is to apply for jobs in industries that are going gangbusters. The Labour Market Information Portal may sound boring but it will tell you where the best places are to get a job. Take a look at the <a href="http://lmip.gov.au/default.aspx?LMIP/GainInsights/EmploymentProjections" target="_blank" rel="noopener">Industry Employment Projections Report</a> and pick 5 industries to focus your job search on. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s New Year’s Day 2019, it’s 38 degrees and I am lying in the river with some of my best friends talking about what lies ahead for 2019
      
    
    </summary>
    
      <category term="Jobs" scheme="http://blog.ozairs.com/categories/Jobs/"/>
    
    
      <category term="Australia" scheme="http://blog.ozairs.com/tags/Australia/"/>
    
  </entry>
  
  <entry>
    <title>HEXO主题配置</title>
    <link href="http://blog.ozairs.com/Web%E5%BC%80%E5%8F%91/HEXO%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.ozairs.com/Web开发/HEXO主题配置/</id>
    <published>2019-02-03T02:54:06.000Z</published>
    <updated>2019-02-03T06:22:56.520Z</updated>
    
    <content type="html"><![CDATA[<iframe src="https://player.bilibili.com/player.html?aid=39808252&amp;cid=69927899&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="box-sizing: inherit; margin: 1em 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 15px; vertical-align: baseline; position: absolute; width: 656px; height: 492px; left: 0px; top: 0px;"></iframe><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td></td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code>设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容。</td><td><code>source</code></td></tr><tr><td><code>public_dir</code></td><td>公共文件夹，这个文件夹用于存放生成的站点文件。</td><td><code>public</code></td></tr><tr><td><code>tag_dir</code></td><td>标签文件夹</td><td><code>tags</code></td></tr><tr><td><code>archive_dir</code></td><td>归档文件夹</td><td><code>archives</code></td></tr><tr><td><code>category_dir</code></td><td>分类文件夹</td><td><code>categories</code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td>国际化（i18n）文件夹</td><td><code>:lang</code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">glob 表达式</a>来匹配路径。</td></tr></tbody></table><blockquote><p>提示</p><p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p></blockquote><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td>false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td>true</td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 <a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">Asset 文件夹</a></td><td>false</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td>true</td></tr><tr><td><code>highlight</code></td><td>代码块的设置</td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td><code>uncategorized</code></td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td></tr></tbody></table><h2 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h2><p>Hexo 使用 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD</code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>H:mm:ss</code></td></tr></tbody></table><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td><code>10</code></td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td><code>deploy</code></td><td>部署部分的设置</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;https://player.bilibili.com/player.html?aid=39808252&amp;amp;cid=69927899&amp;amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; fr
      
    
    </summary>
    
      <category term="Web开发" scheme="http://blog.ozairs.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Hexo" scheme="http://blog.ozairs.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>MacOS安装使用Node.js</title>
    <link href="http://blog.ozairs.com/Web%E5%BC%80%E5%8F%91/MacOS%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Node-js/"/>
    <id>http://blog.ozairs.com/Web开发/MacOS安装使用Node-js/</id>
    <published>2019-02-02T10:43:45.000Z</published>
    <updated>2019-02-02T13:46:32.849Z</updated>
    
    <content type="html"><![CDATA[<p>\1. 到官网<a href="https://nodejs.org/zh-cn/download/下载，选择Macintosh" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/下载，选择Macintosh</a> Installer, 如下：</p><p>\2. 按预设的下一步，Node.js版本为v6.10.0, NPM版本为v3.10.10</p><p>\3. 过程可能要输入用户密码</p><p>\4. 安装成功如下：</p><p>\5. 用终端验证是否成功安装, 输入 node -v</p><p>\6. console.log(1+2), 得到结果3</p><p>\7. 我Mac的Eclipse不支援EcmaScript 6, 例如 let 等ES6的关键子在Eclipse都验证不过去。</p><p>大概Google下了，找到一个JavaScript支援很不错的IDE，网址如下：</p><p><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">https://www.jetbrains.com/webstorm/</a></p><p>下载完，create一个工程，然后新增一个JavaScript文件：</p><p>\8. 将hello_weekend配置为Node.js来debug</p><p>\9. Node interpreter设置为Node.js的安装路径</p><p>\10.  Script如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by prolink on 17/3/19.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">var server =  http.createServer(function (req, res) &#123;</span><br><span class="line">    res.writeHead(200);</span><br><span class="line">    res.end(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8088);</span><br></pre></td></tr></table></figure><p>\11. 这个http返回Hello World，并在该行鼠标左键点击设置断点</p><p>\12. debug该文件</p><p>\13. 成功启动之后看到Console有相关的资讯</p><p>\14. Chrome浏览器输入 <a href="http://localhost:8088/，" target="_blank" rel="noopener">http://localhost:8088/，</a> 可以看到已经命中断点 ，在Console中可以改变变量的值，例如在这里不返回Hello World了，改成返回Hello Weekend，如下图，输入完之后按回车，可以看到true </p><p>\15. 看看浏览器得到的就是刚才debug时候重设的值  </p><p>\16. 如果仅仅做到这步，WebStorm还不支援ECMAScript 6，打开 Preferences -&gt; Languages &amp; Franeworks -&gt; JavaScript, 如下图将预设的ECMAScript 5.1改为ECMAScript 6</p><p> \17. ES6毕竟是2015年才发布的，形容性并不好，为了让您编写的ES6的程式码可以有更好的相容性，可以用Babel file watcher来监视并自动转码ES5.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prolinkdeMacBook-Pro:milo_demo prolink$ sudo npm install -g babel-cli</span><br><span class="line">prolinkdeMacBook-Pro:milo_demo prolink$ cd /Users/prolink/WebstormProjects/milo_demo</span><br></pre></td></tr></table></figure><p>按上一步进入工程目录之后，安装babel-preset-env, 参考 <a href="https://babeljs.io/docs/plugins/preset-env/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/preset-env/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure><p>\18. 打开 Preferences -&gt; Tools -&gt; File Watchers, 添加Bable, 如下： </p><p>如果安装一切顺利，当您编辑JS文件时候，会自动在工程目录中同步编译到dist目录中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;\1. 到官网&lt;a href=&quot;https://nodejs.org/zh-cn/download/下载，选择Macintosh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/zh-cn/download/下载，选择M
      
    
    </summary>
    
      <category term="Web开发" scheme="http://blog.ozairs.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Node.js" scheme="http://blog.ozairs.com/tags/Node-js/"/>
    
  </entry>
  
</feed>
