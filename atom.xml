<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ozairs.com/"/>
  <updated>2019-01-28T14:09:52.884Z</updated>
  <id>http://blog.ozairs.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>澳洲Ego QV儿童保湿霜</title>
    <link href="http://blog.ozairs.com/2019/01/28/%E6%BE%B3%E6%B4%B2Ego-QV%E5%84%BF%E7%AB%A5%E4%BF%9D%E6%B9%BF%E9%9C%9C/"/>
    <id>http://blog.ozairs.com/2019/01/28/澳洲Ego-QV儿童保湿霜/</id>
    <published>2019-01-28T14:07:18.000Z</published>
    <updated>2019-01-28T14:09:52.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="澳洲Ego-QV婴儿、儿童保湿霜"><a href="#澳洲Ego-QV婴儿、儿童保湿霜" class="headerlink" title="澳洲Ego QV婴儿、儿童保湿霜"></a><strong>澳洲Ego QV婴儿、儿童保湿霜</strong></h3><p><img src="/2019/01/28/澳洲Ego-QV儿童保湿霜/GV Cream.jpg" alt=""></p><p>澳洲QV的产品 几乎零差评 真心是高端却平价。</p><p>这么一大罐250克呢 从脸到脚都可以擦 成人有时候皮肤过敏啥的也能用哦</p><p>澳洲Ego QV婴儿、儿童保湿霜，这个牌子在澳洲家喻户晓 📢 在澳洲各大药房 👷 均有出售 ❕ 所有产品都不含香料，色素，羊毛脂和丙二醇，适合所有肌肤，特别是干燥及敏感肌肤。</p><p>国内已经进入秋天💨给宝宝用适合秋冬的面霜吧[愉快]特别适合给极度干燥，轻微湿疹，肌肤敏感的儿童使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;澳洲Ego-QV婴儿、儿童保湿霜&quot;&gt;&lt;a href=&quot;#澳洲Ego-QV婴儿、儿童保湿霜&quot; class=&quot;headerlink&quot; title=&quot;澳洲Ego QV婴儿、儿童保湿霜&quot;&gt;&lt;/a&gt;&lt;strong&gt;澳洲Ego QV婴儿、儿童保湿霜&lt;/strong&gt;&lt;/h3&gt;
      
    
    </summary>
    
    
      <category term="Baby" scheme="http://blog.ozairs.com/tags/Baby/"/>
    
  </entry>
  
  <entry>
    <title>818澳洲那些超热门的婴幼儿营养品</title>
    <link href="http://blog.ozairs.com/2019/01/28/818%E6%BE%B3%E6%B4%B2%E9%82%A3%E4%BA%9B%E8%B6%85%E7%83%AD%E9%97%A8%E7%9A%84%E5%A9%B4%E5%B9%BC%E5%84%BF%E8%90%A5%E5%85%BB%E5%93%81/"/>
    <id>http://blog.ozairs.com/2019/01/28/818澳洲那些超热门的婴幼儿营养品/</id>
    <published>2019-01-28T02:39:34.000Z</published>
    <updated>2019-01-28T02:49:47.140Z</updated>
    
    <content type="html"><![CDATA[<p>​    澳洲地广人稀，自然环境非常的优越，物产丰富，空气纯净，环境无污染，保证了本地产品独特的天然性，无论是内服还是外用产品，对宝宝们都是百分百安全的！</p><p>澳洲除了婴儿奶粉外，保健品，护肤品，常用药，也非常出名，宝宝从怀胎十月的妈妈肚子里面来到这个美丽世界，少了子宫的保护，宝宝需要有强壮的身体才能茁壮成长，锌、钙、DHA等是孩子成长必需的微量元素，帮助妈妈保护和增强宝宝的免疫力、促进食欲、维护宝宝健康，呵护宝宝健康成长。下面为大家818澳洲那些超热门的婴幼儿、儿童产品，都是很值得推荐给宝妈们的！</p><p>一、    Ostelin婴幼儿维生素D滴剂</p><p>【产品介绍】</p><p><img src="/2019/01/28/818澳洲那些超热门的婴幼儿营养品/2.pic.jpg" alt=""></p><p>Ostelin是澳洲唯一一家只生产钙和维D的品牌（除了钙及维D外不生产任何其他产品)，也是澳洲补钙和维D产品的首选，绝对专业中的专业。补钙，维生素D的摄入显得尤为重要。如果宝宝们体内缺少维他命D，无论我们补充多少的钙质也不能够被很好的吸收。草莓口味维生素D滴剂，让宝宝更容易接受。内含一刻度滴管，方便使用。</p><p>【产品功效】</p><p>1、提高肌体对钙、磷的吸收，使血浆钙和血浆磷的水平达到饱和程度。</p><p>2、促进生长和骨骼钙化，促进牙齿健全；</p><p>3、通过肠壁增加磷的吸收，并通过肾小管增加磷的再吸收；</p><p>4、维持血液中柠檬酸盐的正常水平；</p><p>【剂量及使用方法】</p><p>感冒时期：每天1.0ml，随餐服用或随医嘱</p><p>日常保健：每天0.5ml，随餐服用或随医嘱</p><p>开封后建议40天内服用完，可直接滴入宝宝口内或滴在一小勺牛奶、果汁中。（使用前先摇匀，每天剂量不可超过1.0ml）</p><p>【适用人群】</p><p>0-12岁儿童</p><p>二、Ostelin儿童VD+钙咀嚼片</p><p>【产品介绍】</p><p><img src="/2019/01/28/818澳洲那些超热门的婴幼儿营养品/3.pic.jpg" alt=""></p><p>说到儿童补钙产品怎么能不提Ostelin，它家的Ostelin儿童钙+VD可是深受妈妈们的喜爱，人称“恐龙钙”是也，绝对是孩子补钙好帮手！比（澳洲）市场上其他儿童维生素补充营养品含有更多的维生素D和钙 ，所含钙为儿童每日所需的钙摄入量，堪称“钙片中的爱马仕”，不含人造色素及香料 ，非常美味的梅子味咀嚼片。</p><p>【产品功效】</p><p>1、促进骨骼钙化和生长。</p><p>2、预防宝宝患佝偻病。</p><p>3、提高机体对钙的吸收。</p><p>4、增强和稳固牙齿、骨骼，预防和缓解缺钙引起的腰酸、腿痛、腿脚抽筋。</p><p>【剂量及使用方法】</p><p>2岁-8岁：每日嚼咀2片</p><p>9岁-13岁：每日嚼咀3片或遵医嘱服用</p><p>【适用人群】</p><p>1、年龄在2-13岁的儿童。</p><p>2、由于饮食的限制，如过敏或挑食的饮食，造成的膳食钙的摄入量不足。</p><p>3、日光照射有限区域的儿童。</p><p>4、    正处于非常快速的成长期的儿童。</p><p>三、Life Space婴幼儿益生菌粉</p><p>【产品介绍】</p><p><img src="/2019/01/28/818澳洲那些超热门的婴幼儿营养品/5.pic.jpg" alt=""></p><p>Life Space 是一家专门生产各类高端益生菌产品的澳洲本土公司，针对不同人群，特别量身定制了益生菌产品，包括婴幼儿，儿童，老人，孕妇，成人等，它被澳洲多本母婴杂志评选为澳洲最佳的母婴益生菌产品。Life space益生菌采用冻干粉技术保证了益生菌的存活率，并且无需冷藏储存，外出携带也非常方便。它属于复合型益生菌，蕴含十几种不同品种的天然益生菌群，从而满足人体的不同需求。</p><p>【产品功效】</p><p>有效增强抵抗力，调理肠道，保持身体机能健康</p><p>【适用人群】</p><p>1、免疫力较低，容易感冒发烧咳嗽的婴幼儿</p><p>2、患有湿疹、过敏性体质的婴幼儿</p><p>3、容易腹泻、拉肚子、便秘的婴幼儿</p><p>4、服用抗生素的婴幼儿</p><p>【剂量及使用方法】</p><p>6-18个月宝宝：每天1-2克</p><p>18-36个月宝宝：每天2克 （产品内附1克量勺），或遵医嘱</p><p>开启后三个月内用完，效果最佳，可混入牛奶、果汁及食物当中。</p><p>四、Bio island婴幼儿天然液体乳钙</p><p>【产品介绍】</p><p><img src="/2019/01/28/818澳洲那些超热门的婴幼儿营养品/4.pic.jpg" alt=""></p><p>Bioisland 是澳洲婴幼儿营养补充剂销量排名第一的婴幼儿营养品品牌，Bioisland乳钙是直接从牛奶中提取出来的纯天然活性高乳蛋白钙，在体内不需要太多胃酸参与，即可分离呈现离子状态，进而被人体直接吸收利用，迅速调节血钙平衡，消化吸收的过程中，不会给宝宝肠胃带来负担，不会出现气胀、浮肿、便秘，特别适合胃酸不足的婴幼儿补充。</p><p>【产品功效】</p><p>促进宝宝骨骼和牙齿生长，预防佝偻病和骨质疏松。</p><p>【剂量及使用方法】</p><p>0~6个月婴儿：每天1粒</p><p>7个月~12个月：每天1-2粒</p><p>1~3岁儿童：每天2-3粒</p><p>可以挤入牛奶或者果汁中服用。服用起来也特别方便，把小鱼的尾巴拧掉，把液体乳钙挤入宝宝嘴里就可以了。</p><p>五、Bio island顶级深海鳕鱼鱼油</p><p>【产品介绍】</p><p><img src="/2019/01/28/818澳洲那些超热门的婴幼儿营养品/6.pic.jpg" alt=""></p><p>鱼油的主要有益成分是Omega-3，是不饱和脂肪酸DHA、EPA，主要作用是益智。鱼肝油主要有益成分是对视力有好处的维生素A以及能促进钙吸收的维生素D，鱼油是脂肪酸，对大脑发育好，鱼肝油是脂溶性维生素，对眼睛和骨骼好。这款产品兼具鱼油和鱼肝油，补脑护眼，一粒搞定。</p><p>【产品功效】</p><p>促进钙吸收，有助宝宝大脑和视力、骨骼发育</p><p>【剂量及使用方法】</p><p>0~6个月婴儿：每天1粒</p><p>7个月~12个月：每天1-2粒</p><p>1~3岁儿童：每天2粒</p><p>可以挤入牛奶或者果汁中服用。服用起来也特别方便，把小鱼的尾巴拧掉，把鱼油挤入宝宝嘴里就可以了。</p><p>六、Bio island海藻油DHA</p><p>【产品介绍】</p><p><img src="/2019/01/28/818澳洲那些超热门的婴幼儿营养品/7.pic.jpg" alt=""></p><p>藻油DHA是从藻类中提炼的，因为具体原料藻类的品种以及提炼工艺的不同，有的藻油DHA中含有少量EPA，有的不含有EPA。给宝宝选择要选不含有EPA的藻油DHA。给宝宝选DHA不看来源，要看EPA含量，不论鱼油还是藻油，选EPA含量低的。</p><p>DHA是宝宝成长中的脑黄金，孕妇哺育中的好宝贝。奶粉中的DHA很容易氧化掉，建议应单独补充DHA。</p><p>【产品功效】</p><p>促进视网膜光感细胞的成熟,增进大脑细胞的发育</p><p>【剂量及使用方法】</p><p>0~6个月婴儿：每天1粒</p><p>7个月~6岁儿童：每天1粒</p><p>可以挤入牛奶或者果汁中服用。服用起来也特别方便，把小鱼的尾巴拧掉，把藻油挤入宝宝嘴里就可以了。</p><p>七、Bio island补锌咀嚼片</p><p>【产品介绍】</p><p><img src="/2019/01/28/818澳洲那些超热门的婴幼儿营养品/8.pic.jpg" alt=""></p><p>锌是人体不可缺少的微量元素，是几十种金属酶的组成部分，对蛋白质的合成、生长因子的产生和分泌等环节有重要作用，可促进宝宝的生长发育，增强创伤组织的再生能力，维持味觉与食欲，参与维生素A的代谢，增强免疫功能。</p><p>【产品功效】</p><p>1、提高儿童食欲，帮助儿童维持正常味觉，嗅觉功能</p><p>2、增强儿童肌体免疫力</p><p>3、参与儿童体内多种酶的合成与代谢，促进生长发育</p><p>4、参与儿童体内维生素A的代谢和生理功能</p><p>5、保护皮肤黏膜的正常发育</p><p>【剂量及使用方法】</p><p>1-8岁儿童：每天嚼咀1片或遵医嘱</p><p>9-12岁儿童：每天嚼咀2片或遵医嘱</p><p>八、Swisse儿童复合维生素</p><p>【产品介绍】</p><p><img src="/2019/01/28/818澳洲那些超热门的婴幼儿营养品/9.pic.jpg" alt=""></p><p>本产品是Swisse专为两岁以上的儿童设计的专用维生素，不仅可以为儿童提供每日所需的多种维生素、矿物质及抗氧化元素，还能减少宝宝因偏食，挑食所导致的营养不良，帮助骨骼的生长，使宝宝健康成长和发育。而且内含的西洋参能有效维持儿童身体的能量水平，荨草和玫瑰果则能增强儿童的免疫力。</p><p>【产品功效】</p><p>1、抵御伤风感冒袭击</p><p>2、缓解降低患感冒的时间长度及程度</p><p>3、帮助孩子增强抗体与健康</p><p>【剂量及使用方法】</p><p>2岁-4岁儿童：每日嚼咀1片</p><p>4岁-12岁儿童：每日嚼咀2片</p><p>随餐或餐后立即服用，或遵医嘱</p><p>九、Nature’s way 儿童三色鱼油</p><p>【产品介绍】</p><p><img src="/2019/01/28/818澳洲那些超热门的婴幼儿营养品/10.pic.jpg" alt=""></p><p>澳洲儿童营养专家研配，含有丰富的DHA及EPA以及omega 3，DHA有助大脑及身体发展，EPA有助调节血脂，维持血管正常。omega 3脂肪酸来自优质含脂量较高的鱼，是提升儿童记忆力、学习能力、行为控制力不可或缺的营养成份。</p><p>【产品功效】</p><p>1、强健脑力，提高记忆和学习能力。</p><p>2、保护眼睛，预防和改善近视。</p><p>3、促进胎儿、婴儿、儿童的大脑发育，增长智力。</p><p>4、补充大脑营养、提高大脑灵敏度、增强思维能力、提高记忆。</p><p>【剂量及使用方法】</p><p>6个月~5岁的儿童：每天1粒，或遵医嘱</p><p>5岁以上的儿童：每天1~2粒，或遵医嘱</p><p>年龄小的宝宝可以拧开或剪开胶囊尾部，挤入宝宝口中或加到食物里</p><p>—    End —</p><p>话说，无论给宝贝选择什么样的营养补充品，您首先要保证的都是孩子的均！衡！饮！食！而且不要盲目跟风，要有针对性地根据宝宝年龄、身体状况进行选择，缺什么补什么，适合宝宝的才是最好的！    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    澳洲地广人稀，自然环境非常的优越，物产丰富，空气纯净，环境无污染，保证了本地产品独特的天然性，无论是内服还是外用产品，对宝宝们都是百分百安全的！&lt;/p&gt;
&lt;p&gt;澳洲除了婴儿奶粉外，保健品，护肤品，常用药，也非常出名，宝宝从怀胎十月的妈妈肚子里面来到这个美丽世界，少
      
    
    </summary>
    
    
      <category term="Baby" scheme="http://blog.ozairs.com/tags/Baby/"/>
    
  </entry>
  
  <entry>
    <title>How To Buy A Car In Australia</title>
    <link href="http://blog.ozairs.com/2019/01/27/How-To-Buy-A-Car-In-Australia/"/>
    <id>http://blog.ozairs.com/2019/01/27/How-To-Buy-A-Car-In-Australia/</id>
    <published>2019-01-27T06:24:57.000Z</published>
    <updated>2019-01-27T06:36:59.756Z</updated>
    
    <content type="html"><![CDATA[<p>导读：绝大部分的留学生买车主要是为了方便上下学和日常的打工，甚至有一小部分学生喜欢开车出去旅游，澳洲又是开车特别舒服的国家(路宽人少风景美)，基于这些需求，选择一辆质量好，节油，价格实惠的汽车是大部分学……</p><ul><li><p>1、如何选购汽车的品牌</p><p>绝大部分的<strong>留学</strong>生买车主要是为了方便上下学和日常的打工，甚至有一小部分学生喜欢开车出去旅游，澳洲又是开车特别舒服的国家(路宽人少风景美)，基于这些需求，选择一辆质量好，节油，价格实惠的汽车是大部分学生的第一选择。</p><p>其实澳洲本土来说，丰田汽车是保有量最大的品牌，其次是马自达。在中国随处可见的大众汽车，在澳洲几乎很难见得到。原因是丰田的车维修起来，成本低，时间短，而且又节油。有个朋友买了奥迪A4，不小心撞了前保险杠，拿去维修，等了半年才修好······因为德国的配件需要从德国空运，价格不仅贵了两三倍，时间也要等很久。</p><p>划重点：如果不是非常喜欢德系车，建议在澳洲购买日系车，使用更加方便<br><img src="/2019/01/27/How-To-Buy-A-Car-In-Australia/3.jpg" alt="日系车"></p></li><li><p>2、去哪里买车呢?</p><p>如果是买新车的话，建议就去当地的4S店，这一点跟中国差不多，多逛几家4S店，多了解一些价格，然后砍到合理的价格就入手。这里需要搞清楚的就是，你看中的这款车是不是最新款，有些“不良商家”喜欢把16年的车说成是17年款，实际上你掏了一样的钱却买了旧款的车子。具体的汽车配置可以上汽车品牌官网查看，也可以上Carsales(澳洲最大的车辆交易网站，可以通过这个网站来查看车子的内外功能配置)</p><p>如果是买二手车的话，购买渠道就很多了，有私人二手车(Private)、二手车行(Dealer)、拍卖行(Auctions)这三种主流购买渠道。刚刚我们推荐的Carsales这个网站，很多人会在上面发布卖车信息(发布信息网站是要收费的)，私人二手车和Dealer二手车都可以在这个上面找到，以下图举例：</p><p><img src="/2019/01/27/How-To-Buy-A-Car-In-Australia/2.jpg" alt="二手车"></p><p>  除了Carsales还有Gumtree，Gumtree类似于我们国内的赶集网，58同城这种，发布信息都是免费的，所以导致信息真假和质量层次不齐，我们在这里就不推荐学生去这个网站搜索，Carsales已经可以满足大部分要求了(我们绝对没有收广告费!!工作室太小，Carsales也不认得我们o(╥﹏╥)o)</p><p>  Auctions主要拍卖的是政府的车，公里数比较高，车况一般，而且不能试车，国际驾照不能在拍卖行买车，所以我们就不多做介绍了。</p></li></ul><ul><li><p>3、如何判断这车可不可以买？</p><p>先说二手车行(Dealer)的车，二手车行也分大小，一般价位在5000澳币以内的车只有小车行卖，要求门槛也比较低，车况不一定很好。卖5000-10000澳币的车行在规模上会相对大一些，但是没达到4S店的规模。经手的车辆在性能上和可靠性上一般可以维持12个月的中上水准。1W以上的车大部分都是在连锁Dealer上卖了，例如国内的4S店，价格虽然偏贵，但是车况是很不错的。第一类车行肯定是不推荐的，因为价格本来就便宜，车行还要分一笔钱，可想而知那车品质也好不到哪里去。第二类车行呢可以考虑，不过也要对比价格和提供的服务，比如有些车行不提供完善的保修服务，这种情况就得看你能不能接受了。第三类车行肯定是强烈推荐的，但是呢也分好坏，据我朋友说他见过最好的是墨尔本东部某起亚4s店，提供5年全车部件的保修，还包括卖车时候的蒸汽清洁和全新轮胎。</p><p>接下来是私人二手车了，一般先在网上找到自己喜欢的二手车，然后约车主出来看车，一般建议约学校附近或者住宅区附近，千万别太偏僻了，女孩子家最好多找几个人陪同。如果有朋友懂车，那是最好的，让他陪你一起去看。</p></li></ul><ul><li><p>4、接下来的步骤非常重要</p><p>01、挑选好自己喜欢的车之后，根据车辆的Registration Number上MyRTA(RTA 是Roads &amp; Traffic Authority的简称)的网站花费25刀查阅该车辆的历史纪录，重点查看其有无重大事故发生(Written-Off)，以及车主记录——“前任”越少越好。</p><p>02、检查车辆的保养记录(Service Logbook)，查看车辆是否按期保养。</p><p>03、记得查看和拍照保存车主的身份证和车子的Rego(汽车上路缴的路费单)，检查名字是否一致，同时记下相关信息，方便以后查询。</p><p>04、二手车的牌照，在汽车转手时也需要从卖主转到卖主。卖主需要在交易完成时在Rego单背面签字，并尽快填写车辆过户表(Vehicle Registration Transfer Form)给买主，让其交到RTA完成车主转移。</p><p>05、过户要求带上驾照、驾照翻译件和护照(或学生卡)和地址的信件去路局进行过户。过户的时候购买价格可议根据自己需求而填写成交金额，因为过户费需要缴纳成交金额的百分比，所以成交金额填写的越高需要贡献给政府的税金也就越高。</p><p>06、由于RWC(去过户的时候强制要求的一张证明，差不多就是车辆的体检单，有效期为1个月，大部分汽车维修店可以做RWC证明)有效期仅为一个月，建议完成购买之后尽快去过户;如果买的是Dealer的车，一般都是Drive Away服务，就是交钱立马开走。如果是私人二手车，就得找维修店去做。</p><p>07、买完车之后记得一定要买汽车保险，不同的保险公司报价也不一样，可以多咨询多比较。澳洲的保险公司一般以RACV(不同州结尾不同)、AAMI、Allianz这三家公司为主。网上可以搜到不同的险种和价格，如果确定要买的话，直接打电话说你要买就好了，保险当时就生效。</p><p><img src="/2019/01/27/How-To-Buy-A-Car-In-Australia/1.png" alt="车险"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;导读：绝大部分的留学生买车主要是为了方便上下学和日常的打工，甚至有一小部分学生喜欢开车出去旅游，澳洲又是开车特别舒服的国家(路宽人少风景美)，基于这些需求，选择一辆质量好，节油，价格实惠的汽车是大部分学……&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、如何选购汽车的品牌&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Car" scheme="http://blog.ozairs.com/tags/Car/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.ozairs.com/2019/01/27/hello-world/"/>
    <id>http://blog.ozairs.com/2019/01/27/hello-world/</id>
    <published>2019-01-27T04:05:03.506Z</published>
    <updated>2019-01-27T04:53:20.343Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Serverless Overview</title>
    <link href="http://blog.ozairs.com/2019/01/26/Serverless-Overview/"/>
    <id>http://blog.ozairs.com/2019/01/26/Serverless-Overview/</id>
    <published>2019-01-26T13:58:05.000Z</published>
    <updated>2019-01-27T04:53:20.340Z</updated>
    
    <content type="html"><![CDATA[<p>今年有人提出了2018年微服务将疯狂至死，可见微服务的争论从未停止过。在这我将自己对微服务的理解整理了一下，希望对大家有所帮助。</p><p>1.什么是微服务</p><p>1）一组小的服务（大小没有特别的标准，只要同一团队的工程师理解服务的标识一致即可）<br>2）独立的进程（java的tomcat，nodejs等）<br>3）轻量级的通信（不是soap，是http协议）<br>4）基于业务能力（类似用户服务，商品服务等等）<br>5）独立部署（迭代速度快）<br>6）无集中式管理（无须统一技术栈，可以根据不同的服务或者团队进行灵活选择）<br>ps：微服务的先行者Netflix公司，开源了一些好的微服务框架，后续会有介绍。</p><ol start="2"><li>怎么权衡微服务的利于弊</li></ol><p>利：<br>强模块边界 。（模块化的演化过程：类–&gt;组件/类库（sdk）–&gt;服务(service)，方式越来越灵活）<br>可独立部署。<br>技术多样性。<br>弊：<br>分布式复杂性。<br>最终一致性。（各个服务的团队，数据也是分散式治理，会出现不一致的问题）<br>运维复杂性。<br>测试复杂性。</p><ol start="3"><li>企业在什么时候考虑引入微服务</li></ol><p>从生产力和系统的复杂性这两个方面来看。公司一开始的时候，业务复杂性不高，这时候是验证商业模式的时候，业务简单，用单体服务反而生产力很高。随着公司的发展，业务复杂性慢慢提高，这时候就可以采用微服务来提升生产力了。至于这个转化的点，需要团队的架构师来进行各方面衡量，就个人经验而言，团队发展到百人以上，采用微服务就很有必要了。<br>有些架构师是具有微服务架构能力，所以设计系统时就直接设计成了微服务，而不是通过单服务慢慢演化发展成微服务。在这里我并不推荐这种做法，因为一开始对业务领域并不是很了解，并且业务模式还没有得到验证，这时候上微服务风险比较高，很有可能失败。所以建议大家在单服务的应用成熟时，并且对业务领域比较熟悉的时候，如果发现单服务无法适应业务发展时，再考虑微服务的设计和架构。<br>4.微服务的组织架构</p><p>如上图左边，传统的企业中，团队是按职能划分的。开发一个项目时，会从不同的职能团队找人进行开发，开发完成后，再各自回到自己的职能团队，这种模式实践证明，效率还是比较低的。<br>如上图右边，围绕每个业务线或产品，按服务划分团队。团队成员从架构到运维，形成一个完整的闭环。一直围绕在产品周围，进行不断的迭代。不会像传统的团队一样离开。这样开发效率会比较高。至于这种团队的规模，建议按照亚马逊的两个披萨原则，大概10人左右比较好。<br>5：怎么理解中台战略和微服务</p><p>中台战略的由来：马云2015年去欧洲的一家公司supersell参观，发现这个公司的创新能力非常强，团队的规模很小，但是开发效率很高。他们就是采用中台战略。马云感触很深，回国后就在集团内部推出了中台战略。</p><p>简单的理解就是把传统的前后台体系中的后台进行了细分。阿里巴巴提出了大中台小前台的战略。就是强化业务和技术中台，把前端的应用变得更小更灵活。当中台越强大，能力就越强，越能更好的快速响应前台的业务需求。打个比喻，就是土壤越肥沃，越适合生长不同的生物，打造好的生态系统。<br>6：服务分层</p><p>每个公司的服务分层都不相同，有的公司服务没有分层，有的怎分层很多。目前业界没有统一的标准。<br>下面推荐一个比较容易理解的两层结构。</p><p>1：基础服务： 比如一个电商网站，商品服务和订单服务就属于基础服务（核心领域服务）。缓存服务，监控服务，消息队列等也属于基础服务（公共服务）<br>2：聚合服务 ：例如网关服务就算一种聚合服务（适配服务）。<br>这是一种逻辑划分，不是物理划分，实际设计的东西很多很复杂。<br>7：微服务的技术架构体系</p><p>下图是一个成型的互联网微服务的架构体系：</p><p>1：接入层 负载均衡作用，运维团队负责<br>2：网关层 反向路由，安全验证，限流等<br>3：业务服务层 基础服务和领域服务<br>4：支撑服务层<br>5：平台服务<br>6：基础设施层 运维团队负责。（或者阿里云）<br>8：微服务的服务发现的三种方式</p><p>第一种：如下图所示，传统的服务发现（大部分公司的做法）。服务上线后，通知运维，申请域名，配置路由。调用方通过dns域名解析，经过负载均衡路由，进行服务访问。缺点： LB的单点风险，服务穿透LB，性能也不是太好</p><p>第二种：也叫客户端发现方式。如下图所示。通过服务注册的方式，服务提供者先注册服务。消费者通过注册中心获取相应服务。<br>并且把LB的功能移动到了消费者的进程内，消费者根据自身路由去获取相应服务。优点是，没有了LB单点问题，也没有了LB的中间一跳，性能也比较好。但是这种方式有一个非常明显的缺点就是具有非常强的耦合性。针对不同的语言，每个服务的客户端都得实现一套服务发现的功能。</p><p>第三种：也叫服务端发现方式，如下图所示。和第二种很相似。但是LB功能独立进程单独部署，所以解决了客户端多语言开发的问题。唯一的缺点就是运维成比较高，每个节点都得部署一个LB的代理，例如nginx。</p><p>9.微服务网关</p><p>网关就好比一个公司的门卫。屏蔽内部细节，统一对外服务接口。</p><p>下图是一个网关所处位置的示例图。</p><p>10：Netflix Zuul网关介绍</p><p>核心就是一个servlet，通过filter机制实现的。主要分为三类过滤器：前置过滤器，过滤器和后置过滤器。<br>主要特色是，这些过滤器可以动态插拔，就是如果需要增加减少过滤器，可以不用重启，直接生效。原理就是：通过一个db维护过滤器（上图蓝色部分），如果增加过滤器，就将新过滤器编译完成后push到db中，有线程会定期扫描db，发现新的过滤器后，会上传到网关的相应文件目录下，并通知过滤器loader进行加载相应的过滤器。</p><p>整个网关调用的流程<br>上图从左变http Request开始经过三类过滤器，最终到最右边的Http Response，这就是Zull网关的整个调用流程。<br>11：微服务的路由发现体系</p><p>整个微服务的路由发现体系，一般由服务注册中心和网关两部分组成。以NetFlix为例子，Eureka和Zull这两个组件支撑了netFlix整个的路由发现体系。如下图所示，首先外部请求发送到网关，网关去服务注册中心获取相应的服务，进行调用。其次内部服务间的调用，也通过服务注册中心进行的</p><p>12.微服务配置中心</p><p>目前大部分公司都是把配置写到配置文件中，遇到修改配置的情况，成本很高。并且没有修改配置的记录，出问题很难追溯。配置中心就接解决了以上的问题。<br>可配置内容：数据库连接，业务参数等等</p><p>配置中心就是一个web服务，配置人员通过后台页面修改配置，各个服务就会得到新的配置参数。实现方式主要有两种，一种是push，另一种是pull。两张方式各有优缺点。push实时性较好，但是遇到网络抖动，会丢失消息。pull不会丢失消息但是实时性差一些。大家可以同时两种方式使用，实现一个比较好的效果。如下图所示，这是一个国内知名互联网公司的配置中心架构图。</p><p>开源地址：<a href="http://github.com/ctripcorp/appollo" target="_blank" rel="noopener">http://github.com/ctripcorp/appollo</a><br>13：RPC遇到了REST</p><p>内部一些核心服务，性能要求比较高的可以采用RPC，对外服务的一般可以采用rest。<br>14：服务框架和治理</p><p>微服务很多的时候，就需要有治理了。一个好的微服务框架一般分为以下14个部分。如下图所示。这就是开篇所说的，微服务涉及的东西很多，有些初创公司和业务不成熟的产品是不太适合的，成本比较高。<br>目前国内比较好的微服务框架就是阿里巴巴的DUBBO了,国外的就是spring cloud,大家可以去研究一下.</p><p>15：监控体系</p><p>监控是微服务治理的重要环节。一般分为以下四层。如下图所示。</p><p>监控的内容分为五个部分：日志监控，Metrics监控（服务调用情况），调用链监控，告警系统和健康检查。<br>日志监控，国内常用的就是ELK+KAFKA来实现。健康检查和Metrics，像spring boot会自带。Nagios也是一个很好的开源监控框架。<br>16:Trace调用链监控</p><p>调用链监控是用来追踪微服务之前依赖的路径和问题定位。例如阿里的鹰眼系统。主要原理就是子节点会记录父节点的id信息。</p><p>下图是目前比较流行的调用链监控框架。</p><p>17：微服务的限流熔断</p><p>假设服务A依赖服务B和服务C，而B服务和C服务有可能继续依赖其他的服务，继续下去会使得调用链路过长。如果在A的链路上某个或几个被调用的子服务不可用或延迟较高，则会导致调用A服务的请求被堵住，堵住的请求会消耗占用掉系统的线程、io等资源，当该类请求越来越多，占用的计算机资源越来越多的时候，会导致系统瓶颈出现，造成其他的请求同样不可用，最终导致业务系统崩溃。<br>一般情况对于服务依赖的保护主要有两种方式：熔断和限流。目前最流行的就是Hystrix的熔断框架。<br>下图是Hystrix的断路器原理图：</p><p>限流方式可以采用zuul的API限流方法。<br>18.Docker 容器部署技术&amp;持续交付流水线</p><p>随着微服务的流行，容器技术也相应的被大家重视起来。容器技术主要解决了以下两个问题：<br>1：环境一致性问题。例如java的jar/war包部署会依赖于环境的问题（操着系统的版本，jdk版本问题）。<br>2：镜像部署问题。例如java，rubby，nodejs等等的发布系统是不一样的，每个环境都得很麻烦的部署一遍，采用docker镜像，就屏蔽了这类问题。<br>下图是Docker容器部署的一个完整过程。</p><p>更重要的是，拥有如此多服务的集群环境迁移、复制也非常轻松，只需选择好各服务对应的Docker服务镜像、配置好相互之间访问地址就能很快搭建出一份完全一样的新集群。<br>19.容器调度和发布体系</p><p>目前基于容器的调度平台有Kubernetes，mesos，omega。下图是mesos的一个简单架构示意图。</p><p>下图是一个完整的容器发布体系</p><p>在此我向大家推荐一个架构学习交流群。交流学习群号：478030634  里面会分享一些资深架构师录制的视频录像：有Spring，MyBatis，Netty源码分析，高并发、高性能、分布式、微服务架构的原理，JVM性能优化、分布式架构等这些成为架构师必备的知识体系。还能领取免费的学习资源，目前受益良多</p><p>大家觉得文章对你还是有一点点帮助的，大家可以点击下方二维码进行关注。 《Java烂猪皮》 公众号聊的不仅仅是Java技术知识，还有面试等干货，后期还有大量架构干货。大家一起关注吧！关注烂猪皮，你会了解的更多………….. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年有人提出了2018年微服务将疯狂至死，可见微服务的争论从未停止过。在这我将自己对微服务的理解整理了一下，希望对大家有所帮助。&lt;/p&gt;
&lt;p&gt;1.什么是微服务&lt;/p&gt;
&lt;p&gt;1）一组小的服务（大小没有特别的标准，只要同一团队的工程师理解服务的标识一致即可）&lt;br&gt;2）独立
      
    
    </summary>
    
    
      <category term="Serverless" scheme="http://blog.ozairs.com/tags/Serverless/"/>
    
  </entry>
  
  <entry>
    <title>Use-of-Terraform</title>
    <link href="http://blog.ozairs.com/2019/01/13/Terraform%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.ozairs.com/2019/01/13/Terraform使用/</id>
    <published>2019-01-13T02:49:25.000Z</published>
    <updated>2019-01-27T04:53:20.344Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.terraform.io/" target="_blank" rel="noopener">Terraform</a> 是一个 IT 基础架构自动化编排工具，它的口号是 “Write, Plan, and create Infrastructure as Code”, 基础架构即代码。具体的说就是可以用代码来管理维护 IT 资源，比如针对 AWS，我们可以用它创建，修改，删除 S3 Bucket, Lambda, EC2 实例，Kinesis， VPC 等各种资源。并且在真正运行之前可以看到执行计划(即干运行-dryrun)。由于状态保存到文件中，因此能够离线方式查看资源情况 – 当然，前提是不要在 Terraform 之外对资源进行修改。</p><p>Terraform 配置的状态除了能够保存在本地文件中，也可以保存到 <a href="https://www.terraform.io/docs/backends/types/consul.html" target="_blank" rel="noopener">Consul</a>, <a href="https://www.terraform.io/docs/backends/types/s3.html" target="_blank" rel="noopener">S3</a>, azure, http, swift 等处。</p><p>Terraform 是一个高度可扩展的工具，通过 Provider 来支持新的基础架构，AWS 不过为目前官方内建 68 个 <a href="https://www.terraform.io/docs/providers/index.html" target="_blank" rel="noopener">Providers</a> 中的一个。其他能用 Terraform 的地方有 Alicloud(阿里云, 实名制备案才能用), Google Cloud, Heroku, Kubernetes, Microsoft Azure, MySQL, RabbitMQ, Docker 等等。愿意的话可以写自己的 Provider, 如搞个 Kafka 的话，用来管理 Topic 等的创建，维护工作。</p><p>Terraform 之前我们对 AWS 的操作用的是 awscli, 或 <a href="https://serverless.com/framework/" target="_blank" rel="noopener">Serverless</a>。awscli 什么都能做，但它是无状态的，必须明确用不同的命令来创建，修改和删除。Serverless 不是用来管理基础架构的，用它创建  Lambda 时创建资源都是很麻烦的事。AWS 提供的 CloudFormation 才是与 Terraform 较类似的工具，但是看到用法就头疼。</p><p>下面从最简单例子开始，看看怎么用 Terraform 创建，删改，修改 S3 Bucket。本地系统为 Mac OS。</p><p>\1. Terraform 安装</p><p>brew install terraform</p><p>安装后 shell 命令就是 terraform, 常用的是 terraform init, terraform plan, terraform apply</p><p>\2. 创建配置文件</p><p>像 git 一样，每个 Terraform 项目需要自己单独的目录空间，所以我们创建一个 terraform-learning 目录</p><p>mkdir terraform-learning</p><p>cd terraform-learning</p><p>该目录下的所有  <em>.tf 文件都会被 Terraform 加载，在初始化 Terraform 工作空间之前必须至少要有一个 </em>.tf 文件。我们这里建立文件 main.tf, 内容如下</p><p><img src="/Users/mark/Library/Application Support/typora-user-images/142F3AD6-DFE0-4683-9528-F3115C02FEE4/pastedGraphic.png" alt="pastedGraphic.png"></p><p>Terraform 配置的语法是该公司 HashiCorp 独创的 <a href="https://github.com/hashicorp/hcl" target="_blank" rel="noopener">HCL</a>(HashiCorp configuration language), 它可以兼容 JSON 格式。</p><p>上面 tf 文件在 Vim 中的语法加亮是安装的 hashivim/vim-terraform 插件。</p><p>我们写好了 *.tf 文件后可以调用 terraform fmt 对配置文件进行格式化，它比较喜欢被 Java 弃用的等号对齐的格式。</p><p>\3. 配置文件介绍</p><p>从正式跨入 terraform 命令正题之前先来大概的介绍一下上面那个 main.tf 文件。</p><p><strong>1)</strong> <a href="https://www.terraform.io/docs/providers/aws/index.html" target="_blank" rel="noopener"><strong>provider “aws”</strong></a> <strong>部分</strong>，它指定选用什么 provider, 以及验证信息。aws 既允许指定 access_key 和 secret_key</p><p>provider “aws” {</p><p>​    region           = “us-east-1”</p><p>​    access_key  = “your-access-key-here”</p><p>​    secret_key   = “your-secret-key-here”</p><p>}</p><p>也能够指定证书文件中的 profile</p><p>provider “aws” {</p><p>​    region                                  = “us-east-1”</p><p>​    shared_credentials_file  = “~/.aws/credentials”   //不指定的话，默认值是 “~/.aws/credentials”</p><p>​    profile                                  = “yanbin”                        //不指定的话，默认值是 “default”</p><p>}</p><p>如果是使用 shared_credentials_file 中的 profile, 请确定您以预先生成好的 credentials 文件及有效的 profile。</p><p>更多关于 AWS Provider 的配置请参考 <a href="https://www.terraform.io/docs/providers/aws/index.html" target="_blank" rel="noopener">https://www.terraform.io/docs/providers/aws/index.html</a></p><p><strong>2) resource “aws_s3_bucket” “s3_bucket”</strong> <strong>部分</strong></p><p>这只是我们今天举的一个小例子，点击链接 <a href="https://www.terraform.io/docs/providers/aws/r/s3_bucket.html" target="_blank" rel="noopener">aws_s3_bucket</a> 查看 S3 Bucket 所有的配置项。Terraform 能够管理的所有 AWS 资源也能从前面那个链接中看到。</p><p>如果 bucket yanbin-test-bucket 不存在的话，运行 terraform apply 将会创建它，否则试图更新该 bucket。此例子只指定了 bucket 的 acl 和 tag 信息。terraform destroy 用来删除已存在的  bucket。</p><p>注意：terraform 配置文件中只指定要管理的资源对象，并不关心操作资源的行为–创建，修改，删除操作。操作行为与 Terraform 的状态有关系，无则创建，有则修改，更名会拆分为除旧立新两个操作，terraform destroy 用于显式删除资源。后面实例操作时会讲到。</p><p>注：resource “aws_s3_bucket” “s3_bucket” { 中，resource 后第一个是 type, 即资源名，第二个参是 name。其实 “s3_bucket” 在这里没什么用，只是一个描述或助记符而已。(2017-08-28): 更正一下，在作为变量引用的时候就要用到它，例如在后面要为 Lambda 创建一个 S3 Event 的 Trigger, 就要写成 event_source_arn = “${aws_s3_bucket.s3_bucket.arn}”, 引用时不需要知道实际的名称。</p><p>\4. 初始化工作目录</p><p>在初始化 Terraform 工作目录之前， 其他命令如 apply, plan 多是不可用的，提示需要初始化工作目录，命令是</p><p>terraform init</p><p>它要做的事情像是 git init 加上 npm install，执行完了 terraform init 之后会在当前目录中生成 .terraform 目录，并依照 *.tf 文件中的配置下载相应的插件。</p><p>\5. 执行 Terraform 管理命令</p><p>有了前面的准备之后，终于可以开始运行 Terraform 的管理命令了。Terraform 在正式执行之前提供了预览执行计划的机会，让我们清楚的了解将要做什么</p><p>terraform plan</p><p><img src="/Users/mark/Library/Application Support/typora-user-images/142F3AD6-DFE0-4683-9528-F3115C02FEE4/pastedGraphic_1.png" alt="pastedGraphic_1.png"></p><p>由此计划还能知道关于 aws_s3_bucket 有些什么配置项，比如配置中可以加上 acceleration_status = “Enabled”</p><p>terraform apply</p><p><img src="/Users/mark/Library/Application Support/typora-user-images/142F3AD6-DFE0-4683-9528-F3115C02FEE4/pastedGraphic_2.png" alt="pastedGraphic_2.png"></p><p>这样便在 AWS 上创建了一个 S3 bucket “yanbin-test-bucket”, 同时会在当前目录中生成一个<a href="https://www.terraform.io/docs/state/index.html" target="_blank" rel="noopener">状态</a>文件 terraform.tfstate, 它是一个标准的 JSON 文件。这个文件对 Terraform 来说很重要，它会影响 terraform plan 的决策，虽然不会影响到实际的执行效果。我们可以把它存到远端，如 S3 或 Consul。terraform state [list|mv|pull|push|rm|show] 用来操作状态文件。</p><p>此时什么也不改，再次执行 terraform plan, 会显示没什么要做的</p><p>aws_s3_bucket.s3_bucket: Refreshing state… (ID: yanbin-test-bucket)</p><p>No changes. Infrastructure is up-to-date.</p><p>如果对 main.tf 作点小改，改个 tag 属性，再次 terraform plan</p><p>~ aws_s3_bucket.s3_bucket</p><p>tags.Name: “Created by Terraform” =&gt; “sCreated by Terraform”</p><p>Plan: 0 to add, 1 to change, 0 to destroy.</p><p>为什么说 terraform plan 是基于状态文件 terraform.tfstate 作出的呢？我们可以删除这个状态文件，然后执行 terraform plan 看看</p><p>+ aws_s3_bucket.s3_bucket</p><p>​    …..</p><p>​    bucket: “yanbin-test-bucket”</p><p>​    ……</p><p>​    tags.Environment: “QA”</p><p>​    ……</p><p>Plan: 1 to add, 0 to change, 0 to destroy.</p><p>Terraform 由于缺乏 terraform.tfstate 对比，所以认为是要添加一个 bucket, 但是实际执行 terraform apply 时，连接到远端 AWS, 发现该 bucket 已存在就只是进行更新。terraform apply 总能给出正确的操作结果。同理如果状态文件中说有那个 bucket, terraform plan 会说是更新，但 AWS 没有那个  bucket，实际执行 terraform apply 也会进行添加的。</p><p>资源更名</p><p>如果把 main.tf 中的</p><p>bucket = “yanbin-test-bucket”</p><p>改成</p><p>bucket = “yanbin-test-bucket-rename”</p><p>即欲为 bucket 更名，用 terraform plan 看下计划</p><p><img src="/Users/mark/Library/Application Support/typora-user-images/142F3AD6-DFE0-4683-9528-F3115C02FEE4/pastedGraphic_3.png" alt="pastedGraphic_3.png"></p><p>实际上 terraform apply 也是先删除旧的，再创建新的。Terraform 像 git 一样用不同颜色和  +/- 号来显示变动操作</p><p>最后是 terraform destroy 命令，把 *.tf 文件中配置的所有资源从 AWS 上清理掉。</p><p>关于 Terraform 工作目录中文件命名</p><p>Terraform 运行时会读取工作目录中所有的 <em>.tf, </em>.tfvars 文件，所以我们不必把所有的东西都写在单个文件中去，应按职责分列在不同的文件中，例如：</p><p>provider.tf                – provider 配置</p><p>terraform.tfvars      – 配置 provider 要用到的变量</p><p>varable.tf                  – 通用变量</p><p>resource.tf                – 资源定义</p><p>data.tf                        – 包文件定义</p><p>output.tf                    – 输出</p><p>以此篇最简单的入门出发，以后可以深入了解 Lambda, Lambda 触发器，及 API Gateway, EC2 实例怎么用 Terraform 来管理，也知晓了资源的可用属性应该到哪里去查。</p><p>一个小提示：在执行像 terraform plan 或 terraform apply 等命令的时候，可以按下 ctrl + c 让控制台输出详细的日志信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.terraform.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Terraform&lt;/a&gt; 是一个 IT 基础架构自动化编排工具，它的口号是 “Write, Plan, and create Infras
      
    
    </summary>
    
    
      <category term="Cloud" scheme="http://blog.ozairs.com/tags/Cloud/"/>
    
  </entry>
  
  <entry>
    <title>djy</title>
    <link href="http://blog.ozairs.com/2019/01/12/djy/"/>
    <id>http://blog.ozairs.com/2019/01/12/djy/</id>
    <published>2019-01-12T06:30:18.000Z</published>
    <updated>2019-01-27T04:53:20.338Z</updated>
    
    <content type="html"><![CDATA[<p>Hello world. This is my first blog. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello world. This is my first blog. &lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
