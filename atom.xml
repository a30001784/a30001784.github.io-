<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>带你走进美丽的墨尔本</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ozairs.com/"/>
  <updated>2019-02-12T10:47:52.462Z</updated>
  <id>http://blog.ozairs.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AWS面试经验分享</title>
    <link href="http://blog.ozairs.com/%E6%B1%82%E8%81%8C/AWS%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    <id>http://blog.ozairs.com/求职/AWS面试经验分享/</id>
    <published>2019-02-12T10:40:02.000Z</published>
    <updated>2019-02-12T10:47:52.462Z</updated>
    
    <content type="html"><![CDATA[<p>AWS的全名是Amazon Web Services，也就是亚马逊旗下的子公司，专门做云计算，业务遍及全球近200个国家，也是云计算行业的领头羊（有兴趣可以看看这个链接）。依照AWS Senior VP Andy Jassy的话来讲是：“We are building the fastest growing technology business on earth.”我于2014年6月拿到此公司offer，在香港和台湾从事对客户或潜伏客户的培训工作，隶属于亚太区的培训与认证部门（APAC Training &amp; Certification）。这篇文章回顾了我面试及头半年的工作，和一些个人的感想。基于公司政策要求，其中不触及面试具体细节、工作具体内容（包括人名），产品介绍及评论。</p><p><img src="/求职/AWS面试经验分享/20150102123134905.jpg" alt=""></p><p>“云计算”是个有趣的名词，由于现在这个环境下，普通大众想听不到它都难，但多数却完全不知道究竟是甚么。其实狭义且不严格地理解云计算，就是把计算资源像我们生活中水、电、气这类基础设施1样，按需供应计费，提供相对统1的标准或接口给其他厂商（生态圈）或终究客户使用。如果不明白计算资源怎样能像水电1样供应，可以联想1下平时使用的电脑，你在意的其实不是它的CPU内存硬盘网络等计算资源（简单统称方便理解），你在意的是输入的内容能得到你所需要的输出，不论这个输出是字符、图片、视频、音频、游戏画面、其他交互内容等等。那末“云计算”这里说的其实就是将你不在意的那些东西（CPU内存硬盘网络）和你在意的输入输出（比如键盘鼠标、显示器）分离，用户只具有基本的输入输出和网络连接服务，其他的全部放到远端。用户需要就启动使用并付费，不需要就像水电1样关掉。这是其中1个重点：资源分离。分离才方便做其他事情，具体好处这里就不说了。另外还需提及的是，对平时使用的电脑，不论你用还是不用，只要你买回来那末你已为其计算资源付费终了了，这样是否是很划算呢？你1年用1天和用360天，为计算资源付一样的费用，这其实其实不公道。个人使用还行，但企业就很不划算了，这就是按需分配计算资源的必要性，为了公道的利用及分配资源。</p><p>这篇文章不是教学文章，所以只是帮助不懂的朋友粗浅了解1下甚么是“云计算”。其实云计算还分好几类，上面提到的只是说基础设施层面的服务。其他层面的举个例子：想一想你手机上的App，它们也是云计算的1部份。由于他们也是你根据你的需求下载得手机上为你提供服务。所以云计算可以认为是Web Service，即通过网络为客户提供服务，这些服务源自于硬件与软件的组合或结合。我的工作就是介绍亚马逊的云计算服务给客户，让他们理解并学会使用亚马逊的云计算产品。我只负责香港和台湾，大陆培训业务与我无关，所以香港台湾的朋友如果要参加AWS的培训，多半会看到我（Michael Chen）。目前我所负责的区域就我1个人在做培训，也是香港台湾地区的第1个培训师。目前培训过的客户大小公司（世界500强到初创企业）都有，具体就不说了。</p><p><strong>面试经历</strong></p><p>面试</p><p>是1个有趣（折腾且漫长）的进程。由于我并没有主动申请这个职位，也不知道有这个职位在招聘，也没有猎头来找我（Amazon不通过猎头觅人）。当时（2013年）我还在联科团体工作，对AWS的职位只是偷偷想过，但种种缘由未有任何行动。直到：</p><ul><li>2013年5月28日，AWS的Z在LinkedIn上和我联系，问我是不是有兴趣做“Ecosystem Solutions Architect”（以后简称SA）。我其实不认识Z，但看到这个消息确切很惊讶，1是没想到会有AWS的人通过LinkedIn和我联系，2是觉得自己的资格还不够，有这个机会却极可能抓不住。我坦诚告知Z说，我看了职位介绍，觉得自己不合适，但还是很愿意与他交换，问他是不是还希望继续。Z答应了，我却很忐忑。</li></ul><ul><li>2013年6月24日，与Z终究见面，才发现他只说英语（我进AWS后发现他也能说广东话，不过基本不说）。他觉得我还行，然后需要再与其他同事评估，给了简历。我当时我觉得不合适SA，但培训比较合适，但从他和公司的角度，最需要的还是SA，我接受了他的建议。</li></ul><ul><li>2013年7月15日，如我所料，内部评估结果觉得我不适合做SA。Z说可以推荐我去做培训这个职位。</li></ul><ul><li>2013年8月6日，向Z推荐L做SA，不过Z觉得不适合，问A（AWS亚太区培训认证主管）是不是和我联系，我回复还未联系。这位L后来进了Facebook，题外话就不多说了。</li></ul><ul><li>2013年8月22日，与Z分享Gartner IaaS魔力象限报告。Gartner是全球知名的IT咨询机构，它的这个报告系列在IT界有很好的公信力。报告说AWS全球领先，计算资源超过其他14位竞争对手总和的5倍。英文原文是：It is the overwhelming market share leader, with more than five times the cloud IaaS compute capacity in use than the aggregate total of the other 14 providers in this Magic Quadrant.（全文链接：Magic Quadrant for Cloud Infrastructure as a Service）</li></ul><ul><li>2013年10月2日，发邮件给Z国庆祝愿。</li></ul><ul><li>2013年11月18日，我在联科团体获升职，与Z分享。Z恭喜后又问我是不是还有兴趣加入AWS，他会再次帮我争取拿到培训的<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>机会。大约过了34天，HR给我电话，顺利过关。</li></ul><ul><li>2013年12月6日，经过若干次与A约<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>时间，终究与其电话<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>，英语吞吞吐吐地过关，还需要看看粤语及技术方面。</li></ul><ul><li>2013年12月17日，技术兼粤语<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>，粤语没问题，但好几个技术问题不会，以为应聘就此结束。回到家，内心非常难受。还是写了邮件与Z报告了情况。过了1段时间，得到继续<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>的消息，我没想到居然还有机会。其间下班后在家狂看Glassdoor，学习AWS。</li></ul><ul><li>2014年1月30日，经过若干次来回讨论<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>时间，从1月中旬最后定到了1月30日（除夕）。非常辛苦的1对1<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>，1共5个小时不中断，有香港台湾的主管、亚太区培训认证主管、高级培训师、销售等好几个人车轮战，软技能和硬技能（AWS相干技术）、培训表达（英文与粤语）等都有触及，问得非常得仔细。<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>犯了1些小错，整体顺利。</li></ul><ul><li>2014年2月3日，Bar Raiser（简单理解就是提高<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>门坎的人）<a href="http://www.wfuyu.com/cxyms/" target="_blank" rel="noopener">面试</a>。其中有几个NoSQL的技术问题，都没有回答得很好。其他问题应当回答正确。当时感觉非常挫败，觉得最后1轮失败，很是惋惜。</li></ul><ul><li>2014年2月11日，讨论后结果是positive！我被录取了。</li></ul><ul><li>2014年2月14日，情人节签约。</li></ul><ul><li>2014年6月11日，经过非常麻烦的签证办理手续，终究开始上班。</li></ul><p>从2013年5月28日到2014年6月11日，全部进程几近是1整年。从上面的描写中你或许能感遭到我当时经历如此漫长的煎熬与纠结吧，他人都在开心过年的时候，我在纠结</p><p>面试</p><p>及结果，好在终究成功了。另外，这全部进程中还有1些其他的事情：</p><ul><li>2014年5月5日至2014年6月9日，陪老婆生孩子坐月子等各种生育相干事情。</li></ul><ul><li>2014年3月23日，推荐M应聘Business Development职位，2014年4月17日，M顺利闯关成功。</li></ul><p>工作经历</p><p>工作经历用1句话就说完了：6月入职飞新加坡，7月飞曼谷，8月飞台北和西雅图，9月飞悉尼，10月再次飞台北，11月飞拉斯维加斯为AWS re:Invent大会帮忙，12月回武汉办理大陆户口注销事宜，这也是为了以后能更方便地去台湾商务旅行。看着飞很多，其实多半时间都在香港，出差1般是1周左右。具体内容就不说了，有几点值得提1下：</p><ul><li>第1次培训是在台北，也是试讲，要被评估，若不合格还要重新再试讲评估。第1次用全英语讲课长达4天，这4天说的英语比我310多年说的都多，而且这几天平均每天睡4个钟头。好在最后1切顺利。但努力空间很大，需要认真学习和练习。在我提交完培训报告后，同事和老板都回邮件，说实话，挺给我信心的：“Great start Michael, the first one I am sure will always be the hardest to get through. But you are learning from the master in D too. Well done and good report.”“AWESOME report full of a lot of great information about our customers, their needs and provides AWS with the information required to help them further from a product/services and adoption perspective all the way back to training.”</li></ul><ul><li>以后在香港用英文培训，台北用普通话培训。每次培训完后，客户都要评分，每次写报告看分数都心跳加速，真是压力山东大学。今年我的整体分数在4.44（满分5分）。这个分数不算高，但就我个人而言，我觉得是客观的分数。</li></ul><ul><li>记得2014年3月听D在香港用英语对着4百来人做公然演讲培训时，1位AWS同事过来拍拍我肩膀，半开玩笑地说，明年此时就是你来演讲了哦！我想这么快啊！我能行吗？很难想象1年后我就可以面对几百人用英语演讲，我非常怀疑我有这个实力并且能做得如D那样好。结果入职不到半年，10月就在台北演讲，11月就在香港演讲，最后评价都还不错（台北4.5+，香港4.1+，这里不做与同事的横向比较）。回头来想一想，有些时候，你不能不需要1些压力来逼迫你提高，以做到自己都不敢想象的事情。</li></ul><ul><li>我1直觉得很难的AWS Solution Architect认证，居然也顺利通过。对那些在企业工作很多年的人来讲，这个认证其实其实不难。但我在企业才工作3年半，之前10年的工作都在两个大学里教书做科研，这其中的难度和跨度，对我是很大的（这里只是对我个人而言，不适用于其他人）。</li></ul><p>百姓网的CEO王建硕曾在其博客里说过他“所看到的伟大的公司，或成功的生意人，发现他们有1种惊人的类似的地方，总结出来就是：对贡献有豪情，对回报有信心。”贡献的是为了兴趣，而不是为了回报。如果做事1定是为了某种回报，那末这件事情会很难坚持久长。这个观点丁香园的冯大辉也转载在其微信公众号的文章中：“只有对贡献有豪情，不在意回报的时候，你才能坚持做1件事情，就像伟大的公司有1个贡献的理念，才可以持久地保持豪情，在获得巨大的成功以后，接着日复1日地寻觅更大的贡献。”这类理念与豪情是对回报有信心的来源。</p><p>我算不上成功，算不上勤奋，乃至算不上坚持。真正了解我的人知道这是实话，比如我老婆肯定知道上面这句话不是谦虚:) 你看这个博客的更新频率都愈来愈低，说忙是理由也是借口。在信息碎片化的今天，能坚持写博客的人貌似不多，还能坚持定阅浏览博客的人也不多，我周围几个90后同事乃至已很少用Facebook而用Instagram。我说了上面这么多乱78糟的话，是为了让自己重新再检讨1下，继续坚持下去。我已草拟了2015年每天需要完成的事情，包括这个博客和健身。固然整体安排还是以工作为主，不会把写博客放到重要的事情列表上，但保持每周1篇的更新频率是应当的，除非出差或其他不可抗因素没法更新。我欠下的游记都差不多足数了，呵呵。</p><p>写博客纯属不写不舒服斯基。想一想博客能带给我甚么回报呢？金钱的回报基本没有，倒是帮很多人拿到了1些学校和公司的offer，解决了1些人在旅游和其他方面的问题。真实的咨询公司我没进去，倒做起了虚拟咨询，有趣。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AWS的全名是Amazon Web Services，也就是亚马逊旗下的子公司，专门做云计算，业务遍及全球近200个国家，也是云计算行业的领头羊（有兴趣可以看看这个链接）。依照AWS Senior VP Andy Jassy的话来讲是：“We are building th
      
    
    </summary>
    
      <category term="求职" scheme="http://blog.ozairs.com/categories/%E6%B1%82%E8%81%8C/"/>
    
    
      <category term="AWS" scheme="http://blog.ozairs.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>详解澳洲房屋物业费计算方式</title>
    <link href="http://blog.ozairs.com/uncategorized/How-to-calculate-the-property-rate-in-Australia/"/>
    <id>http://blog.ozairs.com/uncategorized/How-to-calculate-the-property-rate-in-Australia/</id>
    <published>2019-02-07T06:23:32.000Z</published>
    <updated>2019-02-07T09:34:08.331Z</updated>
    
    <content type="html"><![CDATA[<p>每年，墨尔本市政府会计算您房屋的费率，以资助当地社区的建设，维护和服务。</p><p>关于房屋的费率的计算方式如下：</p><ol><li>将房屋的财产价值乘以市政府为社区项目和服务提供资金所需的“美元汇率”</li><li>增加收到的任何废物服务的成本</li><li>加征防火税</li><li>减去您有资格获得的任何优惠</li></ol><h2 id="房屋物业费计算举例"><a href="#房屋物业费计算举例" class="headerlink" title="房屋物业费计算举例"></a>房屋物业费计算举例</h2><ul><li>确定您房屋的资本改善价值（CIV）<strong>为400,000美元。</strong></li><li>确定’美元汇率’为<strong>0.00244201。</strong></li><li>将400,000乘以0.00244201，基本利率<strong>为976.80美元。</strong></li><li>增加您收到的任何废物服务和消防税的成本。</li><li>减去您有资格获得的任何让步。</li></ul><h2 id="如何进行房屋评估"><a href="#如何进行房屋评估" class="headerlink" title="如何进行房屋评估"></a>如何进行房屋评估</h2><p>市政府每年都会按照维多利亚州政府法律，对当地的房产进行评估。实际操作过程中，会使用合格的估价师根据以下因素评估您的房产：</p><ul><li>最近在该地区的销售</li><li>它的位置</li><li>土地的质量和位置</li><li>建筑物的大小，年龄和状况</li></ul><h3 id="如果您对不同意房屋估价"><a href="#如果您对不同意房屋估价" class="headerlink" title="如果您对不同意房屋估价"></a>如果您对不同意房屋估价</h3><p>如果您不同意您的房产估价，可以和当地市政府联系：</p><p>市政府评估团队成员可以：</p><ul><li>更详细地解释我们如何评估您的财产</li><li>听取并理解您的反对意见</li><li>建议您可以采取哪些进一步措施</li></ul><h2 id="如何计算美元汇率"><a href="#如何计算美元汇率" class="headerlink" title="如何计算美元汇率"></a>如何计算美元汇率</h2><p>通过以下方式计算出美元汇率：</p><ul><li>计算提供所有计划和服务所需的费率收入总额</li><li>将此金额除以当地房产总价值</li></ul><p>这个数字是通过市政府每年的预算流程和每年的变化来确定的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每年，墨尔本市政府会计算您房屋的费率，以资助当地社区的建设，维护和服务。&lt;/p&gt;
&lt;p&gt;关于房屋的费率的计算方式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将房屋的财产价值乘以市政府为社区项目和服务提供资金所需的“美元汇率”&lt;/li&gt;
&lt;li&gt;增加收到的任何废物服务的成本&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="Property" scheme="http://blog.ozairs.com/tags/Property/"/>
    
  </entry>
  
  <entry>
    <title>Git从入门到熟练使用</title>
    <link href="http://blog.ozairs.com/Web%E5%BC%80%E5%8F%91/Git%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%86%9F%E7%BB%83%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.ozairs.com/Web开发/Git从入门到熟练使用/</id>
    <published>2019-02-06T06:41:25.000Z</published>
    <updated>2019-02-06T09:50:08.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ul><li>客户端并不是只提取最新版本的文件快照，而是把代码仓库完整的镜像下来。这样一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</li></ul><h3 id="Git的优势"><a href="#Git的优势" class="headerlink" title="Git的优势"></a>Git的优势</h3><h4 id="直接记录快照"><a href="#直接记录快照" class="headerlink" title="直接记录快照"></a>直接记录快照</h4><ul><li>Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 <strong>快照流</strong>。</li><li>如图，在version2中的 B 即是因为 File B 没有改变，所以直接存储了一个指向 FileB 的链接。只有修改了的文件才会产生一个新的文件，覆盖原来的文件。</li></ul><p><img src="/Web开发/Git从入门到熟练使用/1.png" alt=""></p><h4 id="几乎所有操作都在本地执行"><a href="#几乎所有操作都在本地执行" class="headerlink" title="几乎所有操作都在本地执行"></a>几乎所有操作都在本地执行</h4><ul><li>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。因为你在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。</li></ul><h4 id="Git保证完整性"><a href="#Git保证完整性" class="headerlink" title="Git保证完整性"></a>Git保证完整性</h4><ul><li>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。Git 数据库中保存的信息都是以文件内容的哈希值来确定的，而不是文件名。</li><li>这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。</li></ul><h4 id="Git一般只添加数据"><a href="#Git一般只添加数据" class="headerlink" title="Git一般只添加数据"></a>Git一般只添加数据</h4><ul><li>你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。这个特性使得我们可以尽情的尝试对Git进行操作而不用害怕把它改坏了，只需要回滚即可。</li></ul><h3 id="需要注意的重点"><a href="#需要注意的重点" class="headerlink" title="需要注意的重点"></a>需要注意的重点</h3><h4 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h4><ul><li>已提交 committed ：数据已经保存在本地 Git 仓库</li><li>已修改 modified ： 修改了文件，但是还没保存在仓库中</li><li>已暂存 staged ： 对一个已修改的文件的当前版本做了标记</li></ul><p><img src="/Users/mark/AWS/hexoblog/source/_posts/Git从入门到熟练使用/2.png" alt=""></p><p>工作目录，暂存区域及Git仓库.png</p><h4 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h4><ul><li>工作目录 Working Directory ：对项目的某个版本独立提取出来的内容，这些从Git仓库的压缩数据库提取出来的文件，放在磁盘上供你使用或修改。</li><li>暂存区域 Staging Area ：是<strong>一个文件</strong>，<strong>保存了下次将提交的文件列表</strong>，是待提交文件的暂存区域。一般在Git仓库的目录中，有时也被称为索引。</li><li>Git仓库：用来保存项目的元数据和对象数据库的地方。是Git中最重要的部分，从其他计算机克隆仓库时拷贝的就是这里的数据</li></ul><h4 id="基本的Git工作流程"><a href="#基本的Git工作流程" class="headerlink" title="基本的Git工作流程"></a>基本的Git工作流程</h4><ul><li>在工作目录中修改文件</li><li>暂存文件，将文件的快照存储在暂存区域</li><li>提交更新，找到暂存区域的位置，将快照永久性存储到Git仓库目录<ul><li>提交状态：如果Git目录中保存着特定版本的文件，就属于已提交状态。</li><li>暂存状态：如果做了修改并且已经放入暂存区域，就属于暂存状态。</li><li>已修改状态：如果自上次取出后，做了修改但是还没有存在暂存区域，就是已修改状态。</li></ul></li></ul><h3 id="基本的Git操作流程"><a href="#基本的Git操作流程" class="headerlink" title="基本的Git操作流程"></a>基本的Git操作流程</h3><h4 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h4><ul><li><p>首先最基础的是需要配置用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;lanya&quot;</span><br><span class="line">$ git config --global user.email shenglanya@corp.netease.com</span><br></pre></td></tr></table></figure><p>关于 config 的种类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Config file location</span><br><span class="line"># global 表示配置全局信息，配置之后无论你在该系统上做任何事情，Git都会使用这些信息。</span><br><span class="line">    --global              use global config file</span><br><span class="line">    --system              use system config file</span><br><span class="line">    --local               use repository config file</span><br><span class="line">    -f, --file &lt;file&gt;     use given config file</span><br><span class="line">    --blob &lt;blob-id&gt;      read config from given blob object</span><br></pre></td></tr></table></figure></li><li><p>接着需要检查你的配置信息，使用 <code>$ git config --list</code>指令检查全部配置信息,结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">core.excludesfile=~/.gitignore</span><br><span class="line">core.legacyheaders=false</span><br><span class="line">core.quotepath=false</span><br><span class="line">mergetool.keepbackup=true</span><br><span class="line">push.default=simple</span><br><span class="line">color.ui=auto</span><br><span class="line">color.interactive=auto</span><br><span class="line">repack.usedeltabaseoffset=true</span><br><span class="line">alias.s=status</span><br><span class="line">alias.a=!git add . &amp;&amp; git status</span><br><span class="line">alias.au=!git add -u . &amp;&amp; git status</span><br><span class="line">alias.aa=!git add . &amp;&amp; git add -u . &amp;&amp; git status</span><br><span class="line">alias.c=commit</span><br><span class="line">alias.cm=commit -m</span><br><span class="line">alias.ca=commit --amend</span><br><span class="line">alias.ac=!git add . &amp;&amp; git commit</span><br><span class="line">alias.acm=!git add . &amp;&amp; git commit -m</span><br><span class="line">alias.l=log --graph --all --pretty=format:&apos;%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset&apos;</span><br><span class="line">alias.ll=log --stat --abbrev-commit</span><br><span class="line">alias.lg=log --color --graph --pretty=format:&apos;%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative</span><br><span class="line">alias.llg=log --color --graph --pretty=format:&apos;%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)&apos; --abbrev-commit</span><br><span class="line">alias.d=diff</span><br><span class="line">alias.master=checkout master</span><br><span class="line">alias.spull=svn rebase</span><br><span class="line">alias.spush=svn dcommit</span><br><span class="line">alias.alias=!git config --list | grep &apos;alias\.&apos; | sed &apos;s/alias\.\([^=]*\)=\(.*\)/\1\   =&gt; \2/&apos; | sort</span><br><span class="line">include.path=~/.gitcinclude</span><br><span class="line">include.path=.githubconfig</span><br><span class="line">include.path=.gitcredential</span><br><span class="line">diff.exif.textconv=exif</span><br><span class="line">credential.helper=osxkeychain</span><br><span class="line">core.excludesfile=/Users/shenglanya/.gitignore_global</span><br><span class="line">difftool.sourcetree.cmd=opendiff &quot;$LOCAL&quot; &quot;$REMOTE&quot;</span><br><span class="line">difftool.sourcetree.path=</span><br><span class="line">mergetool.sourcetree.cmd=/Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh &quot;$LOCAL&quot; &quot;$REMOTE&quot; -ancestor &quot;$BASE&quot; -merge &quot;$MERGED&quot;</span><br><span class="line">mergetool.sourcetree.trustexitcode=true</span><br><span class="line">user.name=shenglanya</span><br><span class="line">user.email=shenglanya@corp.netease.com</span><br><span class="line">commit.template=/Users/shenglanya/.stCommitMsg</span><br><span class="line">core.repositoryformatversion=0</span><br><span class="line">core.filemode=true</span><br><span class="line">core.bare=false</span><br><span class="line">core.logallrefupdates=true</span><br><span class="line">core.ignorecase=true</span><br><span class="line">core.precomposeunicode=true</span><br><span class="line">remote.origin.url=https://git.ms.netease.com/netease-precious-metals-client/ios-client.git</span><br><span class="line">remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*</span><br><span class="line">branch.essential.remote=origin</span><br><span class="line">branch.essential.merge=refs/heads/essential</span><br><span class="line">branch.r_4.4.remote=origin</span><br><span class="line">branch.r_4.4.merge=refs/heads/r_4.4</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>$ git config &lt;key&gt;</code>来检查某一项配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">shenglanya</span><br></pre></td></tr></table></figure></li></ul><h4 id="查阅帮助手册方法"><a href="#查阅帮助手册方法" class="headerlink" title="查阅帮助手册方法"></a>查阅帮助手册方法</h4><ul><li><p>以下方法均可找到 Git 命令手册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git help &lt;verb&gt;</span><br><span class="line">$ git &lt;verb&gt; --help</span><br><span class="line">$ man git-&lt;verb&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h4><h5 id="方法一：在现有目录中初始化仓库（创建一个新的自己的仓库）"><a href="#方法一：在现有目录中初始化仓库（创建一个新的自己的仓库）" class="headerlink" title="方法一：在现有目录中初始化仓库（创建一个新的自己的仓库）"></a>方法一：在现有目录中初始化仓库（创建一个新的自己的仓库）</h5><ul><li><p><code>git init</code>该命令将创建一个名为 <code>.git</code>的子目录，这个子目录含有你在初始化的Git仓库中所有的必须文件，这些文件是Git仓库的骨干。但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。</p></li><li><p>如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。 你可通过 <code>git add</code>命令来实现对指定文件的跟踪，然后执行 <code>git commit</code>提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add LICENSE</span><br><span class="line">$ git commit -m &apos;initial project version&apos;</span><br></pre></td></tr></table></figure></li><li><p>具体操作流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 首先</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/shenglanya/Desktop/.git/</span><br><span class="line"></span><br><span class="line">#然后使用 ls -a 可查看隐藏文件，发现存在名为 .git 的子目录</span><br><span class="line">$ ls -a</span><br><span class="line">.     .DS_Store   .localized</span><br><span class="line">..        .git        pic</span><br><span class="line"></span><br><span class="line"># 接着进入子目录,发现此目录中包含你初始化仓库中所有的必须文件，这些文件是 Git 仓库的骨干</span><br><span class="line">$ cd .git</span><br><span class="line">$ ls</span><br><span class="line">HEAD      config      hooks       objects</span><br><span class="line">branches  description info        refs</span><br><span class="line"></span><br><span class="line"># 接着需要跟踪项目里的文件，需要注意的是，当创建一个新的项目里的文件时，它默认是未被跟踪的，所以此时我们需要手动的将它添加到版本控制中，也就是被跟踪</span><br></pre></td></tr></table></figure></li></ul><h5 id="方法二：克隆现有仓库（clone别人的）"><a href="#方法二：克隆现有仓库（clone别人的）" class="headerlink" title="方法二：克隆现有仓库（clone别人的）"></a>方法二：克隆现有仓库（clone别人的）</h5><ul><li><p>如果你想获得一份已经存在了的 Git 仓库的拷贝，比如说，你想为某个开源项目贡献自己的一份力，这时就要用到 <code>git clone</code>命令。Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 <code>git clone</code>命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure><p>Git 支持多种数据传输协议。 上面的例子使用的是 <code>https://</code>协议，不过你也可以使用 <code>git://</code>协议或者使用 SSH 传输协议，比如 <code>user@server:path/to/repo.git</code>。</p></li></ul><h4 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h4><ul><li>你工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。 工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。</li></ul><h4 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h4><ul><li><p>要查看哪些文件处于什么状态，可以用 <code>git status</code>命令。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>这说明你现在的工作目录相当干净。表示所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。 最后，该命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。 现在，分支名是 “master”,这是默认的分支名。</p></li><li><p>如果你在当前已经有仓库管理的项目中添加了一个文件，名字叫做 README 。然后使用 <code>git status</code>命令，你会发现会出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;My Project&apos; &gt; README</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">    README</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure><p>表示 README 还未被跟踪，表示 Git 之前的提交中没有这些文件。Git也不会自动跟踪它，这使得你不必担心将生成的二进制文件或者其他不想被包含的文件包含进来。若你想跟踪它，则需要明明白白的告诉它你想跟踪这个文件，使用 <code>git add</code>指令。</p></li></ul><h4 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h4><ul><li><p>使用 <code>git add</code>可以跟踪新文件。所以可以使用 <code>git add README</code>, 然后再运行 <code>git status</code>会看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   pic/git存储项目虽时间改变的快照.png</span><br><span class="line">  new file:   pic/lifecycle.png</span><br><span class="line">  new file:   pic/工作目录，暂存区域及Git仓库.png</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">  pic/实习学习笔记.md</span><br><span class="line"></span><br><span class="line"># 使用 git add 后</span><br><span class="line">$ git add pic/实习学习笔记.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   pic/git存储项目虽时间改变的快照.png</span><br><span class="line">  new file:   pic/lifecycle.png</span><br><span class="line">  new file:   pic/实习学习笔记.md</span><br><span class="line">  new file:   pic/工作目录，暂存区域及Git仓库.png</span><br></pre></td></tr></table></figure><p>只要在 <code>Changes to be committed</code>这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。 你可能会想起之前我们使用 <code>git init</code>后就运行了 <code>git add (files)</code>命令，开始跟踪当前目录下的文件。 <code>git add</code>命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。</p></li><li><p>关于 <code>git add</code>指令还有别的作用：</p><ul><li>用于追踪新文件</li><li>用于将已跟踪的文件放入暂存区</li><li>用于合并时把有冲突的文件标记为已解决</li></ul></li></ul><h4 id="暂存已修改文件"><a href="#暂存已修改文件" class="headerlink" title="暂存已修改文件"></a>暂存已修改文件</h4><ul><li><p>修改已被跟踪的文件。比如说修改了一个名为 实习学习笔记.md 的文件，然后运行 <code>git status</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   pic/git存储项目虽时间改变的快照.png</span><br><span class="line">  new file:   pic/lifecycle.png</span><br><span class="line">  new file:   pic/实习学习笔记.md</span><br><span class="line">  new file:   pic/工作目录，暂存区域及Git仓库.png</span><br><span class="line"></span><br><span class="line"># 说明已跟踪文件内容发生了变化，但是还未放入暂存区。如果想暂存这次更新，需要使用 git add 指令。 git add 指令是一个多功能命令：可以用它来跟踪新文件，或者把已经跟踪的文件放到暂存区中，还能用于合并时把有冲突的文件标记为已解决状态等。</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">  modified:   pic/实习学习笔记.md</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"># 使用 git add 指令将其添加到暂存区</span><br><span class="line">$ git add pic/实习学习笔记.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   pic/git存储项目虽时间改变的快照.png</span><br><span class="line">  new file:   pic/lifecycle.png</span><br><span class="line">  new file:   pic/实习学习笔记.md</span><br><span class="line">  new file:   pic/工作目录，暂存区域及Git仓库.png</span><br></pre></td></tr></table></figure></li><li><p>需要注意的是，当已经使用了 <code>git add</code>指令暂存的版本又经过修改之后，需在再重新使用 <code>git add</code>指令将最新的修改放入暂存区，否则此时暂存区里只有上一次修改的内容。</p></li></ul><h4 id="提交文件到仓库"><a href="#提交文件到仓库" class="headerlink" title="提交文件到仓库"></a>提交文件到仓库</h4><ul><li><p>使用 <code>git commit</code>指令可以使得暂存在暂存区的文件被提交到仓库中去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br><span class="line">[master (root-commit) 2713657] 第一次的修改提交</span><br><span class="line"> 4 files changed, 22 insertions(+)</span><br><span class="line"> create mode 100644 pic/git存储项目虽时间改变的快照.png</span><br><span class="line"> create mode 100644 pic/lifecycle.png</span><br><span class="line"> create mode 100644 pic/实习学习笔记.md</span><br><span class="line"> create mode 100644 pic/工作目录，暂存区域及Git仓库.png</span><br></pre></td></tr></table></figure></li></ul><h3 id="基本的-Git-操作指令"><a href="#基本的-Git-操作指令" class="headerlink" title="基本的 Git 操作指令"></a>基本的 Git 操作指令</h3><h4 id="git-status-命令概述"><a href="#git-status-命令概述" class="headerlink" title="git status 命令概述"></a>git status 命令概述</h4><ul><li><p>使用 <code>git status</code>时，实际上可以使用更为方便的指令来达到更为紧凑的格式输出。比如使用 <code>git status -s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"></span><br><span class="line">#  M 靠右的 M 表示修改过的文件并且还未被放入暂存区</span><br><span class="line"> M README</span><br><span class="line"> </span><br><span class="line"># MM 靠左的 M 表示该文件被修改后放入了暂存区，靠右的表示修改过的文件并且还未被放入暂存区，所以 Rakefile 文件被修改过后放入了暂存区，但是之后又进行了修改，还未将最后一次修改放入暂存区</span><br><span class="line">MM Rakefile</span><br><span class="line"></span><br><span class="line"># A 表示新添加到暂存区的文件</span><br><span class="line">A  lib/git.rb</span><br><span class="line"></span><br><span class="line"># M 靠左的 M 表示该文件被修改后放入了暂存区</span><br><span class="line">M  lib/simplegit.rb</span><br><span class="line"></span><br><span class="line"># ?? 表示还未被跟踪</span><br><span class="line">?? LICENSE.txt  </span><br><span class="line"></span><br><span class="line"># 所以此时暂存区中的文件有 Rakefile, lib/git.rb, lib/simplegit.rb</span><br></pre></td></tr></table></figure></li></ul><h4 id="git-diff-命令概述"><a href="#git-diff-命令概述" class="headerlink" title="git diff 命令概述"></a>git diff 命令概述</h4><ul><li><p><code>git diff</code>可以说是 <code>git status</code>的具体版本，<code>git status</code>只能查看修改了哪些文件，而 <code>git diff</code>能够具体到该文件的某一部分。通常有以下两个用法</p><ul><li><p>当前做的更新哪些还没有暂存？</p><p>首先修改 pic/实习学习笔记.md 文件，然后使用 git status 指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">    modified:   pic/实习学习笔记.md</span><br><span class="line">    </span><br><span class="line"># 表示该文件修改后还没有暂存</span><br></pre></td></tr></table></figure><p>此时使用 <code>git diff</code>可以查看当前未暂存文件更新了哪些部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/实习学习笔记.md</span><br><span class="line">index 2b4e07b..a50f1a2 100644</span><br><span class="line">--- a/pic/实习学习笔记.md</span><br><span class="line">+++ b/pic/实习学习笔记.md</span><br><span class="line">@@ -14,7 +14,7 @@</span><br><span class="line">-* 有额外时间的话，需要将之前没读完的书继续读下去。</span><br><span class="line">+* 有额外时间的话，需要将之前没读完的书继续读下去。呵呵呵</span><br></pre></td></tr></table></figure><p>此时就可以查看未暂存文件修改的部分了。</p><ul><li><p>有哪些更新已经暂存起来了准备好了下次提交？</p><p>可以使用 <code>git diff --staged</code>指令查看，首先需要使用 <code>git add</code>指令将刚刚修改的文件加入暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git add pic/实习学习笔记.md</span><br><span class="line">shenglanyadeMacBook-Pro:desktop shenglanya$ git diff --staged</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/实习学习笔记.md</span><br><span class="line">index 2b4e07b..a50f1a2 100644</span><br><span class="line">--- a/pic/实习学习笔记.md</span><br><span class="line">+++ b/pic/实习学习笔记.md</span><br><span class="line">@@ -14,7 +14,7 @@</span><br><span class="line">-* 有额外时间的话，需要将之前没读完的书继续读下去。</span><br><span class="line">+* 有额外时间的话，需要将之前没读完的书继续读下去。呵呵呵</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>当我们将文件暂存后继续编辑时，使用 <code>git status</code>指令查看如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  modified:   pic/实习学习笔记.md</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">  modified:   pic/实习学习笔记.md</span><br><span class="line"></span><br><span class="line"># 该文件同时出现在了暂存区和修改部分。</span><br></pre></td></tr></table></figure></li><li><p>现在运行 <code>git diff</code>查看暂存前后的变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/实习学习笔记.md</span><br><span class="line">index a50f1a2..2b4e07b 100644</span><br><span class="line">--- a/pic/实习学习笔记.md</span><br><span class="line">+++ b/pic/实习学习笔记.md</span><br><span class="line">@@ -14,7 +14,7 @@</span><br><span class="line">-* 有额外时间的话，需要将之前没读完的书继续读下去。呵呵呵</span><br><span class="line">+* 有额外时间的话，需要将之前没读完的书继续读下去。</span><br></pre></td></tr></table></figure></li><li><p>再使用 <code>git diff --staged</code>查看变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --staged</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/实习学习笔记.md</span><br><span class="line">index 2b4e07b..a50f1a2 100644</span><br><span class="line">--- a/pic/实习学习笔记.md</span><br><span class="line">+++ b/pic/实习学习笔记.md</span><br><span class="line">@@ -14,7 +14,7 @@</span><br><span class="line">-* 有额外时间的话，需要将之前没读完的书继续读下去。</span><br><span class="line">+* 有额外时间的话，需要将之前没读完的书继续读下去。呵呵呵</span><br></pre></td></tr></table></figure><p>表示这个指令查看的是暂存区中文件的修改。</p></li></ul><h4 id="git-commit-命令概述"><a href="#git-commit-命令概述" class="headerlink" title="git commit 命令概述"></a>git commit 命令概述</h4><ul><li><p>当使用 <code>git commit</code>命令提交暂存区域的文件时，一定要确认是否还有什么修改过或新建的文件还未放入暂存区，否则一旦提交，这些文件或修改都会只留在本地磁盘，不会加入版本控制中。所以每次提交前都需要执行 <code>git status</code>命令来查看是否都暂存起来了</p></li><li><p>可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;</span><br><span class="line"></span><br><span class="line"># 表示当前在 master 分支上提交的，本次提交的完整 SHA-1 校验和是 463dc4f</span><br><span class="line">[master 463dc4f] Story 182: Fix benchmarks for speed</span><br><span class="line"></span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 README</span><br></pre></td></tr></table></figure></li><li><p>注意：提交的是放在暂存区的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时再纳入版本管理。每一次提交都是对项目的一次快照，以后可以回到这个状态或进行比较。</p></li><li><p>使用 <code>git commit -a</code>可以跳过暂存这一步骤，git 会自动把所有已经跟踪过的文件暂存起来并且提交，即跳过 <code>git add</code>步骤。</p></li></ul><h4 id="git-rm-命令概述"><a href="#git-rm-命令概述" class="headerlink" title="git rm 命令概述"></a>git rm 命令概述</h4><ul><li><p>要从 Git 中移除某个文件，就必须从已经跟踪的文件清单中删除，然后提交。</p></li><li><p>删除有两种方式</p><ul><li>第一种是简单的从暂存区中删除。但是文件还在被跟踪着。</li><li>第二种是直接在未暂存区域中移除文件，表示直接将文件移除版本控制中。不再跟踪。</li></ul></li><li><p>下面来演示一下，首先对工作区域中的文件删除,使用 <code>rm pic/实习学习笔记.md</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ rm pic/实习学习笔记.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">  deleted:    pic/实习学习笔记.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line"></span><br><span class="line"># 此时将文件从暂存区域中删除，但是文件还在被追踪</span><br></pre></td></tr></table></figure></li><li><p>然后再将文件从跟踪中删除，这里两种指令 <code>$ git rm pic/实习学习笔记.md</code>和 <code>$ git add pic/实习学习笔记.md</code>都能达到同样效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git add pic/实习学习笔记.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">  deleted:    pic/实习学习笔记.md</span><br></pre></td></tr></table></figure></li><li><p>需要注意的是，如果删除文件之前文件修改过并且已经放入了暂存区域，则必须使用强制删除选项<code>-f</code>才能将其删除。主要是为了防止误删。</p></li><li><p>当我们想要将文件从 Git 仓库中删除但是却想让他仍在我们的工作区域中时，（即保存在本地磁盘并且不被 Git 跟踪），为了达到这一目的，使用 <code>--cached</code>选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached pic/git存储项目虽时间改变的快照.png</span><br><span class="line">rm &apos;pic/git存储项目虽时间改变的快照.png&apos;</span><br><span class="line"></span><br><span class="line"># 执行完此命令后，pic/git存储项目虽时间改变的快照.png 文件还在本地磁盘上，并没有被删除。</span><br></pre></td></tr></table></figure></li></ul><h4 id="git-mv-命令概述"><a href="#git-mv-命令概述" class="headerlink" title="git mv 命令概述"></a>git mv 命令概述</h4><ul><li><p>Git 并不显式的跟踪文件移动操作。所以如果 Git 重命名某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。</p></li><li><p>当我们想在 Git 中对文件进行改名可以使用 <code>git mv a b</code>方式来操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git mv pic/实习学习笔记.md pic/note.md</span><br><span class="line">$ git diff --staged</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/note.md</span><br><span class="line">similarity index 100%</span><br><span class="line">rename from pic/实习学习笔记.md</span><br><span class="line">rename to pic/note.md</span><br></pre></td></tr></table></figure></li><li><p><code>git mv</code>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv pic/实习学习笔记.md pic/note.md</span><br><span class="line">$ git rm pic/实习学习笔记.md</span><br><span class="line">$ git add pic/note.md</span><br></pre></td></tr></table></figure></li></ul><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><ul><li><p>我们有时会有些文件不需要 Git 来进行管理，也不希望他们总是出现在未跟踪列表中，所以此时，我们可以创建一个名为 .gitignore 的文件，并在其中列出要忽略掉文件模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 先创建此忽略文件并向其中添加需要忽略的文件</span><br><span class="line">$ vi .gitignore</span><br><span class="line"></span><br><span class="line"># 查看此文件</span><br><span class="line">$ cat .gitignore</span><br><span class="line">.localized</span><br><span class="line"></span><br><span class="line"># 表示忽略所有以 .o 或 .a 结尾的文件</span><br><span class="line">*.[oa]</span><br><span class="line"></span><br><span class="line"># 表示忽略所有以波浪符（~）结尾的文件</span><br><span class="line">*~</span><br></pre></td></tr></table></figure></li><li><p>一些规范如下</p><ul><li>所有空行或者以 <code>＃</code>开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。glob 即是指 shell 简化了的正则表达式。<ul><li>其中 * 可以匹配 0 ~ n 个字符</li><li>？ 只能匹配一个字符</li><li>[0-9]表示匹配所有 0 到 9 的数字</li><li><strong> 表示匹配任意中间目录 比如 `a/</strong>/z`可以匹配 a/z, a/b/z, a/b/c/z 等</li></ul></li><li>匹配模式可以以（<code>/</code>）开头防止递归。</li><li>匹配模式可以以（<code>/</code>）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</li></ul></li></ul><h4 id="git-stash-命令概述"><a href="#git-stash-命令概述" class="headerlink" title="git stash 命令概述"></a>git stash 命令概述</h4><ul><li><p>当我们已经在一个分支上修改文件后，如果必须要切换到其他分支展开其他的工作，而当前分支的工作还没有完成，此时我们需要使用 <code>$ git stash</code>或 <code>$ git stash save</code>命令将当前分支上的工作暂存到栈上，这时你的工作目录就干净了，就可以切换到其他分支工作，等工作完成后，再切换回原来的分支，可以使用 <code>$ git stash apply</code>将你刚刚的储藏重新应用。如果想查看你当前一共有多少个储藏，可以使用 <code>$ git stash list</code>来查看。如果你并不想应用最新的分支，而是想应用某一个早些时间的分支，你可以使用 <code>$ git stash apply stash@{1}</code>，其中最后一个括号内的数字为你某一次提交到工作栈上的暂存记录。如果你不指定 apply 的参数，git 将认为你想要应用最近一次的储藏。</p></li><li><p>当我们返回原本的分支后，使用 <code>$ git stash apply</code>指令恢复了工作栈中暂存的数据，但是如果当你提交这个分支之前，已经在暂存区缓存了一部分工作内容，并且使用 stash 保存了工作状态，此时当你恢复工作栈中的数据后，实际上暂存区中的内容将会被移出暂存区，而被放在了工作目录中修改的部分，你需要手动将它再放回暂存区，否则可以使用 <code>$ git stash apply --index</code>来尝试重新将暂存区的文件恢复到暂存区中。当你把这个修改放入暂存区后，实际上堆栈上还有这个修改的记录，此时你可以使用 <code>$ git stash drop stash@{1}</code>来从栈中移除它，或者直接使用 <code>$ git stash pop</code>来应用储藏栈这样它就会自动从储藏栈上消失了。</p></li><li><p><code>$ git stash --keep-index</code>指令的作用在于告诉 Git 不要储藏任何你通过 git add 命令已经暂存的东西，也就是说比如你现在已经修改了一部分工作目录中的内容，并且还有一部分已经被你暂存了下来。此时你暂时不想继续改工作目录中的内容了，可是你也不想将它暂存到暂存区，此时可以使用这个指令将它暂存到工作栈上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">M  index.html</span><br><span class="line"> M lib/simplegit.rb</span><br><span class="line"></span><br><span class="line">$ git stash --keep-index</span><br><span class="line">Saved working directory and index state WIP on master: 1b65b17 added the index file</span><br><span class="line">HEAD is now at 1b65b17 added the index file</span><br><span class="line"></span><br><span class="line">$ git status -s</span><br><span class="line">M  index.html</span><br></pre></td></tr></table></figure></li><li><p><code>$ git stash -u</code>可以储藏还未跟踪的文件到工作栈</p></li><li><p><code>$ git stash branch</code>如果使用 stash 储藏了一些工作，然后继续在储藏的分支上工作，在重新应用 stash 储藏的文件工作时可能会有问题。 如果应用尝试修改刚刚储藏的修改的文件，也就是两次同时修改了一个文件，你会得到一个合并冲突并不得不解决它。 如果想要一个轻松的方式来再次测试储藏的改动，可以运行 <code>git stash branch</code>创建一个新分支，检出储藏工作时所在的提交，重新在那应用工作，然后在应用成功后扔掉储藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git stash branch testchanges</span><br><span class="line">Switched to a new branch &quot;testchanges&quot;</span><br><span class="line"># On branch testchanges</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">#</span><br><span class="line">#      modified:   index.html</span><br><span class="line">#</span><br><span class="line"># Changed but not updated:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">#</span><br><span class="line">#      modified:   lib/simplegit.rb</span><br><span class="line">#</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (f0dfc4d5dc332d1cee34a634182e168c4efc3359)</span><br></pre></td></tr></table></figure></li><li><p><code>$ git stash -all</code>可以移除工作目录中所有未跟踪的文件并且存储在工作栈上，相应的一个不怎么安全的方法是 <code>$ git clean</code>直接清除了内容，无法追溯回。不过可以使用 <code>git clean</code>命令去除冗余文件或者清理工作目录。 使用<code>git clean -f -d</code>命令来移除工作目录中所有未追踪的文件以及空的子目录。 <code>-f</code>意味着 <em>强制</em>或 “确定移除”。在使用 <code>$ git clean</code>之前，我们可以先使用 <code>$ git clean -d -n</code>来看一下这样做的后果是什么，也就是有什么文件会被移除。</p></li></ul><h4 id="git-log-命令概述"><a href="#git-log-命令概述" class="headerlink" title="git log 命令概述"></a>git log 命令概述</h4><ul><li><p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 此时便需要 <code>git log</code>命令。默认不加其他参数时， <code>git log</code>惠安提交时间列出所有更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add pic</span><br><span class="line"></span><br><span class="line">commit ec50914561593b769a98ff468de6697a6d964cbd</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:33:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    xiugai</span><br><span class="line"></span><br><span class="line">commit a7372097ab8f063e17beca6fa8f82a15bb11c5e3</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:20:05 2018 +0800</span><br><span class="line"></span><br><span class="line">    提交</span><br></pre></td></tr></table></figure></li><li><p>常用选项 <code>-p</code>,用来显示每次提交的内容差异，可以加上 -2 来仅仅显示最近两次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ git log -p</span><br><span class="line">commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add pic</span><br><span class="line"></span><br><span class="line">diff --git a/pic/git存储项目虽时间改变的快照.png b/pic/git存储项目虽时间改变的快照.png</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..1036a42</span><br><span class="line">Binary files /dev/null and b/pic/git存储项目虽时间改变的快照.png differ</span><br><span class="line"></span><br><span class="line">commit ec50914561593b769a98ff468de6697a6d964cbd</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:33:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    xiugai</span><br><span class="line"></span><br><span class="line">diff --git a/pic/git存储项目虽时间改变的快照.png b/pic/git存储项目虽时间改变的快照.png</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index 1036a42..0000000</span><br><span class="line">Binary files a/pic/git存储项目虽时间改变的快照.png and /dev/null differ</span><br></pre></td></tr></table></figure></li><li><p><code>--stat</code>选项可以看到每次提交的简略统计信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ git log --stat</span><br><span class="line">commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add pic</span><br><span class="line"></span><br><span class="line"> pic/git存储项目虽时间改变的快照.png | Bin 0 -&gt; 20722 bytes</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"></span><br><span class="line">commit ec50914561593b769a98ff468de6697a6d964cbd</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:33:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    xiugai</span><br><span class="line"></span><br><span class="line"> pic/git存储项目虽时间改变的快照.png | Bin 20722 -&gt; 0 bytes</span><br><span class="line"> pic/实习学习笔记.md                       |  22 ++++++++++++++++++++++</span><br><span class="line"> 2 files changed, 22 insertions(+)</span><br><span class="line"></span><br><span class="line">commit a7372097ab8f063e17beca6fa8f82a15bb11c5e3</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:20:05 2018 +0800</span><br></pre></td></tr></table></figure></li><li><p>常用选项 <code>--pretty</code>可以指定使用不同于默认格式的方式展示提交信息。比如 <code>oneline</code>将每个提交放在一行显示，查看到提交数很大时非常有用。另外还有 <code>short`</code>full`等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master) add pic</span><br><span class="line">ec50914561593b769a98ff468de6697a6d964cbd xiugai</span><br><span class="line">a7372097ab8f063e17beca6fa8f82a15bb11c5e3 提交</span><br><span class="line">2713657f264a3a019580dc3a489d303fade5dc5c 第一次的修改提交</span><br></pre></td></tr></table></figure></li><li><p><code>format</code>选项可以定制要显示的记录格式。这样的输出对后期提取分析格外有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$git log --pretty=format:&quot;%h - %an, %ar : s&quot;</span><br><span class="line">fb40f7a - shenglanya, 60 minutes ago : add pic</span><br><span class="line">ec50914 - shenglanya, 61 minutes ago : xiugai</span><br><span class="line">a737209 - shenglanya, 74 minutes ago : 提交</span><br><span class="line">2713657 - shenglanya, 3 hours ago : 第一次的修改提交</span><br></pre></td></tr></table></figure><p>常用选项以及其代表意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">选项        说明</span><br><span class="line">%H    提交对象（commit）的完整哈希字串</span><br><span class="line">%h        提交对象的简短哈希字串</span><br><span class="line">%T        树对象（tree）的完整哈希字串</span><br><span class="line">%t        树对象的简短哈希字串</span><br><span class="line">%P        父对象（parent）的完整哈希字串</span><br><span class="line">%p        父对象的简短哈希字串</span><br><span class="line">%an       作者（author）的名字</span><br><span class="line">%ae       作者的电子邮件地址</span><br><span class="line">%ad       作者修订日期（可以用 --date= 选项定制格式）</span><br><span class="line">%ar       作者修订日期，按多久以前的方式显示</span><br><span class="line">%cn       提交者（committer）的名字</span><br><span class="line">%ce       提交者的电子邮件地址</span><br><span class="line">%cd       提交日期</span><br><span class="line">%cr       提交日期，按多久以前的方式显示</span><br><span class="line">%s        提交说明</span><br></pre></td></tr></table></figure></li><li><p>选项 <code>--graph</code>可以形象的展示分支，合并历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty --graph</span><br><span class="line">* commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master)</span><br><span class="line">| Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">| Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line">| </span><br><span class="line">|     add pic</span><br><span class="line">| </span><br><span class="line">* commit ec50914561593b769a98ff468de6697a6d964cbd</span><br><span class="line">| Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">| Date:   Wed Mar 7 11:33:36 2018 +0800</span><br><span class="line">| </span><br><span class="line">|     xiugai</span><br><span class="line">| </span><br><span class="line">* commit a7372097ab8f063e17beca6fa8f82a15bb11c5e3</span><br><span class="line">| Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">| Date:   Wed Mar 7 11:20:05 2018 +0800</span><br><span class="line">| </span><br><span class="line">|     提交</span><br></pre></td></tr></table></figure></li><li><p>git log 的常用选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">选项                说明</span><br><span class="line">-p                按补丁格式显示每个更新之间的差异。</span><br><span class="line">--stat            显示每次更新的文件修改统计信息。</span><br><span class="line">--shortstat       只显示 --stat 中最后的行数修改添加移除统计。</span><br><span class="line">--name-only       仅在提交信息后显示已修改的文件清单。</span><br><span class="line">--name-status 显示新增、修改、删除的文件清单。</span><br><span class="line">--abbrev-commit   仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</span><br><span class="line">--relative-date   使用较短的相对时间显示（比如，“2 weeks ago”）。</span><br><span class="line">--graph           显示 ASCII 图形表示的分支合并历史。</span><br><span class="line">--pretty      使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</span><br></pre></td></tr></table></figure></li><li><p>限制 <code>git log</code>输出的选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">选项                说明</span><br><span class="line">-(n)          仅显示最近的 n 条提交</span><br><span class="line">--since, --after仅显示指定时间之后的提交。</span><br><span class="line">--until, --before仅显示指定时间之前的提交。</span><br><span class="line">--author      仅显示指定作者相关的提交。</span><br><span class="line">--committer       仅显示指定提交者相关的提交。</span><br><span class="line">--grep            仅显示含指定关键字的提交</span><br><span class="line">-S                仅显示添加或移除了某个关键字的提交</span><br></pre></td></tr></table></figure></li></ul><h4 id="撤销操作指令"><a href="#撤销操作指令" class="headerlink" title="撤销操作指令"></a>撤销操作指令</h4><ul><li><p><strong>重新提交</strong>：有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code>选项的提交命令尝试重新提交：<code>$ git commit --amend</code>这个命令将暂存区中的文件提交，如果自从上次提交以来还未做任何修改，则快照保持不变，你修改的只有提交信息。例如你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &apos;initial commit&apos;</span><br><span class="line">$ git add forgotten_file</span><br><span class="line">$ git commit --amend</span><br><span class="line"></span><br><span class="line"># 最终只会有一个提交，第二次提交将代替第一次提交的结果</span><br></pre></td></tr></table></figure></li><li><p><strong>取消暂存的文件</strong>：可以使用 <code>git reset HEAD yourfile</code>来进行取消暂存区域内文件的暂存操作。</p></li><li><p><strong>撤销对文件的修改</strong>：如果你不想保存对文件的修改，如何方便的将其还原成上次提交的样子？使用 <code>$ gitcheckout -- pic/实习学习笔记.md</code>撤销之前所做的修改。</p></li></ul><h3 id="Git-远程仓库的使用"><a href="#Git-远程仓库的使用" class="headerlink" title="Git 远程仓库的使用"></a>Git 远程仓库的使用</h3><ul><li><p><strong>查看远程仓库</strong>: 使用 <code>git remote</code>命令可以列出你指定的每个远程服务器的简写。如果已经克隆了自己的仓库，那么至少能看到 origin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ios-client</span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><p>可以指定参数 -v 可以查看你的读写权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin    https://git.ms.netease.com/netease-precious-metals-client/ios-client.git (fetch)</span><br><span class="line">origin    https://git.ms.netease.com/netease-precious-metals-client/ios-client.git (push)</span><br></pre></td></tr></table></figure></li><li><p><strong>添加远程仓库</strong>： 运行 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code>添加一个新的远程 Git 仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote add test https://github.com/lanyasheng/NTAlgorithm.git</span><br><span class="line">$ git remote -v</span><br><span class="line">origin    https://git.ms.netease.com/netease-precious-metals-client/ios-client.git (fetch)</span><br><span class="line">origin    https://git.ms.netease.com/netease-precious-metals-client/ios-client.git (push)</span><br><span class="line">test  https://github.com/lanyasheng/NTAlgorithm.git (fetch)</span><br><span class="line">test  https://github.com/lanyasheng/NTAlgorithm.git (push)</span><br></pre></td></tr></table></figure><p>现在就可以使用 test 来代替整个 URL ，例如使用 <code>git fetch test</code>来拉取远端 Git 仓库中有但你没有的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch test</span><br><span class="line">warning: no common commits</span><br><span class="line">remote: Counting objects: 84, done.</span><br><span class="line">remote: Total 84 (delta 0), reused 0 (delta 0), pack-reused 83</span><br><span class="line">Unpacking objects: 100% (84/84), done.</span><br><span class="line">From https://github.com/lanyasheng/NTAlgorithm</span><br><span class="line"> * [new branch]          develop    -&gt; test/develop</span><br><span class="line"> * [new branch]          master     -&gt; test/master</span><br></pre></td></tr></table></figure><p>现在可以在本地访问 test/master 分支了，实际上对应远端的 master 分支。</p></li><li><p><strong>从仓库中抓取</strong>: <code>git fetch</code>会访问远端仓库，从中拉取所有你没有的信息。执行完后，你会拥有该仓库的所有分支引用可以用来随时合并和查看。当使用了 <code>git clone</code>命令克隆一个远端仓库时，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。<code>git fetch origin</code>会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 <code>git fetch</code>命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p></li><li><p><strong>从仓库上拉取</strong>: <code>git pull</code>可以用来自动的抓取然后合并远程分支到当前分支，前提是你有一个分支设置为跟踪一个远程的分支。所以 <code>git pull == git fetch + git merge</code>。默认情况下， <code>git clone</code>会自动设置本地的 master 分支跟踪远程仓库的 master 分支，运行 <code>git pull</code>通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。</p></li><li><p><strong>推送到远程分支</strong>：<code>git push [remote-name][branch-name]</code>指令可以将你的项目推送到服务器。例如当你想将 master 推到 origin 时，可以使用 <code>$ git push origin master</code>只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送</p></li><li><p><strong>查看远程仓库</strong>: 如果想查看一个远程仓库的更多信息，可以使用 <code>$ git remote show test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show test</span><br><span class="line">* remote test</span><br><span class="line">  Fetch URL: https://github.com/lanyasheng/NTAlgorithm.git</span><br><span class="line">  Push  URL: https://github.com/lanyasheng/NTAlgorithm.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    develop tracked</span><br><span class="line">    master  tracked</span><br><span class="line">    </span><br><span class="line">  Local branches configured for &apos;git pull&apos;:</span><br><span class="line">    develop merges with remote develop</span><br><span class="line">    master  merges with remote master</span><br><span class="line">  Local refs configured for &apos;git push&apos;:</span><br><span class="line">    develop pushes to develop (local out of date)</span><br><span class="line">    master  pushes to master  (local out of date)</span><br></pre></td></tr></table></figure><p>这个命令列出了当你在特定的分支上执行 <code>git push</code>会自动地推送到哪一个远程分支。 它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了，还有当你执行 <code>git pull</code>时哪些分支会自动合并</p></li><li><p><strong>远程仓库的移除与命名</strong>：运行 <code>git remote rename &lt;shortname&gt; &lt;url&gt;</code>重命名远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename test testNea</span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">testNea</span><br></pre></td></tr></table></figure></li><li><p><strong>移除远程仓库</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm testNea</span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure></li></ul><h3 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h3><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><ul><li><p>轻量标签 — 就像一个不会改变的分支，只是一个特定提交的引用，创建轻量标签只需要提供版本号即可。<code>git tag v1.4-1w</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.4-1w</span><br><span class="line">$ git show</span><br><span class="line">commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master, tag: v1.4-1w, tag: v1.3)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add pic</span><br><span class="line"></span><br><span class="line">diff --git a/pic/git存储项目虽时间改变的快照.png b/pic/git存储项目虽时间改变的快照.png</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..1036a42</span><br><span class="line">Binary files /dev/null and b/pic/git存储项目虽时间改变的快照.png differ</span><br></pre></td></tr></table></figure></li><li><p>附注标签 — 一个存储在 Git 数据库中的一个完整对象，他们可以被校验。其中包含打标签者的名字，电子邮件地址、日期时间，标签信息。并且可以使用 GNU Privacy Guard （GPG）签名与验证。可以使用<code>$ git tag -a v1.3</code>这样就给当前版本打上了 v1.3 标签。也可以使用 <code>$ git tag -a v1.3 -m &#39;my version 1.3&#39;</code>这样就直接标备注了。 <code>git show</code>可以查看标签信息与对应的提交信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.3</span><br><span class="line">$ git show</span><br><span class="line">commit fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master, tag: v1.3)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 11:34:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add pic</span><br><span class="line"></span><br><span class="line">diff --git a/pic/git存储项目虽时间改变的快照.png b/pic/git存储项目虽时间改变的快照.png</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..1036a42</span><br><span class="line">Binary files /dev/null and b/pic/git存储项目虽时间改变的快照.png differ</span><br></pre></td></tr></table></figure></li></ul><h4 id="后期打标签"><a href="#后期打标签" class="headerlink" title="后期打标签"></a>后期打标签</h4><ul><li><p>也可以对过去提交打标签。例如提交历史如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">fb40f7a259de8ec2f2edbada6f85aa855f4a6585 (HEAD -&gt; master, tag: v1.4-1w, tag: v1.3) add pic</span><br><span class="line">ec50914561593b769a98ff468de6697a6d964cbd xiugai</span><br><span class="line">a7372097ab8f063e17beca6fa8f82a15bb11c5e3 提交</span><br><span class="line">20c944dba3f056aef30aada88d0a452e8faffcbc hehe</span><br><span class="line">2713657f264a3a019580dc3a489d303fade5dc5c 第一次的修改提交</span><br></pre></td></tr></table></figure><p>可以使用 <code>$ git tag -a v1.2 2713657</code>表示对该校验和的版本打上标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.2</span><br><span class="line">v1.3</span><br><span class="line">v1.4-1w</span><br><span class="line">$ git show v1.2</span><br><span class="line">tag v1.2</span><br><span class="line">Tagger: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 15:00:31 2018 +0800</span><br><span class="line"></span><br><span class="line">对之前的打标签`</span><br><span class="line"></span><br><span class="line">commit 2713657f264a3a019580dc3a489d303fade5dc5c (tag: v1.2)</span><br><span class="line">Author: shenglanya &lt;shenglanya@corp.netease.com&gt;</span><br><span class="line">Date:   Wed Mar 7 09:41:21 2018 +0800</span><br><span class="line"></span><br><span class="line">    第一次的修改提交</span><br><span class="line"></span><br><span class="line">diff --git a/pic/git存储项目虽时间改变的快照.png b/pic/git存储项目虽时间改变的快照.png</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..1036a42</span><br><span class="line">Binary files /dev/null and b/pic/git存储项目虽时间改变的快照.png differ</span><br><span class="line">diff --git a/pic/lifecycle.png b/pic/lifecycle.png</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..922b02c</span><br><span class="line">Binary files /dev/null and b/pic/lifecycle.png differ</span><br><span class="line">diff --git a/pic/实习学习笔记.md b/pic/实习学习笔记.md</span><br><span class="line">new file mode 100644</span><br></pre></td></tr></table></figure></li></ul><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><h3 id="分支简介"><a href="#分支简介" class="headerlink" title="分支简介"></a>分支简介</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>Git 保存到不是文件的变化或差异，而是一系列不同时刻的文件快照。当提交时，Git 会保存一个提交的对象。该提交对象会包含一个指向暂存内容快照的指针，还会包含作者姓名和邮箱，提交时输入的信息以及指向他的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象。</li><li>我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和然后会把当前版本的文件快照保存到 Git 仓库中，最终将校验和加入到暂存区域等待提交：</li></ul><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><ul><li>Git 创建新分支的本质就是创建一个可以移动的新的指针。比如创建一个 testing 分支。<code>$ git branch testing</code>这会在当前所提交的对象上创建一个指针，此时如图：</li></ul><p><img src="/Web开发/Git从入门到熟练使用/3.png" alt=""></p><p>two-branches.png</p><ul><li>如何判断 Git 当前在哪一个分支？此时就要依靠</li></ul><p>  HEAD</p><p>  指针。该指针指向当前所在的本地分支。如图</p><p>  <img src="/Web开发/Git从入门到熟练使用/4.png" alt=""></p><p>此时 HEAD 指针指向 master 指针，也就是实际上 HEAD 指针指向的时当前所在的本地分支。在本例中，我们仍在 master 分支上，因为 <code>git branch</code>命令仅仅是创建了一个新分支，并没有切换到它上面。可以使用以下命令来查看各个分支当前所指的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --decorate</span><br><span class="line">5a5f9fe (HEAD -&gt; master) rename</span><br><span class="line">fb40f7a (tag: v1.4-1w, tag: v1.3, testing) add pic</span><br><span class="line">ec50914 xiugai</span><br><span class="line">a737209 提交</span><br><span class="line">2713657 (tag: v1.2) 第一次的修改提交</span><br></pre></td></tr></table></figure><p>可以看到，当前 HEAD 和 master 分支均指向 5a5f9fe 开头的对象</p><h4 id="分支切换"><a href="#分支切换" class="headerlink" title="分支切换"></a>分支切换</h4><ul><li><p>使用 <code>git checkout</code>命令可以切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout testing</span><br><span class="line">Switched to branch &apos;testing&apos;</span><br><span class="line">$ git log --oneline --decorate</span><br><span class="line">fb40f7a (HEAD -&gt; testing, tag: v1.4-1w, tag: v1.3) add pic</span><br><span class="line">ec50914 xiugai</span><br><span class="line">a737209 提交</span><br><span class="line">2713657 (tag: v1.2) 第一次的修改提交</span><br></pre></td></tr></table></figure><p>可以看到，此时 HEAD 指针指向了 testing 指针，表示当前的本地分支切换为 testing 分支。然后在 testing 分支上进行一些操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a -m &apos;made a change on tesing&apos;</span><br><span class="line">[testing 844332b] made a change on tesing</span><br><span class="line"> 3 files changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 pic/head-to-master.png</span><br><span class="line"> create mode 100644 pic/test.md</span><br><span class="line"> create mode 100644 pic/two-branches.png</span><br><span class="line">$ git log --oneline --decorate</span><br><span class="line">844332b (HEAD -&gt; testing) made a change on tesing</span><br><span class="line">fb40f7a (tag: v1.4-1w, tag: v1.3) add pic</span><br><span class="line">ec50914 xiugai</span><br><span class="line">a737209 提交</span><br><span class="line">20c944d hehe</span><br><span class="line">2713657 (tag: v1.2) 第一次的修改提交</span><br></pre></td></tr></table></figure><p>此时可以发现 HEAD 指针指向 testing 指针指向了新提交的文件。[图片上传失败…(image-dde0a4-1520604809580)]</p><p>此时再切换到 master 分支看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">$ git log --oneline --decorate</span><br><span class="line">5a5f9fe (HEAD -&gt; master) rename</span><br><span class="line">fb40f7a (tag: v1.4-1w, tag: v1.3) add pic</span><br><span class="line">ec50914 xiugai</span><br><span class="line">a737209 提交</span><br><span class="line">2713657 (tag: v1.2) 第一次的修改提交</span><br></pre></td></tr></table></figure><p>可以发现此时 master 分支还指向刚刚它指向的位置，也就是[图片上传失败…(image-85e5da-1520604809580)]</p></li></ul><ul><li><p><code>git checkout master</code>一共做了两件事：</p><ul><li>使 HEAD 指向 master 分支</li><li>将工作目录恢复成 master 分支所指向的快照内容，也就是忽略 testing 分支所做的修改。</li></ul></li><li><p>若我们此时再对 master 分支上的文件上进行修改，就会产生分叉。因为你刚创建了一个新分支，并且切换过去进行了一些工作，然后后切换回了 master 分支进行了一些额外的工作。上述改动针对的是不同分支，你可以在不同分支之间来回切换并在某一时刻将他们合并。</p></li></ul><h4 id="项目分叉历史"><a href="#项目分叉历史" class="headerlink" title="项目分叉历史"></a>项目分叉历史</h4><ul><li><p>可以使用 <code>git log</code>命令查看分叉历史。运行 <code>git log --oneline --decorate --graph —all</code>，他会输出你的提交历史各个分支的指向以及项目的分支分叉情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline --decorate --graph --all</span><br><span class="line">* b551643 (HEAD -&gt; master) made a change on master</span><br><span class="line">* 5a5f9fe rename</span><br><span class="line">| * 844332b (testing) made a change on tesing</span><br><span class="line">|/  </span><br><span class="line">* fb40f7a (tag: v1.4-1w, tag: v1.3) add pic</span><br><span class="line">* ec50914 xiugai</span><br><span class="line">* a737209 提交</span><br><span class="line">* 20c944d hehe</span><br><span class="line">* 2713657 (tag: v1.2) 第一次的修改提交</span><br></pre></td></tr></table></figure><p>由于 Git 的分支实际上只是包含所指对象的校验和，创建一个新分支仅仅相当于往一个文件中写入 41 个字节。</p></li></ul><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="分支的新建与合并"><a href="#分支的新建与合并" class="headerlink" title="分支的新建与合并"></a>分支的新建与合并</h4><ul><li><p>具体实例总结在此文章中 <a href="https://link.jianshu.com/?t=https%3A%2F%2Fgit-scm.com%2Fbook%2Fzh%2Fv2%2FGit-%25E5%2588%2586%25E6%2594%25AF-%25E5%2588%2586%25E6%2594%25AF%25E7%259A%2584%25E6%2596%25B0%25E5%25BB%25BA%25E4%25B8%258E%25E5%2590%2588%25E5%25B9%25B6" target="_blank" rel="noopener">分支的新建与合并</a></p></li><li><p>需要注意的地方：</p><ul><li><p>首先当你想直接从当前分支创建并切换到新分支时，可以使用 <code>$ git checkout -b yourname</code>来进行操作，这个命令等价于 <code>$ git branch yourname + $ git checkout yourname</code></p></li><li><p>当你在新分支上工作时，突然需要切换到之前开始分叉的 master 分支并且需要在 master 分支上开一个新的分支进行工作，则首先需要暂存你在 yourname 分支上还未进行暂存的修改，然后将其提交到仓库。否则可能会跟你即将检出的分支产生冲突。</p></li><li><p>当你在 master 分支上开了一个新分支并且已经解决完问题后，可以将 master 和 hotfix 进行合并，使用</p></li></ul></li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master, $ git merge hotfix</span><br></pre></td></tr></table></figure>进行合并。- 快进 （Fast forward）：在合并时，如果当前的 master 分支是你要合并分支的直接上游，则 Git 会直接将 master 指针向前推进到 hotfix 上面。然后就可以将 hotfix 进行删除。 使用 `$ git branch -d hotfix`- 合并提交：而如果 master 不是你要合并分支的直接上游，比如此时 master 分支已经指向了原本 hotfix 指向的位置，则将它与 yourname 分支合并起来会比较麻烦。由于此时 master 分支已经更新了，如果我们需要它新的内容可以将 master 合并到 yourname 上，如果不需要可以直接等 yourname 分支任务完成后，将其合并到 master 上面。如果我们想将 yourname 合并到 master 上，首先会记录他们两个指针所指向的最后一个快照，然后记录他们共同的祖先快照，最后将三方合并的结果做一个新的快照并且自动创建一个新的提交指向它。合并后可以删除 yourname 分支。</code></pre><ul><li>遇到冲突的分之合并：可以直接使用 <code>git status</code>状态来查看具体是哪个文件产生了冲突，然后直接打开该文件删除乱码部分和不需要的部分。</li></ul><h4 id="分支管理-git-branch-命令"><a href="#分支管理-git-branch-命令" class="headerlink" title="分支管理(git branch 命令)"></a>分支管理(git branch 命令)</h4><ul><li><p><code>$ git branch</code>命令不仅可以创建或删除分支，当不加参数时，其作用为可以查看当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><p>其中 * 表示当前分支</p></li><li><p><code>$ git branch -v</code>可以查看每个分支的最后一次提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -v</span><br><span class="line">* master  b551643 made a change on master</span><br><span class="line">  testing 844332b made a change on tesing</span><br></pre></td></tr></table></figure></li><li><p><code>$ git branch --merged</code>可以查看哪些分支已经合并到当前分支上，同理 <code>$ git branch --no-merged</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --merged</span><br><span class="line">* master</span><br><span class="line">$ git branch --no-merged</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure></li><li><p><code>$ git branch -d yourname</code>可以用来删除已经合并的分支，如果是未合并的分支则会报错。</p></li></ul><h4 id="分支开发工作流程"><a href="#分支开发工作流程" class="headerlink" title="分支开发工作流程"></a>分支开发工作流程</h4><ul><li>长期分支（最常用）<ul><li>如只在 master 上保留稳定的代码，有可能仅仅是已经发布的代码。还有一些其他的分支如 develop 和 next 平行分支用来进行后续开发，一旦在在这些分支上达到了稳定，再将他们合并到 master 分支上。这样在确保这些已完成的特性分支能够通过所有的测试，并且不会引入 bug 后再将他们合并到 master 上等待下一次发布。</li></ul></li><li>特性分支<ul><li>特性分支被用来实现单一特性或相关工作，一旦工作完成它就会被删除。这项技术可以使你快速的进行上下文切换。当你做这么多操作时，这些分支要确保存于本地，而不会与服务器进行交互。</li></ul></li></ul><h4 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h4><ul><li>远程引用是指对远程仓库的引用，包括分支标签等。他们是你不能移动的本地引用，当你做任何网络通信操作时，他们会自动移动。远程跟踪分支像是你上次连接到远程仓库时，那些分支所处状态的书签。他们的命名格式为 (remote)/(branch) 。如果你想要看你最后一次与远程 origin 分支通信时 master 分支的状态，则可以查看 origin / master 分支。你与同事合作解决一个问题并且他们推送了一个 <code>iss53</code>分支，你可能有自己的本地 <code>iss53</code>分支；但是在服务器上的分支会指向 <code>origin/iss53</code>的提交。</li><li>当与远端仓库共同工作时，如果你不抓取fetch远端 orgin/master ，则它将会一直指向在你上次 fetch 的那个文件。此时即使你本地的 master 已经指向很远的地方了，远端的 orgin/master 还依旧指向你上次 fetch 的那个位置。直到你下一次 fetch。</li></ul><h3 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h3><ul><li><p>当我们使用分支合并时，要确定是谁合并到谁：当我们需要使用其他分支的内容时，可以把其他分支合并到我们的分支上。但是当我们在开发时，有时可能是从 master 或 develop 分支上拉取的工作分支，此时如果 master 或 develop 分支有更新并且我们需要用到，可以将 master 或 develop 分支拉取到我们的分支。否则，则应该等开发完毕后，将我们的分支合并到 master 或 develop 分支上。当开发完毕后，首先需要检出 master 分支，然后将工作分支合并到 master 上即可。 <code>$ git checkout master $ git merge workBranch</code>。合并完成后，可以将工作分支删除。<code>$ git branch -d workBranch</code>，需要注意的是，当我们删除的分支还包含未提交的内容，分支删除会失效。强制删除可以使用 <code>-D</code></p></li><li><p>当 merge 出现冲突时，我们可以先 <code>$ git status</code>来查看是哪里出现了问题，然后 cd 进入该文件，直接将冲突部分删除即可解决问题。合并完成后再次执行 <code>$ git status</code>来查看问题是否解决。若问题解决，即可提交。</p></li><li><p>当已经使用了 <code>git add</code>指令暂存的版本又经过修改之后，需在再重新使用 <code>git add</code>指令将最新的修改放入暂存区，否则此时暂存区里只有上一次修改的内容</p></li><li><p><code>$ git commit</code>指令仅仅是将暂存区内的文件快照提交到本地仓库中，想要推送到远程仓库则还需要 push 操作，在 push 操作之前我们需要先 <code>$ git fetch</code>操作将远程仓库的需要合并的文件抓取到本地，然后进行合并，合并完成后使用 <code>$ git status</code>指令进行查看，没问题后再推送到远端。这里其实也可以使用 <code>$ git pull</code>来拉取远端分支的快照，但是这容易产生冲突，若产生冲突则可以找到产生冲突的文件，修改冲突部分再重新提交。提交完成后若想删掉远端工作分支，则可以使用 <code>$ git push origin --delete</code>指令。</p></li><li><p>当我们想删除本地暂存区中的内容，可以使用<code>$ git rm --cache 文件名</code>指令，当我们想删除工作区的某个文件可以使用 <code>$ git rm -f</code>。</p></li><li><p>当我们想要删除错误提交到本地仓库的 commit</p><ul><li><code>$ git reset --soft 版本库ID</code>仅仅撤销已经提交的版本库，不会修改暂存区和工作区</li><li><code>$ git reset --mixed 版本库ID</code>仅仅撤销提交到版本库和暂存区的内容，不会修改工作区的内容</li><li><code>$ git reset --hard 版本库ID</code>将工作区，暂存区，和版本库记录恢复到指定版本。</li></ul></li><li><p><code>$ git stash branch</code>如果使用 stash 储藏了一些工作，然后继续在储藏的分支上工作，在重新应用 stash 储藏的文件工作时可能会有问题。 如果应用尝试修改刚刚储藏的修改的文件，也就是两次同时修改了一个文件，你会得到一个合并冲突并不得不解决它。 如果想要一个轻松的方式来再次测试储藏的改动，可以运行 <code>git stash branch</code>创建一个新分支，检出储藏工作时所在的提交，重新在那应用工作，然后在应用成功后自动扔掉储藏。</p></li><li><p>可以使用 <code>$ git stash -all</code>来清除工作目录中所有冗余的未被跟踪的文件，并且他们会被存储在工作栈上，当你想要恢复时也可以使用 <code>$ git stash apply</code>恢复使用。</p></li><li><p>当在本地新创建一个分支时，需要先 push 到远端仓库，远端仓库才会有这个分支，否则会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">error: the requested upstream branch &apos;origin/f_tradeReverse&apos; does not exist</span><br><span class="line">hint:</span><br><span class="line">hint: If you are planning on basing your work on an upstream</span><br><span class="line">hint: branch that already exists at the remote, you may need to</span><br><span class="line">hint: run &quot;git fetch&quot; to retrieve it.</span><br><span class="line">hint:</span><br><span class="line">hint: If you are planning to push out a new local branch that</span><br><span class="line">hint: will track its remote counterpart, you may want to use</span><br><span class="line">hint: &quot;git push -u&quot; to set the upstream config as you push.</span><br><span class="line">$ git fetch</span><br><span class="line">$ git status</span><br><span class="line">On branch f_tradeReverse</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">$ git push</span><br><span class="line">fatal: The current branch f_tradeReverse has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin f_tradeReverse</span><br><span class="line"></span><br><span class="line">$  git push --set-upstream origin f_tradeReverse</span><br><span class="line">Username for &apos;https://git.ms.netease.com&apos;: shenglanya</span><br><span class="line">Password for &apos;https://shenglanya@git.ms.netease.com&apos;:</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote:</span><br><span class="line">remote: Create merge request for f_tradeReverse:</span><br><span class="line">remote:   https://git.ms.netease.com/preciousmetals/LDPMTrade/merge_requests/new?merge_request%5Bsource_branch%5D=f_tradeReverse</span><br><span class="line">remote:</span><br><span class="line">To https://git.ms.netease.com/preciousmetals/LDPMTrade.git</span><br><span class="line"> * [new branch]        f_tradeReverse -&gt; f_tradeReverse</span><br><span class="line">Branch &apos;f_tradeReverse&apos; set up to track remote branch &apos;f_tradeReverse&apos; from &apos;origin&apos;.</span><br></pre></td></tr></table></figure></li><li><p>git 拉取远程分支并且创建本地分支 <code>$ git checkout -b 本地分支名x origin/远程分支名x</code></p></li><li><p>如果写错名字，重命名远程为dev1。思路：删除远程分支、重命名本地分支、重新提交一个远程分支</p><p>1、git push –delete origin dev——删除远程分支</p><p>2、git branch -m dev dev1——重命名本地分支为dev1</p><p>3、git push origin dev1——重新推送远端仓库分支名称为dev1</p></li><li><p>如何删除本地的文件的修改？</p><ul><li>如果是删除已经暂存的文件，则直接使用 <code>$ git reset HEAD 文件名</code></li><li>如果是要删除未暂存的文件，使用 <code>$ git checkout --文件名</code>这样会使得这个文件去掉所有还未暂存的修改</li><li>如果删除未跟踪的文件，使用 <code>$ git clean -df</code></li><li>删除不想要的修改 <code>$ git stash &amp;&amp; $ git stash clear</code></li><li>删除本地分支 <code>$ git branch -D BranchName</code></li></ul></li><li><p>删除远端分支</p><ul><li>删除本地的远端分支 <code>$ git branch -r -D origin/BranchName</code></li><li>删除远端服务器的分支 <code>$ git push origin -d BranchName</code></li></ul></li><li><p>打 tag</p><ul><li>在本地打 tag ：<code>$ git tag 4.20.1</code></li><li>将 tag 推送到远端 ： <code>$ git push origin :4.20.1</code></li></ul></li><li><p>查看远端分支 <code>$ git branch -r</code></p></li><li><p>从远端拉取分支 <code>$ git checkout -b x origin/x</code></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>本次 Git 基础学习总结到现在就告一段落，文章由于时间，精力和自己本身能力原因并未能够完整的写完，留到日后的学习工作中当有时间和精力，以及对 Git 的使用更加了解后，将继续完善。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-基础&quot;&gt;&lt;a href=&quot;#Git-基础&quot; class=&quot;headerlink&quot; title=&quot;Git 基础&quot;&gt;&lt;/a&gt;Git 基础&lt;/h2&gt;&lt;h3 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基
      
    
    </summary>
    
      <category term="Web开发" scheme="http://blog.ozairs.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Git" scheme="http://blog.ozairs.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>How to network like a pro at social events</title>
    <link href="http://blog.ozairs.com/Jobs/How-to-network-like-a-pro-at-social-events/"/>
    <id>http://blog.ozairs.com/Jobs/How-to-network-like-a-pro-at-social-events/</id>
    <published>2019-02-05T02:45:31.000Z</published>
    <updated>2019-02-05T05:47:46.560Z</updated>
    
    <content type="html"><![CDATA[<p>With the Christmas party season just around the corner, now is the time to brush up on your <a href="https://findajob.blog/2018/02/05/you-cant-get-a-job-because-of-your-friends/" target="_blank" rel="noopener">networking</a> skills. Your <a href="https://youtu.be/Ht4QawYLpKI" target="_blank" rel="noopener">friends and family can help you network</a> and help in your job search, but you never know who you might meet at a BBQ, Christmas drinks, or extended family get-together. You don’t want to miss out on the perfect opportunity to land your next job. Here’s our top tips on how to network like a pro at social events.</p><p><img src="/Jobs/How-to-network-like-a-pro-at-social-events/1.jpg" alt=""></p><h2 id="Accept-invitations"><a href="#Accept-invitations" class="headerlink" title="Accept invitations"></a>Accept invitations</h2><p>This might sound obvious, but if you don’t get out there, you won’t meet people. Networking can be a numbers game. The more people you meet, the more chances you have of meeting someone who can help you find a new job. So say yes, yes, yes to those invitations!</p><h2 id="Introduce-yourself"><a href="#Introduce-yourself" class="headerlink" title="Introduce yourself"></a>Introduce yourself</h2><p>Everyone has contacts – don’t forget to introduce yourself to everyone you meet. To feel more confident, it helps to have an introduction and some <a href="https://www.indeed.com/career-advice/finding-a-job/icebreaker-questions-to-use-when-meeting-new-people" target="_blank" rel="noopener">ice-breaker questions</a> ready to go. It doesn’t have to be a formal party for you to use these, any gathering where there are a group of people is the prime opportunity to connect. You could be at a game of backyard cricket, watching your kids play sport, or just enjoying a BBQ with mates.</p><p>While it’s great to introduce yourself to everyone you meet, this doesn’t mean hassling everyone at a party to give you a job. Networking is about building relationships – these may or may not lead a job offer but they can have many other <a href="https://www.michaelpage.com.au/advice/career-advice/career-progression/benefits-networking" target="_blank" rel="noopener">benefits</a>. Be conversational and genuinely interested in what other people have to say. Avoid constantly talking about yourself and don’t just talk about how badly you need a job.</p><h2 id="Dress-to-impress"><a href="#Dress-to-impress" class="headerlink" title="Dress to impress"></a>Dress to impress</h2><p>If you are looking to professionally network at Christmas parties, it is important to dress well. You want people to remember you for the right reasons. If you dress well, ask questions, listen well and speak confidently to people you meet, you will leave a good impression. If you’re chatting to someone and the conversation veers towards your career, make sure you have your <a href="https://findajob.blog/2018/11/05/6-steps-to-a-killer-elevator-pitch/" target="_blank" rel="noopener">elevator pitch</a> ready to go.</p><p>Remember, if you are using social events to network to find a job, you need to act professionally at all times. Don’t go heavy on the alcohol and act like you would at a formal networking event.</p><h2 id="Take-notes-about-the-people-you-meet"><a href="#Take-notes-about-the-people-you-meet" class="headerlink" title="Take notes about the people you meet"></a>Take notes about the people you meet</h2><p>Take notes of people who you think could be a good contact or who offer you help. Get their LinkedIn contact details, business card or email address. Jot down something about your conversation as it will help jog your memory later.</p><h2 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h2><p>Make sure you follow up with anyone you connect with. <a href="https://youtu.be/WlNWXRBD2Sk" target="_blank" rel="noopener">Integrity</a> is a key attribute people look for when networking or hiring. If you say you’re going to contact someone, do it. Otherwise, you’ll undo all the hard work you did when you first met the person. Follow up with an email, LinkedIn message or phone call.</p><h2 id="Stay-positive"><a href="#Stay-positive" class="headerlink" title="Stay positive"></a>Stay positive</h2><p>If you’ve been looking for work for awhile, it can be hard to remain positive. Being social might be the last thing you feel like doing, but going to different events can be a surprising way to meet people and build professional networks. Networking can also be a fun way to boost your job search, and beats sitting in front of the computer all day.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;With the Christmas party season just around the corner, now is the time to brush up on your &lt;a href=&quot;https://findajob.blog/2018/02/05/you
      
    
    </summary>
    
      <category term="Jobs" scheme="http://blog.ozairs.com/categories/Jobs/"/>
    
    
      <category term="Australia" scheme="http://blog.ozairs.com/tags/Australia/"/>
    
  </entry>
  
  <entry>
    <title>Top 10 job interview questions and how to answer them</title>
    <link href="http://blog.ozairs.com/Jobs/Top-10-job-interview-questions-and-how-to-answer-them/"/>
    <id>http://blog.ozairs.com/Jobs/Top-10-job-interview-questions-and-how-to-answer-them/</id>
    <published>2019-02-05T02:27:07.000Z</published>
    <updated>2019-02-05T06:37:13.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Top-10-job-interview-questions-and-how-to-answer-them"><a href="#Top-10-job-interview-questions-and-how-to-answer-them" class="headerlink" title="Top 10 job interview questions and how to answer them"></a>Top 10 job interview questions and how to answer them</h1><p>If you’ve got an interview coming up there’s a good chance you’ll be asked at least one of these top 10 job interview questions. Don’t get nervous, we’ve got you covered.</p><h2 id="How-to-answer-the-top-10-job-interview-questions"><a href="#How-to-answer-the-top-10-job-interview-questions" class="headerlink" title="How to answer the top 10 job interview questions"></a>How to answer the top 10 job interview questions</h2><p>The key to a successful job interview to think about what an employer might ask you, and prepare some answers.</p><p><img src="/Jobs/Top-10-job-interview-questions-and-how-to-answer-them/1.jpg" alt=""></p><p>Here’s some good and bad examples of how to answer the top 10 job interview questions.</p><h3 id="1-Tell-me-about-yourself"><a href="#1-Tell-me-about-yourself" class="headerlink" title="1. Tell me about yourself"></a>1. Tell me about yourself</h3><p>Employers ask this to see how you’ll fit in. They already have a copy of your resume, so you don’t need to go over everything on it. Give a quick summary of your key qualities, skills, experience and goals. Some people call this an <a href="https://www.seek.com.au/career-advice/the-30-second-elevator-pitch" target="_blank" rel="noopener">elevator pitch</a>.</p><p><strong>Good:</strong> “I am passionate about giving customers excellent services and experiences. My background is in hotels and restaurants, where I learnt the power of hard work and enthusiasm. I want to shift my focus and take on opportunities in tourism management.”</p><p><strong>Bad:</strong> Don’t tell your interviewer what you did on the weekend or your favourite TV show (unless it’s actually relevant to the job).</p><h3 id="2-What-are-your-strengths"><a href="#2-What-are-your-strengths" class="headerlink" title="2. What are your strengths?"></a>2. What are your strengths?</h3><p>This is a great opportunity to sell yourself, but you need to give examples.</p><p><strong>Good:</strong> “I’m a great project manager. In my last job as a chef my role expanded to ordering food for the kitchen. As a result, the kitchen no longer ran out of food before the end of a shift and customer numbers increased by 30 per cent.”</p><p><strong>Bad:</strong> Don’t give an answer that you can’t back up. Anyone can say they’re hard working. You need to explain how and why.</p><h3 id="3-What-are-your-weaknesses"><a href="#3-What-are-your-weaknesses" class="headerlink" title="3. What are your weaknesses?"></a>3. What are your weaknesses?</h3><p>Don’t be afraid of this question. The ability to identify a weakness is actually a strength! But, you need to say what you have done or plan to do to fix any weakness.</p><p><strong>Good:</strong> “I don’t have experience using spreadsheets in the workplace. But I asked a friend to show me the basics, and I am doing a course online to learn more.”</p><p><strong>Bad:</strong> Don’t say you don’t have any weaknesses. It will make you sound like you lack self-awareness. “I work too hard” won’t cut it either.</p><p><strong><em>Bonus tip:</em></strong> Don’t list a weakness that is a key part of the job you’re interviewing for. Don’t say you can’t spell if you’re trying to get a job as a writer. Don’t say you are bad at talking to people if you’re trying to get a sales job.</p><h3 id="4-Why-do-you-want-to-work-here"><a href="#4-Why-do-you-want-to-work-here" class="headerlink" title="4. Why do you want to work here?"></a>4. Why do you want to work here?</h3><p>An employer wants to know if you’re really interested in the job or if you just want a paycheck. Do some research on the company. Talk about the products or services they sell and why you like them.</p><p><strong>Good:</strong> “I know you recently won an award for your new recyclable coffee cups. I’m passionate about the environment and I want to work for a company that reflects my values.”</p><p><strong>Bad:</strong> Don’t say that you just want a job.</p><h3 id="5-Why-should-we-hire-you"><a href="#5-Why-should-we-hire-you" class="headerlink" title="5. Why should we hire you?"></a>5. Why should we hire you?</h3><p>Employers want to know why you’re a perfect fit for the job. Tell them how hiring you will help solve their problems. If you’ve done your research you can work out what these problems are.</p><p><strong>Good:</strong> You found out the company has opened five new stores in your city, and is hiring a lot of new staff. Tell them you were responsible for training new staff in your last job and have skills in this area.</p><p><strong>Bad:</strong> Don’t just say you’d be an asset to the team. Explain why.</p><h3 id="5-What-has-been-your-biggest-achievement-at-work"><a href="#5-What-has-been-your-biggest-achievement-at-work" class="headerlink" title="5. What has been your biggest achievement at work?"></a>5. What has been your biggest achievement at work?</h3><p>Talk about an achievement you’re proud of that relates to the job. Use examples from study or your personal life if you don’t have a work one.</p><p><strong>Good:</strong> If the job ad you responded to said you need to be a hard worker; you might say: “At my old job at a fast food restaurant I got an award for serving the most customers in a month.”</p><p><strong>Bad:</strong> Don’t say that you don’t have any achievements!</p><h3 id="6-What-has-been-your-biggest-obstacle-or-problem-at-work-and-how-have-you-overcome-it"><a href="#6-What-has-been-your-biggest-obstacle-or-problem-at-work-and-how-have-you-overcome-it" class="headerlink" title="6. What has been your biggest obstacle or problem at work and how have you overcome it?"></a>6. What has been your biggest obstacle or problem at work and how have you overcome it?</h3><p>Use an example that relates to the job you’re going for.</p><p><strong>Good:</strong> A customer at the record store you worked at was not happy the store had sold out of a new album and was threatening to buy it online. You solved it by asking the manager to order extra copies, and suggested that in future the manager could order extra stock of the store’s top five releases.</p><p><strong>Bad:</strong> Don’t say that you’ve never had an obstacle. Everybody has.</p><h3 id="7-Where-do-you-see-yourself-in-five-years"><a href="#7-Where-do-you-see-yourself-in-five-years" class="headerlink" title="7. Where do you see yourself in five years?"></a>7. Where do you see yourself in five years?</h3><p>Employers want to know how the <a href="http://lmip.gov.au/PortalFile.axd?FieldID=2795683&amp;.pdf" target="_blank" rel="noopener">job lines up with your ambitions and values</a>, and whether you’re likely to stick around or leave after a few months. If you’re not sure what the future holds, that’s OK – you can say the position will help you decide.</p><p><strong>Good:</strong> For a sales position, you could say, “Within two years I would like to be seen as an expert in customer management and have increased my average monthly sales by 50 per cent.”</p><p><strong>Bad:</strong> Don’t say that you don’t know. And don’t go in the other direction and something unrealistic like you want to be company CEO.</p><h3 id="8-Why-do-you-want-to-leave-your-current-job-Why-did-you-leave-your-last-job"><a href="#8-Why-do-you-want-to-leave-your-current-job-Why-did-you-leave-your-last-job" class="headerlink" title="8. Why do you want to leave your current job / Why did you leave your last job?"></a>8. Why do you want to leave your current job / Why did you leave your last job?</h3><p>Regardless of the actual reason you left, NEVER badmouth your last employer. Think of a way to be diplomatic about why you left.</p><p><strong>Good:</strong> “My company was cutting back and my position changed in a way that didn’t match my goals” or “I’m looking for a new challenge and to grow my career”.</p><p><strong>Bad:</strong> “The hours were terrible, they didn’t pay me enough, I hated it.”</p><h3 id="9-What-are-your-salary-expectations"><a href="#9-What-are-your-salary-expectations" class="headerlink" title="9. What are your salary expectations?"></a>9. What are your salary expectations?</h3><p>Most jobs will specify a salary range in the advertisement. If you’re feeling bold, aim for the top! But note that it’s generally not a good idea to discuss salary at the first interview, unless the employer raises it first.</p><p><strong>Good:</strong> “Your ad said the salary range for this job was between $45,000 and $55,000. Based on my experience and qualifications I expect a salary at the top end of your range.” An employer might want a specific answer. Do your research and find out what other <a href="http://joboutlook.gov.au/" target="_blank" rel="noopener">people get paid to do the job</a>.</p><p><strong>Bad:</strong> Don’t ask for a salary that’s too high (you might price yourself out of the job) or too low (you need to be able to buy groceries every week!)</p><h3 id="10-Do-you-have-any-questions"><a href="#10-Do-you-have-any-questions" class="headerlink" title="10. Do you have any questions?"></a>10. Do you have any questions?</h3><p>This is a great opportunity to impress an employer. An interview is a two-way street and a good chance to see if you like the organisation, too. Think of a few questions beforehand, and try to come up with a question based on something said during the interview also.</p><p><strong>Good:</strong> You’re being interviewed for a job at a bike hire shop. When you checked out the store’s website you noticed the page to hire bikes was broken. Ask if this is being repaired or improved.</p><p><strong>Bad:</strong> Don’t say that you don’t have any questions. You won’t seem interested in the job.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Top-10-job-interview-questions-and-how-to-answer-them&quot;&gt;&lt;a href=&quot;#Top-10-job-interview-questions-and-how-to-answer-them&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="Jobs" scheme="http://blog.ozairs.com/categories/Jobs/"/>
    
    
      <category term="Australia" scheme="http://blog.ozairs.com/tags/Australia/"/>
    
  </entry>
  
  <entry>
    <title>Tips to help you get a job</title>
    <link href="http://blog.ozairs.com/Jobs/Tips-to-help-you-get-a-job/"/>
    <id>http://blog.ozairs.com/Jobs/Tips-to-help-you-get-a-job/</id>
    <published>2019-02-05T02:02:59.000Z</published>
    <updated>2019-02-05T05:08:13.456Z</updated>
    
    <content type="html"><![CDATA[<p>It’s New Year’s Day 2019, it’s 38 degrees and I am lying in the river with some of my best friends talking about what lies ahead for 2019.</p><p>Janet, who’s a bit of a procrastinator, says <em>“This is the year of 100 for me. I am going to swim 100 kilometres this year. I am going to clean all the clutter from my apartment in the first 100 days. I’m going to save an extra $100 a month.”</em></p><p>Janet took things she thought were insurmountable and broke them into simple goals. She didn’t make general New Year resolutions like getting fit, losing weight, cleaning up her house. Janet made her goals clear. She broke them down into things she could do and show she had done.</p><p>It got us all talking about goals and how to achieve them. Just like The White Stripes song <a href="https://youtu.be/oOS00ttAblQ" target="_blank" rel="noopener">Little Acorns</a>, it’s important to break down your goals into bite-size chunks. Like a squirrel putting away acorns for the winter, you do it one acorn at a time.</p><p><img src="/Jobs/Tips-to-help-you-get-a-job/1.jpg" alt=""></p><h2 id="How-to-get-a-job-in-2019"><a href="#How-to-get-a-job-in-2019" class="headerlink" title="How to get a job in 2019?"></a>How to get a job in 2019?</h2><p>The first thing to do is break down your job search into bite-size chunks and set goals to achieve them. Here’s some job search tips to get you going.</p><h2 id="1-Freshen-up-your-resume"><a href="#1-Freshen-up-your-resume" class="headerlink" title="1. Freshen up your resume"></a>1. Freshen up your resume</h2><p>Start the year with a fresh resume. Make sure it’s up to date and includes any voluntary work you’ve been doing over the break. Don’t forget any holiday <a href="https://findajob.blog/2018/11/12/3-reasons-christmas-casual-jobs-rock/" target="_blank" rel="noopener">casual work</a>. It’s also time to rewrite your About Me section. There’s some great tips on <a href="https://jobsearch.gov.au/jobsearchtips" target="_blank" rel="noopener">jobactive.gov.au</a> if you need some examples. Why not create a range of different resumes for different jobs? Create 5 resumes in 5 days.</p><h2 id="2-Make-a-list-of-businesses-to-cold-call"><a href="#2-Make-a-list-of-businesses-to-cold-call" class="headerlink" title="2. Make a list of businesses to cold call"></a>2. Make a list of businesses to cold call</h2><p>One-in-three jobs aren’t advertised at all. The best way to get your foot in the door is to cold call places you’d like to work in your suburb or town. Take a walk this week and spot the places you’d like to work. Make a list of 10 places and contact them all in 10 days. You could have a job before the end of January! There’s some great tips on <a href="https://youtu.be/HIt0ZdvIYT0" target="_blank" rel="noopener">youtube.com/jobactivejobs</a>to build your confidence to cold call places.</p><p><img src="/Jobs/Tips-to-help-you-get-a-job/2.jpg" alt=""></p><h2 id="3-Pick-a-job-that’s-ripe-for-you"><a href="#3-Pick-a-job-that’s-ripe-for-you" class="headerlink" title="3. Pick a job that’s ripe for you"></a>3. Pick a job that’s ripe for you</h2><p>It’s peak fruit picking season, that means lots of fruit and vegetable picking jobs right across Australia. You could have a job in less than 5 days with harvest work. If you have never considered it, you could have regular work right now. Remember, picking fruit is a great stepping stone to a great job. It shows other employers you’re reliable and a hard worker. Just hit the <a href="https://jobsearch.gov.au/harvest" target="_blank" rel="noopener"><em>Search</em> button on this page</a> to see all the fruit and vegie jobs – or <a href="https://findajob.blog/2018/12/10/pick-fruit-and-vegies-land-a-job-right-now/" target="_blank" rel="noopener">read more about it</a>. You could apply for a harvest job today and be picking next week!</p><h2 id="4-Find-out-where-the-most-jobs-are"><a href="#4-Find-out-where-the-most-jobs-are" class="headerlink" title="4. Find out where the most jobs are"></a>4. Find out where the most jobs are</h2><p>Some industries are booming. Australia is going through an <a href="https://www.afr.com/news/economy/australias-next-boom-has-barely-started-20170922-gympx4" target="_blank" rel="noopener">infrastructure boom</a>. New schools are going up. New roads being built. There’s a new <a href="https://inlandrail.artc.com.au/" target="_blank" rel="noopener">railway line being built inland</a>. The health industry is also going crazy with enormous <a href="https://www.news.com.au/finance/work/careers/australias-health-care-sector-job-numbers-rising-for/news-story/012dade8fb0843701ade4755e169a0a6" target="_blank" rel="noopener">demand for carers</a>. One of the best ways to get a job is to apply for jobs in industries that are going gangbusters. The Labour Market Information Portal may sound boring but it will tell you where the best places are to get a job. Take a look at the <a href="http://lmip.gov.au/default.aspx?LMIP/GainInsights/EmploymentProjections" target="_blank" rel="noopener">Industry Employment Projections Report</a> and pick 5 industries to focus your job search on. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s New Year’s Day 2019, it’s 38 degrees and I am lying in the river with some of my best friends talking about what lies ahead for 2019
      
    
    </summary>
    
      <category term="Jobs" scheme="http://blog.ozairs.com/categories/Jobs/"/>
    
    
      <category term="Australia" scheme="http://blog.ozairs.com/tags/Australia/"/>
    
  </entry>
  
  <entry>
    <title>HEXO主题配置</title>
    <link href="http://blog.ozairs.com/Web%E5%BC%80%E5%8F%91/HEXO%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.ozairs.com/Web开发/HEXO主题配置/</id>
    <published>2019-02-03T02:54:06.000Z</published>
    <updated>2019-02-03T06:22:56.520Z</updated>
    
    <content type="html"><![CDATA[<iframe src="https://player.bilibili.com/player.html?aid=39808252&amp;cid=69927899&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="box-sizing: inherit; margin: 1em 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 15px; vertical-align: baseline; position: absolute; width: 656px; height: 492px; left: 0px; top: 0px;"></iframe><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td></td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code>设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容。</td><td><code>source</code></td></tr><tr><td><code>public_dir</code></td><td>公共文件夹，这个文件夹用于存放生成的站点文件。</td><td><code>public</code></td></tr><tr><td><code>tag_dir</code></td><td>标签文件夹</td><td><code>tags</code></td></tr><tr><td><code>archive_dir</code></td><td>归档文件夹</td><td><code>archives</code></td></tr><tr><td><code>category_dir</code></td><td>分类文件夹</td><td><code>categories</code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td>国际化（i18n）文件夹</td><td><code>:lang</code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">glob 表达式</a>来匹配路径。</td></tr></tbody></table><blockquote><p>提示</p><p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p></blockquote><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td>false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td>true</td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 <a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">Asset 文件夹</a></td><td>false</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td>true</td></tr><tr><td><code>highlight</code></td><td>代码块的设置</td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td><code>uncategorized</code></td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td></tr></tbody></table><h2 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h2><p>Hexo 使用 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD</code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>H:mm:ss</code></td></tr></tbody></table><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td><code>10</code></td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td><code>deploy</code></td><td>部署部分的设置</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;https://player.bilibili.com/player.html?aid=39808252&amp;amp;cid=69927899&amp;amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; fr
      
    
    </summary>
    
      <category term="Web开发" scheme="http://blog.ozairs.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Hexo" scheme="http://blog.ozairs.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>MacOS安装使用Node.js</title>
    <link href="http://blog.ozairs.com/Web%E5%BC%80%E5%8F%91/MacOS%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Node-js/"/>
    <id>http://blog.ozairs.com/Web开发/MacOS安装使用Node-js/</id>
    <published>2019-02-02T10:43:45.000Z</published>
    <updated>2019-02-02T13:46:32.849Z</updated>
    
    <content type="html"><![CDATA[<p>\1. 到官网<a href="https://nodejs.org/zh-cn/download/下载，选择Macintosh" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/下载，选择Macintosh</a> Installer, 如下：</p><p>\2. 按预设的下一步，Node.js版本为v6.10.0, NPM版本为v3.10.10</p><p>\3. 过程可能要输入用户密码</p><p>\4. 安装成功如下：</p><p>\5. 用终端验证是否成功安装, 输入 node -v</p><p>\6. console.log(1+2), 得到结果3</p><p>\7. 我Mac的Eclipse不支援EcmaScript 6, 例如 let 等ES6的关键子在Eclipse都验证不过去。</p><p>大概Google下了，找到一个JavaScript支援很不错的IDE，网址如下：</p><p><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">https://www.jetbrains.com/webstorm/</a></p><p>下载完，create一个工程，然后新增一个JavaScript文件：</p><p>\8. 将hello_weekend配置为Node.js来debug</p><p>\9. Node interpreter设置为Node.js的安装路径</p><p>\10.  Script如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by prolink on 17/3/19.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">var server =  http.createServer(function (req, res) &#123;</span><br><span class="line">    res.writeHead(200);</span><br><span class="line">    res.end(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8088);</span><br></pre></td></tr></table></figure><p>\11. 这个http返回Hello World，并在该行鼠标左键点击设置断点</p><p>\12. debug该文件</p><p>\13. 成功启动之后看到Console有相关的资讯</p><p>\14. Chrome浏览器输入 <a href="http://localhost:8088/，" target="_blank" rel="noopener">http://localhost:8088/，</a> 可以看到已经命中断点 ，在Console中可以改变变量的值，例如在这里不返回Hello World了，改成返回Hello Weekend，如下图，输入完之后按回车，可以看到true </p><p>\15. 看看浏览器得到的就是刚才debug时候重设的值  </p><p>\16. 如果仅仅做到这步，WebStorm还不支援ECMAScript 6，打开 Preferences -&gt; Languages &amp; Franeworks -&gt; JavaScript, 如下图将预设的ECMAScript 5.1改为ECMAScript 6</p><p> \17. ES6毕竟是2015年才发布的，形容性并不好，为了让您编写的ES6的程式码可以有更好的相容性，可以用Babel file watcher来监视并自动转码ES5.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prolinkdeMacBook-Pro:milo_demo prolink$ sudo npm install -g babel-cli</span><br><span class="line">prolinkdeMacBook-Pro:milo_demo prolink$ cd /Users/prolink/WebstormProjects/milo_demo</span><br></pre></td></tr></table></figure><p>按上一步进入工程目录之后，安装babel-preset-env, 参考 <a href="https://babeljs.io/docs/plugins/preset-env/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/preset-env/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure><p>\18. 打开 Preferences -&gt; Tools -&gt; File Watchers, 添加Bable, 如下： </p><p>如果安装一切顺利，当您编辑JS文件时候，会自动在工程目录中同步编译到dist目录中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;\1. 到官网&lt;a href=&quot;https://nodejs.org/zh-cn/download/下载，选择Macintosh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/zh-cn/download/下载，选择M
      
    
    </summary>
    
      <category term="Web开发" scheme="http://blog.ozairs.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Node.js" scheme="http://blog.ozairs.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>澳洲高考制度简介(HSC/VCE/ATAR/UAC/VTAC)</title>
    <link href="http://blog.ozairs.com/%E6%B1%82%E5%AD%A6/%E6%BE%B3%E6%B4%B2%E9%AB%98%E8%80%83%E5%88%B6%E5%BA%A6%E7%AE%80%E4%BB%8B-HSC-VCE-ATAR-UAC-VTAC/"/>
    <id>http://blog.ozairs.com/求学/澳洲高考制度简介-HSC-VCE-ATAR-UAC-VTAC/</id>
    <published>2019-02-02T07:29:32.000Z</published>
    <updated>2019-02-02T10:36:06.811Z</updated>
    
    <content type="html"><![CDATA[<p>在澳洲, 国际学生和本地学生一样，在完成各州规定的高中课程后，在12年级(高三），所有的学生都必须参加州政府组织的毕业考试，通过考试的学生便获得各州颁发的高中毕业证书。 澳洲高考是在<strong>每年的10月份</strong>。</p><p><img src="/求学/澳洲高考制度简介-HSC-VCE-ATAR-UAC-VTAC/1.jpeg" alt=""></p><p>澳洲高中对学生学业的评分标准非常灵活，<strong>平时成绩占很大比例</strong>，中学生必须认真对待平时的每一次考试和作业。这样的学业考评标准不仅让学生打下扎实的基础，同时也避免了一次考试定终身的不合理现象。</p><h2 id="各州高中毕业考试名称"><a href="#各州高中毕业考试名称" class="headerlink" title="各州高中毕业考试名称"></a>各州高中毕业考试名称</h2><ul><li>新南威尔士州(NSW)：高中毕业证书(HSC)（Higher School Certificate）</li><li>澳大利亚首都地区(ACT)：ACT12年级证书（ACT Year 12 Certificate)</li><li>维多利亚州(VIC)： 维多利亚州高中毕业证书(VCE)（Victorian Certificate of Education)</li><li>北部地区(NT)： 北部地区教育证书(NTCE)（Northern territory Certificate of Education)</li><li>昆士兰州(QLD)： 高中毕业证书（Senior Certificate)</li><li>南澳大利亚州(SA)： 南澳大利亚州高中毕业证书(SACE)（South Australian Certificate of Education)</li><li>塔斯马尼亚州(TAS)： 塔斯马尼亚州高中毕业证书(TCE)（Tasmanian Certificate of Education)</li><li>西澳大利亚州(WA)： 西澳大利亚州高中毕业证书（WA Certificate of Education）</li></ul><p>虽然称呼不同，但是性质都相当于中国的高考。</p><h2 id="各州高中考试-amp-平时成绩比例划分"><a href="#各州高中考试-amp-平时成绩比例划分" class="headerlink" title="各州高中考试&amp;平时成绩比例划分"></a>各州高中考试&amp;平时成绩比例划分</h2><p>和中国不同的是，高考成绩并不是决定高中毕业生升学的唯一标准，通常，这一成绩只占总成绩的一部分，另一部分成绩来自于学生的平时成绩，主要是11年级和12年级的成绩。</p><p><strong>各州高考评分比例</strong></p><p>地区 / 平时成绩 / 州会考</p><p>新州 / 50% / 50%</p><p>维州 / 30% / 70%</p><p>南澳州 / 50% / 50%</p><p>昆士兰州 / 100% / 0%</p><p>首都地区 / 100% / 0%</p><p>塔斯马尼亚州 / 100% / 0%</p><p><strong>以维多利亚州高中毕业的VCE考试为例</strong></p><p>VCE是澳大利亚维多利亚州的高中毕业考试，全称Victoria Certificate of Education。这是颁发给顺利完成维多利亚州大学预科课程(高中)学生的毕业证书。维多利亚州高考课程评估当局(VCAA)对学生考试成绩进行审核和评估，合格者颁发VCE 证书。</p><p>VCE课程在十一年级和十二年级开设，相当于中国的高二和高三年级，但可以用三年完成，也可以提前一年申请学习，它的课程设置既有我们熟知的数学(根据难易程度分设多种数学课程)、历史、劳技、外语、生物、地理、物理、政治、体育、信息技术等课程，更多的是国内高中未开设的如经济、会计、设计技术、食物科技、心理、环境科学、文学、戏剧、健康和人类发展等更多的适合学生多种兴趣发展的课程，为完成VCE课程，学生必须通过四单元的英语(共有4种选择，English ESL, English, English Languague, English Literature，从简单到难，可以同时选择English和English Literature) 和另外任意5门学科。除英语外VCE并没有任何必修科目。</p><p><strong>课程概况</strong></p><p>VCE目前共有129门学科供学生选择，但是大多数学校开设的课程为40~60门左右。如果没有足够的学生选择一门课程学校出于经济和课表安排考虑是不会提供该门学科。VCE学科从英语、数学、科学、人文、体育、外语都包括，学生可以选择多达40门的外语。英语如前文所讲提供4种选择。英语第二语言English ESL是为照顾移民和海外留学生提供, 需要资格鉴定(Qualification of Second Languague Status, 条件是在英语国家里学习时间不能超过5年, 一般学校会帮助留学生完成)。英语(English或English Mainstream)是最多人学习的, 有75%的学生选择. English Languague稍难, English Literature是最难的英语课程。如果学生有兴趣的话可以选择English ESL/English加English Literature. 数学也提供3种选择, 最基本的General Mathematics B - Furthur Mathematics主要是基本的实用性数学; 稍难的主要讲述微积分的4单元Mathematics Methods是大学商科, 科学和工程学入学必修; 最难的高级微积分的General<br>Mathematics A - Specialist Mathematics是大学精算学, 工程学入学必修课, 学习Specialist<br>Mathematics的同时必须学习Mathematics Methods. 学生可以选择2门数学, 这也是中国留学生通常的选择。</p><p><strong>VCE评分</strong></p><p>VCE评分由维多利亚州高考课程评估当局VCAA管理. 学生只要学习完成英语和任意4门VCE课程并且拿到满意(Satisfactory)就可以拿到VCE证书. 如果学生希望接受大学教育则需要更加繁琐的评分。</p><p><strong>VCE评分系统</strong></p><p>VCE是一个使用标准分的系统，每门科目学习分数(Study Score)满分是50分，平均分是30。50%的学生会拿到30以上的分数，最好的8%拿到40分以上，最好的2%拿到45分以上(6%拿到40-45分)。</p><p>为了照顾各个学科有难易程度，学习人数和有效范围，VCE有一个加减分系统(Scaling)，目的是确保25的英语难易度和25分的其他课程难易度是一样的。拿数学为例，最难的Specialist<br> Mathematics下学生的最终分数(Score after Scaling)会比学习分数高10分左右(通常说这门课加10分)，Specialist Mathematics和拉丁语是仅有的两门最终分数满分是55的学科(高级中文第二语言满分是53分)。简单一点的Methematics Methods是加5分，而最简单的Furthur<br>Mathematics是减5分。3种中文都是加分课程。有效范围也是加分影响之一，例如物理和化学的难度系数是一样的，但是由于医科全部要求化学而科学和工程都是化学物理任选，所以化学的有效范围高于物理, 化学通常加分比物理高1分。小语种和学习人数很少的学科都是加5分。所有学科如果拿到50分的学习分数(Perfect Study Score，通过在最终考试中考满分拿到)都是不减分的，Specialist Mathematics、拉丁语和高级中文第二语言会分别加到55，55，53。</p><p>在加减分评估之后学生会拿到至少5个VCE分数。通常情况下英语和其他3门最高分数的科目算作主4门(Primary 4)，其他的科目算作加分科目(Incremental Subjects)。虽然VCE并不限制学生学习数量，但是最多2门科目可以算进加分科目，系统会自动选取最高的两门。VCE总分是主4门的成绩之和加上加分科目成绩的10%。举个例子：若学生成绩为42、52、48、44、40、27、24、最低分24舍去, 总分是42+52+48+44+(40+27)*0.1=192.7。理论上VCE最高满分是223分(学习Specialist Mathemactis、拉丁语、中文第二语言、英语、Mathematics Methods和任意一门)。</p><p>在特殊情况主4门不会选择学生最高分数的科目。特殊情况是学生报考的大学需要特定VCE科目成绩, 则该VCE科目自动列入主4门. 例如如果报考医学，算分的时候无论化学和Specialist Maths多少分都会被计入主4门.</p><p>算出VCE总分之后需要比对学生成绩，算出ENTER(Equivalent National Tertiary Entrance<br>Rankings，标准国家大学入学排名)。分数在99.95-0.00之间，以0.05进位。每0.05大约有20个学生。如果拿到90.00的ENTER，说明此学生的VCE总分是最高的10%。99.95表明此学生是VCE最高的0.05%的学生。99.95的ENTER也被称作完美ENTER(Perfect ENTER Score)。低于30的分数都以低于30发表(Less than 30)，实际分数不予公布。</p><p>VCE的学习有校外考试(Final Exams)和校内考试(通常是School Assessed Coursework, SAC)。校外考试包括正式的学科考试和通常能力测试(General Achievment Test, GAT, 通常只有12年纪学生参加，如果11年纪学生学习了VCE 3/4单元课程也要参加)。通常能力测试主要用来评估学校之间的差距，不影响学生个人分数。校内考试通常由任课老师出题，如果有多名任课老师则一起合作出题或一人出题确保公平。虽然校内考试和校外考试都计入总分，校内考试主要用来排名，校外考试则确定分数。例如一个班级，在校外考试考出48、46、44的成绩。学生甲在校外考试和校内考试都是第一名，他会拿到48的学习分数。学生乙在校外考试第2名，校内考试第3名，学生丙在校外考试第3名，校内考试第2名。如果该学科的校外考试和校内考试比重一样的话学生乙和学生丙都是第二名，拿到45的平均分。如果该学科侧重校外考试的话学生乙拿到46分，学生丙拿到44分。</p><p>VCE是享有盛誉的高中文凭，澳大利亚其它州和海外的学校都认可该成绩，(IB课程只是少数人选修)。维多利亚州的VCE学生人数占所有高中在校学生的99.5%。</p><p><strong>总结：</strong></p><p>在澳大利亚，除了昆士兰州以外，考试成绩通常为百分等级 Percentile Ranking, 满分为100，中间间隔0.05。各州对于成绩排名的称呼也不同，虽然叫法不一样，但反映的学生水平是相同的。</p><p>澳大利亚高考是由各州举行。 考分进行加权计算，得出每个考生的全国通用分数，称为ATAR，是各大学的录取标准。<strong>ATAR是Australian Tertiary Admission Rank 其实就是学生最后的“高考成绩”，各个大学所谓的分数线就是指学生的ATAR分。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在澳洲, 国际学生和本地学生一样，在完成各州规定的高中课程后，在12年级(高三），所有的学生都必须参加州政府组织的毕业考试，通过考试的学生便获得各州颁发的高中毕业证书。 澳洲高考是在&lt;strong&gt;每年的10月份&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/求学
      
    
    </summary>
    
      <category term="求学" scheme="http://blog.ozairs.com/categories/%E6%B1%82%E5%AD%A6/"/>
    
    
      <category term="高考" scheme="http://blog.ozairs.com/tags/%E9%AB%98%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>谁来拯救你，我的ATAR！</title>
    <link href="http://blog.ozairs.com/%E6%B1%82%E5%AD%A6/%E8%B0%81%E6%9D%A5%E6%8B%AF%E6%95%91%E4%BD%A0%EF%BC%8C%E6%88%91%E7%9A%84ATAR%EF%BC%81/"/>
    <id>http://blog.ozairs.com/求学/谁来拯救你，我的ATAR！/</id>
    <published>2019-02-02T06:31:26.000Z</published>
    <updated>2019-02-02T09:40:15.023Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>“在澳洲读高中，上大学是不是so easy？？？”</strong></p></blockquote><p>其实国内许多人都认为，在国外无论是读高中还是上大学都“很轻松”。</p><p>有的人说神马高中放学早，功课少，数学很简单；又有人说，国外大学宽进严出，留学生随便混混都能上名校——俨然勾勒出一幅在充斥着自由与民主气息的土地上接受教育，不时地和当地人进行思维与文化冲撞的安然画面……</p><p><img src="/求学/谁来拯救你，我的ATAR！/1.jpg" alt=""></p><p>However, 留学生们学习有多辛苦你造吗？</p><p><strong>澳洲高中才不会只用Exam衡量学生呢！</strong></p><p>因为除了所谓的“期中”“期末”Exam——还有quiz，test，essay，paper，assignment，individual project，group project，presentation，lab，report, attendance！每天背着又沉又重的书包上下学，忙的时候4点下课写作业自习至凌晨！负担多到爆有木有！另外对于Year11的学生，部分科目的平时成绩还会记入HSC成绩，这让他们哪里还敢随便浪。</p><p><img src="/求学/谁来拯救你，我的ATAR！/2.jpg" alt=""></p><p>最重要的是——**</p><p><strong>好的HSC成绩不代表一定有好的ATAR分数，</strong></p><p><strong>你知道你的ATAR成绩对你上大学有多重要么？</strong></p><h2 id="怎么才能考上好大学？ATAR成绩是关键！"><a href="#怎么才能考上好大学？ATAR成绩是关键！" class="headerlink" title="怎么才能考上好大学？ATAR成绩是关键！"></a><strong>怎么才能考上好大学？ATAR成绩是关键！</strong></h2><p>对于澳洲的高中生来说，不存在高考一次定生死。看的是你的ATAR成绩！</p><ul><li><strong>ATAR评分体系</strong></li></ul><p><img src="/求学/谁来拯救你，我的ATAR！/3.jpg" alt=""></p><p><strong>ATAR全称是Australian Tertiary Admission Rank 其实就是学生最后的“高考成绩”，各个大学所谓的分数线就是指学生的ATAR分。</strong>澳大利亚高考是由各州各自举行，除了昆士兰州以外，考试成绩通常为百分等级，满分为99.95，以每0.05%为单位来划分。举个栗子，如果你的ATAR 80分，那就说明你的成绩超过了今年所有考生中的80%。</p><ul><li><strong>ATAR成绩</strong></li></ul><p>虽然各州对于高考叫法不一（比如新州的考试叫HSC，在维州就是VCE），但反映的学生水平是相同的。根据考试成绩和平时成绩进行加权计算后，得出每个考生的全国通用分数，即为ATAR成绩，也就是各大学的录取标准！</p><p>以新州为例，ATAR是由平时成绩（11年级最后一学期&amp;12年级全年在校考试成绩）和最后HSC成绩组成。成绩公布后，<strong>登陆UAC系统就可以查出你的ATAR辣~</strong></p><p>UAC系统: <a href="http://link.zhihu.com/?target=http%3A//www.uac.edu.au/atar/" target="_blank" rel="noopener">http://www.uac.edu.au/atar/</a></p><p><strong>都清楚ATAR是什么了吧？</strong></p><p><strong>现在就来看看怎么按ATAR分选大学吧！</strong></p><ul><li><strong>主要大学&amp;专业ATAR要求</strong></li></ul><p><img src="/求学/谁来拯救你，我的ATAR！/4.jpg" alt=""></p><p><img src="/求学/谁来拯救你，我的ATAR！/5.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“在澳洲读高中，上大学是不是so easy？？？”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实国内许多人都认为，在国外无论是读高中还是上大学都“很轻松”。&lt;/p&gt;
&lt;p&gt;有的人说神马高中放学早，功课少，数学很简
      
    
    </summary>
    
      <category term="求学" scheme="http://blog.ozairs.com/categories/%E6%B1%82%E5%AD%A6/"/>
    
    
      <category term="澳洲" scheme="http://blog.ozairs.com/tags/%E6%BE%B3%E6%B4%B2/"/>
    
  </entry>
  
  <entry>
    <title>马特达蒙麻省理工2016毕业演讲</title>
    <link href="http://blog.ozairs.com/%E6%BC%94%E8%AE%B2/%E9%A9%AC%E7%89%B9%E8%BE%BE%E8%92%99%E9%BA%BB%E7%9C%81%E7%90%86%E5%B7%A52016%E6%AF%95%E4%B8%9A%E6%BC%94%E8%AE%B2/"/>
    <id>http://blog.ozairs.com/演讲/马特达蒙麻省理工2016毕业演讲/</id>
    <published>2019-02-01T08:09:09.000Z</published>
    <updated>2019-02-01T11:17:12.355Z</updated>
    
    <content type="html"><![CDATA[<p>导语：98年凭借《心灵捕手》斩获影帝，07年被《人物》杂志评为“全球最性感男人”，同年成为第2343位留名好莱坞星光大道的明星……不过谁能想到这位有着非凡成就、实打实的演技派，甚至没有正儿八经的从大学毕业？！麻省理工学院（MIT）今年请到了马达，来为2016的毕业生做一场<a href="http://www.hjenglish.com/new/zt/bilingual/" target="_blank" rel="noopener">演讲</a>，而马达牌鸡汤告诉他们——失败是走向成功的最好盔甲！</p><p><img src="/演讲/马特达蒙麻省理工2016毕业演讲/1.jpg" alt=""></p><p>I don’t even have a college degree. I just didn’t graduate from Harvard. I got pretty close, but I started to get movie roles and didn’t finish all my courses. So you can imagine how excited I was when President Reif called to invite me to speak at the MIT commencement. </p><p>我都没个大学文凭，我就是没从哈佛毕业。差点就毕业了，但我开始接触电影开始演戏，并没有完成所有的课程。所以，你可以想象，莱夫校长邀请我到麻省理工毕业典礼上讲话我有多激动。</p><p>My brother Kyle and I, and my friend Ben Affleck never really amounted to much.One of the scenes in Good Will Hunting was based on something that actually happened to my brother. Kyle was visiting a physicist we knew at MIT, and he was walking down the Infinite Corridor. He saw those blackboards that line the halls. So my brother, who’s an artist, picked up some chalk and wrote an <strong>incredibly elaborate</strong>, totally fake, version of an equation. It was so cool and so completely <a href="http://dict.hjenglish.com/w/insane" target="_blank" rel="noopener">insane</a> that no one erased it for months. This is true.</p><p>我和我的兄弟卡尔、还有我的朋友本·阿弗莱克都没有太了不得。《心灵捕手》其中一幕就是根据我兄弟的真人真事拍的。卡尔当时在麻绳理工访问一名我们认识的物理学家，他一路沿着无尽长廊走，看到了大厅连成行的黑板。于是乎，我的兄弟卡尔这位艺术家，拾起粉笔，精心写下了完全凭空杜撰的方程。写得相当酷炫、几近疯狂，好几个月都没人擦去。这是真的，确有其事。</p><p>But like I said, we later made a movie here. Which did not go unnoticed on campus. In fact I’d like to read you some actual lines, some selected passages, from the review of Good Will Huntingin the MIT school paper.</p><p>如我所说，后来我们在那儿拍了电影，在校园里并没有引起注意。实际上，我想读几句台词给你们听，读些麻省理工校报上《心灵捕手》影评选段给你们听。</p><p><img src="/演讲/马特达蒙麻省理工2016毕业演讲/3.jpg" alt=""></p><p>You’re working on some crazy stuff in these buildings. I’ll tell you one that’s been on my mind: Simulation Theory. There’s a philosopher named Nick Bostrom at Oxford, and he’s postulated that if there’s a truly advanced form of intelligence out there in the universe, then it’s probably advanced enough to run simulations of entire worlds — maybe trillions of them — maybe even our own.</p><p>你们在学校大楼里研究些厉害的事物。我告诉你们我在想些什么：模拟理论。牛津大学尼克·博斯特罗姆曾假定，如果宇宙真有一种先进的智能在，或许可以先进到模拟所有世界，也许有数百万个世界在，也许甚至模拟我们自己的世界。</p><p>The basic idea is that we could be living in a massive simulation run by a far smarter civilization, a giant computer game, and we don’t even know it. What if this—all of this—is a simulation?</p><p>基本想法就是我们可能生活在超级大型的模拟中，由比我们聪慧得多的文明或者巨型电脑游戏控制着，而我们却不自知。如果这一切真的是模拟呢？</p><p>But then again: what if it isn’t a simulation? Either way, what we do matters. What we do affects the outcome. MIT, you’ve got to go out and do really interesting things. Important things. Inventive things. Because this world … real or imagined … this world has some problems we need you to drop everything and solve.</p><p>当然，如果这一切又不是模拟呢？无论怎样，我们的所为会影响结果。麻省理工的学生，你们要走出去，做真正有意思的事情、重要的事情、有创造力的事情。因为这个世界，无论真实也好，想象也罢，都会有些问题需要你放下一切去解决。</p><p>But before you step out into our big, troubled world, I want to pass along a piece of advice that Bill Clinton offered me a little over a decade ago. What he said was “turn toward the problems you see.”Turn toward the problems you see. <strong>Engage</strong> with them. Walk right up to them, look them in the eye. In my experience, there’s just no <strong>substitute</strong> for actually going and seeing things.</p><p>你们就要踏入这个纷繁的大世界，我想给你们一句赠言，这是比尔·克林顿十多年前给我的建议。他说“去面对你看到的问题。”去关注你看到的问题，参与其中，径直走过去，直视问题。以我个人的经验，没有什么可以取代真正去面对、去看事物了。</p><p><img src="/演讲/马特达蒙麻省理工2016毕业演讲/2.jpg" alt=""></p><p>When I was a teenager, Mom thought it was important for us to see the world outside of Boston. I think it was that same impulse that took my brother and me to Zambia in 2006, as part of the ONE Campaign — the organization to fight poverty and preventable disease in the developing world. On that trip, in a small community, I met a girl and walked with her to a nearby bore well where she could get clean water.</p><p>我十几岁的时候，我妈妈觉得带我们走出波士顿看看很重要，我觉得，我和我兄弟2006年成为ONE运动的一份子，走进赞比亚也是出于同样的动力。ONE运动这一组织力求在发展中国家战胜贫穷、预防疾病。那次旅途中，在一个小型社区里，我遇见了一个女孩，和她一起去附近的一个钻井汲取干净的水源。</p><p>And water goes hand-in-hand with sanitation. And getting out in the world and meeting people like this little girl is what put me on the path to starting Water.org. You see some tough things out there. But you also see life- changing joy. And it all changes you.</p><p>水和卫生息息相关。走出去到世界上，正是遇见小女孩这样的人让我走上了开启Water.org之路。你会看到世上的困难，但你也看到改变世界的快乐。这一切都改变着你。</p><p>There was a refugee crisis back in ’09 that I read about in an amazing article in the New York Times. People were <strong>streaming</strong> across the border of Zimbabwe to a little town in northern South Africa called Messina. I was working in South Africa, so I went up to Messina to see for myself what was going on. Human beings will take your breath away. They will teach you a lot… but you have to engage. There’s a lot of trouble out there, MIT. But there’s a lot of beauty, too. I hope you see both.</p><p>2009年曾有难民危机，我曾在《纽约时报》读到一篇精彩的文章。人们涌向津巴布韦边境，前往南非北部一个叫摩西那的小镇。我当时在南非工作，所以我亲自就去摩西那看看究竟。人会使你屏息震惊、会教你很多，但你一定要融入。麻省理工的学子们，那里困难重重，但也充满美好，我希望你们两者都能看到。</p><p>The point is to try to eliminate your <strong>blind spots</strong> — the things that keep us from grasping the bigger picture. But looking at the world as it is, and engaging with it, is the first step toward finding our blind spots. There’s a few more things I hope you’ll keep in mind.</p><p>关键是，要努力去除你的盲点、那些阻止我们看到全貌的事物。但看到事物的原貌，融入其中，还只是我们找到盲点的第一步。还有其它事情我希望你们牢记。</p><p>First, you’re going to fail sometimes, and that’s a good thing. Not having an answer isn’t embarrassing. It’s an opportunity. Don’t be afraid to ask questions.</p><p>第一，你有时候会失败，这是好事情。没有答案并不难堪，这是机会，所以不要害怕提问。</p><p>The second thing is that you’ve got to keep listening. Even outside your work, there are ways to keep challenging yourself. Listen to online lectures. I love what President Obama said at Howard University’s commencement last month: he said,“Democracy requires compromise, even when you are 100 percent right.”</p><p>第二是你要保持聆听。即便是工作之外，也有方法可以挑战自我。去听网上的讲座。我喜欢<a href="http://www.hjenglish.com/zt/obama/" target="_blank" rel="noopener">奥巴马</a>上个月在霍华德大学毕业典礼说的话，“民主需要妥协，即便你百分百正确。”</p><p>The third and last thought I want to leave you with is that not every problem has a high-tech solution. We need to be just as <strong>innovative</strong> in public policy.</p><p>第三、也是最后我想寄予你们的，不是所有的问题都有高科的解决方案。我们的国家政策需要有所创新。</p><p>So, graduates, let me ask you this in closing: What do you want to be a part of? What’s the problem you’ll try to solve? Whatever your answer, it’s not going to be easy.</p><p>所以，毕业生们，让我问你们一个问题以此作结。你想成为什么的一份子？你想解决什么问题？无论你的回答为何，都不会是轻而易举。</p><p>Here you are alive at a time when science and technology may not hold all the answers, but are indispensable to any solution.</p><p>你们所处的时代，科学和技术或许不能解决一切，但所有的解决方案都离不开科技。</p><p>So I hope you’ll turn toward the problem of your choosing … Because you must. I hope you’ll drop everything … Because you must And I hope you’ll solve it. Because you must. Your game begins: now. Congratulations and thanks very much!</p><p>所以，我希望你们正视你们的选择问题，因为你们必须如此。我希望你们可以放下一切，因为你们必须如此。我希望你们可以解决这个问题，因为你们必须如此。你们的竞赛，现在开始。祝贺你们！非常感谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;导语：98年凭借《心灵捕手》斩获影帝，07年被《人物》杂志评为“全球最性感男人”，同年成为第2343位留名好莱坞星光大道的明星……不过谁能想到这位有着非凡成就、实打实的演技派，甚至没有正儿八经的从大学毕业？！麻省理工学院（MIT）今年请到了马达，来为2016的毕业生做一场&lt;
      
    
    </summary>
    
      <category term="演讲" scheme="http://blog.ozairs.com/categories/%E6%BC%94%E8%AE%B2/"/>
    
    
      <category term="Matt Damon" scheme="http://blog.ozairs.com/tags/Matt-Damon/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Bill Gates：What I learned at work this year</title>
    <link href="http://blog.ozairs.com/uncategorized/What-I-learned-at-work-this-year/"/>
    <id>http://blog.ozairs.com/uncategorized/What-I-learned-at-work-this-year/</id>
    <published>2019-01-31T23:16:54.000Z</published>
    <updated>2019-02-01T02:20:18.106Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uncategorized/What-I-learned-at-work-this-year/1.jpeg" alt=""></p><p>Every Christmas when I was a kid, my parents would send out a card with an update on what the family was up to. <em>Dad’s law firm is growing, Mom’s volunteer work is going strong, the girls are doing well in school, Bill is a handful.</em></p><p>Some people think it is corny, but I like the tradition. These days, at the end of each year, I still enjoy taking stock of my work and personal life. What was I excited about? What could I have done better?</p><p>I thought I would share a few of these thoughts as 2018 concludes.</p><p>One thing that occurs to me is that the questions I am asking myself at age 63 are very different from the ones I would have asked when I was in my 20s.</p><p>Back then, an end-of-year assessment would amount to just one question: Is Microsoft software making the personal-computing dream come true?</p><p>Today of course I still assess the quality of my work. But I also ask myself a whole other set of questions about my life. Did I devote enough time to my family? Did I learn enough new things? Did I develop new friendships and deepen old ones? These would have been laughable to me when I was 25, but as I get older, they are much more meaningful.</p><p>Melinda has helped broaden my thinking on this point. So has Warren Buffett, who says his measure of success is, “Do the people you care about love you back?” I think that is about as good a metric as you will find.</p><p>It may sound grand, but I think the world is slowly going through a similar transition to a broader understanding of well-being. For most of human history, we have been focused on living longer by fighting disease and trying to grow enough food for everyone. As a result, life spans have gone up dramatically. Technology has played a key role in that through vaccines, medicines, and improved sanitation.</p><p>We still need a lot of innovation to solve problems like malaria or obesity, but we are also going to be focusing more on improving the quality of life. I think this will be the thrust of many big breakthroughs of the future. For example, software will be able to notice when you’re feeling down, connect you with your friends, give you personalized tips for sleeping and eating better, and help you use your time more efficiently.</p><p>There are not the same clear measures of these things as there are for diseases, and there may never be. But there is nascent work in this field and I think it is going to accelerate.</p><p>As I look back on the year, I am also thinking about the specific areas I work on. Some of this is done through our foundation but a lot of it (such as my work on energy and Alzheimer’s work) is not. What connects it all is my belief that innovation can save lives and improve everyone’s well-being. A lot of people underestimate just how much innovation will make life better.</p><p>Here are a few updates on what’s going well and what isn’t with innovation in some areas where I work.</p><h3 id="Alzheimer’s-disease"><a href="#Alzheimer’s-disease" class="headerlink" title="Alzheimer’s disease"></a>Alzheimer’s disease</h3><blockquote><p>I saw two positive trends in Alzheimer’s research in 2018.</p></blockquote><p>I saw two positive trends in Alzheimer’s research in 2018.</p><p>One is that researchers focused on a new set of ideas about how to stop Alzheimer’s.</p><p>The first generation of theories, which dominated the field for years, emphasized two proteins called amyloid and tau. These proteins cause plaques and tangles in the brain, clogging up and killing brain cells. The idea was to stop the plaques and tangles from forming. I hope these approaches pay off, but we have not seen much evidence that they will.</p><p>In the past year, researchers have doubled down on a second generation of hypotheses. One theory is that a patient’s brain cells break down because their energy producers (called mitochondria) wear out. Another is that brain cells break down because part of the immune system gets overactivated and attacks them.</p><p>This is a great example of how improving our understanding of biology will reduce both medical costs and human suffering.</p><p>The other trend this year is that the Alzheimer’s community focused on getting more and better access to data. We’re working with researchers to make it easier for them to share information from their studies broadly so that we can better understand questions like how the disease progresses.</p><p>Over the past few years, the U.S. government has dramatically stepped up funding for Alzheimer’s research, from $400 million a year to over $2 billion a year. There is also a big push to create better diagnostics.</p><p>The only problem where I don’t yet see a clear path forward yet is how to develop more efficient ways to recruit patients for clinical trials. Without a simple and reliable diagnostic for Alzheimer’s, it’s hard to find eligible people early enough in the disease’s progression who can participate in trials. It can take years to enroll enough patients. If we could find a way to pre-screen participants, we could start new trials more quickly.</p><p>But there is so much momentum in other areas—scientific tools, better diagnostics, improved access to data—that as long as we can solve the recruitment problem, I am confident that we will make substantial progress in the next decade or two.</p><h3 id="Polio"><a href="#Polio" class="headerlink" title="Polio"></a>Polio</h3><blockquote><p> I thought we would be closer to eradicating polio today than we are.</p></blockquote><p>I thought we would be closer to eradicating polio today than we are. Unfortunately, there were more cases in 2018 than in 2017 (29 versus 22).</p><p>I underestimated how hard it would be to vaccinate children in places where there’s political violence and war. Families move around to escape fighting, which makes it hard to keep track of children and make sure they get all the doses of the vaccine. Or sewage systems get destroyed, allowing the virus to spread as children come into contact with an infected person’s excrement.</p><p>This is a key reason why Afghanistan and Pakistan have never been free of polio—in fact they are the <em>only</em> two countries that have never been free of polio.</p><p>I spend a lot of time on polio, part of it talking to the funders to make sure they continue their commitment even though eradication is taking longer than any of us would like. I remind them of the huge benefits of success, and the risk that the disease will return in a big way if we don’t finish the job.</p><p>I also remind them what a difference innovation is making. We’re now able to test sewage samples to track the virus and find the source before an outbreak starts. And the global health community is finding creative ways to work in war zones, having stopped outbreaks in Syria and Somalia in recent years.</p><p>Finally, I am hopeful about a new oral vaccine being tested in Belgium and Panama. The results should be out in 2019, and if this one proves effective, it would overcome some of the problems with previous oral vaccines when they’re used in places where few children are immunized. The new vaccine could be in use as soon as 2020.</p><p>Despite all the challenges, I am still optimistic that we can eradicate polio soon.</p><h3 id="Energy"><a href="#Energy" class="headerlink" title="Energy"></a>Energy</h3><p>Global emissions of greenhouse gases went up in 2018. For me, that just reinforces the fact that the only way to prevent the worst climate-change scenarios is to get some breakthroughs in clean energy.</p><p>Some people think we have all the tools we need, and that driving down the cost of renewables like solar and wind solves the problem. I am glad to see solar and wind getting cheaper and we should be deploying them wherever it makes sense.</p><p>But solar and wind are intermittent sources of energy, and we are unlikely to have super-cheap batteries anytime soon that would allow us to store sufficient energy for when the sun isn’t shining or the wind isn’t blowing. Besides, electricity accounts for only 25% of all emissions. We need to solve the other 75% too.</p><p>This year Breakthrough Energy Ventures, the clean-energy investment fund I’m involved with, announced the first companies we’re putting money into. You can see the list at <a href="http://www.b-t.energy/ventures/our-investment-portfolio/" target="_blank" rel="noopener">http://www.b-t.energy/ventures/our-investment-portfolio/</a>. We are looking at all the major drivers of climate change. The companies we chose are run by brilliant people and show a lot of promise for taking innovative clean-energy ideas out of the lab and getting them to market.</p><p>Next year I will speak out more about how the U.S. needs to regain its leading role in nuclear power research. (This is unrelated to my work with the foundation.)</p><p>Nuclear is ideal for dealing with climate change, because it is the only carbon-free, scalable energy source that’s available 24 hours a day. The problems with today’s reactors, such as the risk of accidents, can be solved through innovation.</p><p>The United States is uniquely suited to create these advances with its world-class scientists, entrepreneurs, and investment capital.</p><blockquote><p> Unfortunately, America is no longer the global leader on nuclear energy that it was 50 years ago.</p></blockquote><p>Unfortunately, America is no longer the global leader on nuclear energy that it was 50 years ago. To regain this position, it will need to commit new funding, update regulations, and show investors that it’s serious.</p><p>There are several promising ideas in advanced nuclear that should be explored if we get over these obstacles. TerraPower, the company I started 10 years ago, uses an approach called a traveling wave reactor that is safe, prevents proliferation, and produces very little waste. We had hoped to build a pilot project in China, but recent policy changes here in the U.S. have made that unlikely. We may be able to build it in the United States if the funding and regulatory changes that I mentioned earlier happen.</p><p>The world needs to be working on lots of solutions to stop climate change. Advanced nuclear is one, and I hope to persuade U.S. leaders to get into the game.</p><h3 id="The-next-epidemic"><a href="#The-next-epidemic" class="headerlink" title="The next epidemic"></a>The next epidemic</h3><p>In 1918, the Spanish flu killed 50 million people worldwide. It still ranks as one of the deadliest natural disasters ever.</p><p>I had hoped that hitting the 100th anniversary of this epidemic would spark a lot of discussion about whether we’re ready for the next global epidemic. Unfortunately, it didn’t, and we still are not ready.</p><p>People rightly worry about dangers like terrorism and climate change (and, more remotely, an asteroid hitting the Earth). But if anything is going to kill tens of millions of people in a short time, it will probably be a global epidemic. And the disease would most likely be a form of the flu, because the flu virus spreads easily through the air. Today a flu as contagious and lethal as the 1918 one would kill nearly 33 million people in just six months.</p><p>I have been <a href="https://www.gatesnotes.com/Health/Shattuck-Lecture?WT.mc_id=12_29_2018_21_YIR2018_BG-LI_&amp;WT.tsrc=BGLI" target="_blank" rel="noopener">studying this</a> for <a href="https://www.gatesnotes.com/Health/We-Are-Not-Ready-for-the-Next-Epidemic?WT.mc_id=12_29_2018_21_YIR2018_BG-LI_&amp;WT.tsrc=BGLI" target="_blank" rel="noopener">several years</a>. To be prepared, we need a plan for national governments to work together. We need to think through how to handle quarantines, make sure supply chains will reach affected areas, decide how to involve the military, and so on. There was not much progress on these questions in 2018.</p><blockquote><p> There has been progress toward a vaccine that would protect you from every strain of the flu.</p></blockquote><p>The good news is that there has been progress toward a vaccine that would protect you from every strain of the flu. This year I visited the U.S. National Institutes of Health in Maryland and got an update from some of the people leading this work.</p><p>The challenges of making a universal flu vaccine are fascinating. All strains of the virus have certain structures in common. If you’ve never been exposed to the flu, it’s possible to make a vaccine that teaches your immune system to look for those structures and attack them. But once you’ve had the flu, your body obsesses over the strain that got you sick. That makes it really hard to get your immune system to look for the common structures.</p><p>So it is clear how we could make a universal vaccine that would protect anyone (such as the very young) who has never been exposed to the flu before. But for anyone who has already had the virus, it is a lot harder. The problem is a long way from being solved, but new research money is coming in and more scientists are working on it.</p><p>To make the most of these scientific efforts (<a href="https://www.impatientoptimists.org/Posts/2018/05/Ending-the-Pandemic-Threat-A-Grand-Challenge-for-Universal-Influenza-Vaccine-Development" target="_blank" rel="noopener">some of which</a> our foundation is funding), the world needs to develop a global system for monitoring and responding to epidemics. That is a political matter that requires international cooperation among government leaders. This issue deserves a lot more focus.</p><h3 id="Gene-editing"><a href="#Gene-editing" class="headerlink" title="Gene editing"></a>Gene editing</h3><p>Gene editing <a href="https://www.nytimes.com/2018/11/26/health/gene-editing-babies-china.html?rref=collection%2Fsectioncollection%2Fasia&amp;action=click&amp;contentCollection=asia&amp;region=stream&amp;module=inline&amp;version=latest&amp;contentPlacement=10&amp;pgtype=sectionfront" target="_blank" rel="noopener">made the news</a> in November when a Chinese scientist announced that he had altered the genes of two baby girls when they were embryos. What is unprecedented about his work is that he edited their germline cells, meaning the changes will be passed down to their children. (The other, less controversial type of gene editing involves somatic cells, which aren’t inherited by future generations.)</p><p>I agree with those who say this scientist went too far. But something good can come from his work if it encourages more people to learn and talk about gene editing. This might be the most important public debate we haven’t been having widely enough.</p><p>The ethical questions are enormous. Gene editing is generating a ton of optimism for treating and curing diseases, including some that our foundation works on (though we fund work on altering crops and insects, not humans). But the technology could make inequity worse, especially if it is available only for wealthy people.</p><p>I am surprised that these issues haven’t generated more attention from the general public. Today, artificial intelligence is the subject of vigorous debate. Gene editing deserves at least as much of the spotlight as AI.</p><p>I encourage you to read up on it whenever you have a chance. Keep an eye out for articles in your news feed. If you are willing to read a whole book, <a href="https://www.gatesnotes.com/Books/The-Gene?WT.mc_id=12_29_2018_21_YIR2018_BG-LI_&amp;WT.tsrc=BGLI" target="_blank" rel="noopener"><em>The Gene</em></a> by Siddhartha Mukherjee is very well done. This story is one to follow, because big breakthroughs—some good, some worrisome—are coming.</p><h3 id="Looking-ahead"><a href="#Looking-ahead" class="headerlink" title="Looking ahead"></a>Looking ahead</h3><p>Although I have never been one for New Year’s resolutions, I have always been committed to setting clear goals and making plans to achieve them. As I get older, these two things look more and more like the same exercise. So I am making a resolution for 2019. I am committing to learn and think about two key areas where technology has the potential to make an enormous impact on the quality of our lives, but also raises complex ethical and social considerations.</p><p>One is the balance between privacy and innovation. How can we use data to gain insights into education (like which schools do the best job of teaching low-income students) or health (like which doctors provide the best care for a reasonable price) while protecting people’s privacy?</p><p>The other is the use of technology in education. How much can software improve students’ learning? For years we have been hearing overheated claims about the huge impact that technology would have on education. People have been right to be skeptical. But I think things are finally coming together in a way that will deliver on the promises.</p><p>I will be posting updates on these and other issues here on LinkedIn and on my blog, the <a href="https://www.gatesnotes.com/?WT.mc_id=12_29_2018_21_YIR2018_BG-LI_&amp;WT.tsrc=BGLI" target="_blank" rel="noopener">Gates Notes</a>.</p><p>In the meantime, Melinda and I are working on our next Annual Letter. The theme is a surprise, though it is safe to say we’ll be sharing some positive trends that make us optimistic about the future. We’ll send the letter out in February.</p><p>I hope you have a happy and healthy start to 2019.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/uncategorized/What-I-learned-at-work-this-year/1.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Every Christmas when I was a kid, my parents would send 
      
    
    </summary>
    
    
      <category term="Review" scheme="http://blog.ozairs.com/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Ray Dalio：Looking Back on the Last 40 Years of Reforms in China</title>
    <link href="http://blog.ozairs.com/uncategorized/Looking-Back-on-the-Last-40-Years-of-Reforms-in-China/"/>
    <id>http://blog.ozairs.com/uncategorized/Looking-Back-on-the-Last-40-Years-of-Reforms-in-China/</id>
    <published>2019-01-31T23:03:31.000Z</published>
    <updated>2019-02-01T02:11:03.995Z</updated>
    
    <content type="html"><![CDATA[<p>As the end of 2018 marks the 40th anniversary of Deng Xiaoping and China’s other leaders opening up and reforming China and since this is also a time of greater questioning of China’s economic future, it is a good time to reflect on how China’s last 40 years have gone and why.  </p><p>The table below shows just a few representative statistics. These results speak for themselves. To have such rates of improvements in so many areas and for so many people has made it the greatest economic miracle ever. Clearly whatever they did worked great. So, what was behind these accomplishments and will they continue?</p><p><img src="/uncategorized/Looking-Back-on-the-Last-40-Years-of-Reforms-in-China/1.png" alt=""></p><p>Since I have been fortunate to have experienced 34 years of this 40 years in an up close and intimate way, and since I study what makes countries succeed and fail, I have some experiences and thoughts to share    This is a retrospective look at China. A more comprehensive report about the current state of the economy and what is likely to come will follow shortly.</p><p>From what I have seen, I believe that the very impressive results that the Chinese leadership and the Chinese people produced came about primarily because of the powerful combination of a) China’s opening up and reforming following an extended period of isolation that led to a fast catching up (especially in the coastal regions of China) with the advanced developed world, and b) the power of the Chinese culture and it’ related ways of operating. </p><p>My first exposure to this came in 1984 when China was just opening. I was invited by CITIC (which was the only “window company,” which means the only company that was allowed to freely deal with the outside world) to teach them how the world financial markets work.  I immediately got a taste for the culture and could see that China was undeveloped for different reasons than other underdeveloped countries. In China’s case, the people and culture were highly developed and suffered from isolation from the advances that occurred in the rest of the world (whereas in most other developed countries the reverse was the case). </p><p>As an example of how undeveloped China was at the time because of lack of contact with the outside world, I gave senior people $10 calculators which they then thought were miraculous. To give you an idea of the rate of progress since then, some of those people are now overseeing the development of some of the most cutting-edge technologies in the world. </p><p>Back in 1984, I saw that there was nothing about the Chinese people that prevented them from being as successful as those in the developed world, and I knew that China was opening its door, I could imagine the essence of the big changes that would occur. Because the closed door was a barrier that led to two different economic levels to exist between China and the developed world, the removal of that barrier would naturally equalize their economic levels like unconstrained water naturally seeks the same level. I remember being on the 10th floor of CITIC’s “Chocolate Building,” giving a lecture and pointing out the window to the two-story <em>hutongs</em> (poor neighborhoods) and telling my audience that it would not be long before the <em>hutongs</em> would be gone and skyscrapers would be there in their place. They didn’t believe me and told me “you don’t know China,” and I told them they did not know the power of the economic arbitrages that would happen as a result of opening up. That opening was the biggest force behind the high rates of improvement that we saw over the last 40 years.  </p><p>While the opening up created a great natural opportunity, the Chinese made the most of it. They did that by making and implementing reforms that were driven by uniquely Chinese cultural influences. These reforms freed up the Chinese people to realize their potential. </p><p>When I first came to China, in addition to seeing that it was undeveloped because of its isolation, I saw that it was underdeveloped because it was run by an old-style communist system that provided little incentives or efficiencies. For example, people couldn’t choose their own careers and jobs, there were no private businesses allowed, government businesses (i.e., all business) were inefficiently run, and there were little or no incentives for working hard and doing a good job. In the years that followed, I saw numerous excellent and rapid reforms change all that. Even more important than my getting to see the particular reforms that they made, I got to see how they make reforms – I.e., how they come up with numerous big reform ideas, plan them out, get behind them, and then get them done.  The demonstrated ability of the Chinese to go from visualizations to actualizations is quite amazing.        </p><p>For example, in 1989 I was introduced by my CITIC friend and contact Wang Li to a group of seven good people (which she was one of) who were appointed by nine companies at the request of the visionary reformer Wang Qishan to create an organization (the Stock Exchange Executive Council) to set up the first financial markets in China. China was still very poor, so their office was in a dingy hotel and they lacked adequate funding. Still they had what mattered most—i.e., a clear mission to create big changes, smart people of good character, open-mindedness to allow rapid learning and determination to achieve their goals. Over the decades that followed, I saw how they and many others built the Chinese financial markets to become among the largest in the world, and I got to participate in small ways, which has been one of the great joys of my life. Through all this I gained a love and respect for the Chinese people, the Chinese culture, and their rapid rates of improvements that these forces brought about. .</p><p>As an extension of these sentiments in 1995, I had my 11-year-old son Matt live with an extraordinary and humble Chinese woman, Madame Gu, and go to a poor local school (Shi Jia Hu Tong Xiao Xue). All schools in China, like most everything else, were poor then. Though this school was poor (e.g., there wasn’t heat until late November so students wore their coats in classes), I saw how they had smart and caring educators who provided the children with an excellent, complete education that included character development. While Matt’s lifestyle was poor (e.g., he couldn’t take hot showers because the old apartment building he lived in only had hot water two days a week) he was superbly educated, loved, and better developed than in our rich Greenwich community. The experience changed his life forever and led him to set up a foundation to help Chinese orphans that he ran for 12 years that brought him and me into many more experiences with Chinese people and Chinese culture in China.</p><p>Through experiences like these and by getting to know some of the Chinese leaders, I learned a lot more about the Chinese culture, about how it operates today and about how it evolved over thousands of years —-from notions of how family members and others should behave with each other, through Confucian thinking, through Neo-Confucian thinking, through various dynasties and with the lessons these events provided about how leaders should lead and how followers should follow. These values and ways of operating are what I’m referring to when I refer to the Chinese culture, which I saw manifested over and over. I For example, I could see how that Chinese culture connected Lee Kuan Yew and Deng Xiaoping so that they together could explore how China could have a “socialist market economy with Chinese characteristics.” Though I’m no expert on Chinese culture and its way of operating, I do believe that I have some sense of it that might be helpful to those who haven’t had such exposures to it.</p><p>Most importantly, if you haven’t spent time in China, you need to get any stereotypes you might have out of your mind because it’s not how it was. This is not your father’s communism. It is “socialism with Chinese characteristics” that has been significantly and very effectively reformed, which has made it much more vital, creative, and economically free.</p><p>Before I share more of my thinking about this, I’d like to pass along <a href="https://www.transcend.org/tms/2018/12/xi-jinpings-speech-on-40th-anniversary-of-chinas-reforms-opening-up-full-text/" target="_blank" rel="noopener">Xi Jinping’s far more important observations about the last 40 years of reforms</a> and what to expect in the future. It is worthwhile reading for those who want to understand his perspective, which is most important.</p><p>President Xi refers a lot to “Chinese characteristics,” though he doesn’t define them.  While what defines Chinese culture would be better described by Chinese who are more knowledgeable than I am, I will refer you to the book Chinese Characteristics (<a href="http://library.umac.mo/ebooks/b26028645.pdf" target="_blank" rel="noopener">here</a>) – an American observer writing about Chinese culture in the late 1800s, some of which I think resonates today (though I’ll note that don’t agree with everything in the book, some of which is very outdated). Still, I will inadequately describe what I think Chinese culture most fundamentally is. As I’m not a Chinese scholar so that my comments are made solely on the basis of my contacts and my limited research, please take what I’m saying with a grain of salt.</p><p>From my experiences and from what I am told by Chinese who should know, I believe Chinese leadership seeks to run the country the way they believe a good family should be run, from the top down, maintaining high standards of behavior, putting the collective interest ahead of any individual interest, with each member knowing their place and having filial respect for those in the hierarchy so the system works in an orderly way. One of China’s leaders who explained this concept to me told that the word “country” consists of two characters, state and family, which influences how they view their role in looking after their state/family. One might say that the Chinese government is paternal. For example, it regulates what types of video games are watched by children and how many hours a day they play them. As a broad generalization, when the interest of the country (like the family) is at odds with the interest of the individual, the interest of the country (like the interest of the family) should be favored over the interest of the individual. Individuals are parts of a greater machine. As a result of this perspective, the system seeks to develop, promote and reward good character and good citizenship. For example it gives people a social credit score that rates the quality of their citizenship. And each person is expected to view themselves as parts of the greater whole. This management from the top down includes visualizing what China 5, 10 and 20 years in the future should be like and then making and managing detailed multiyear plans to build out that vision, with the goal being to make China as great as it can be. China is run more like a giant company with many subsidiaries, some within the government’s direct control and some within its indirect control. </p><p>Over those 40 years, the economic system was reformed to allow much more market-oriented and freer pursuit of self-interest as long that pursuit is pursed with good citizenship (including respect for the ruling system and its rules),. That included having growth of the private sector and private property. </p><p>So what we have seen over the last 40 years is China making many big, practical reforms around a traditional Chinese way of operating. As Xi said in a recent speech, “we will reform the things that should be reformed and not reform the things that shouldn’t be reformed,” referring to having big changes while maintaining the traditional Chinese style governance system.</p><p>While Chinese culture has been evolving, it has at its most fundamental level been operating in similar ways for many hundreds or even thousands of years and the results of operating that way are knowable in an approximate way. I have recently been researching the rise and fall of reserve currencies, which led me to study the rises and declines of the world’s most powerful countries. That led my research team and me to put together the following indices of the relative powers of leading countries since 1500. These indices are a combination of six sub-indices that measure six different types of power: 1) innovation &amp; competitiveness, 2) domestic output, 3) share of world trade, 4) financial-center size and power, 5) military strength, and 6) reserve-currency status—and they show when different countries reached their peaks relative to the rest of the world. As shown, China was either the number one or number two most powerful country from 1500 to at around1800 when it went into relative decline that continued until around 40 years ago when the opening up and reforming led to the previously described strong ascent to being the second-most powerful country in the world and on the path to being the most powerful one. I believe that excellent performance was largely the result of China’s powerful culture and its reforms.   </p><p><img src="/uncategorized/Looking-Back-on-the-Last-40-Years-of-Reforms-in-China/2.png" alt=""></p><p>The chart below shows each of the six measures of Chinese strength going back to 900.</p><p><img src="/uncategorized/Looking-Back-on-the-Last-40-Years-of-Reforms-in-China/3.png" alt=""></p><p>The next chart shows our overall index going back to the year 900. As you can see, China has been a very successful country through the millennia except for the more recent 150 years or so (for reasons I won’t delve into now).</p><p><img src="/uncategorized/Looking-Back-on-the-Last-40-Years-of-Reforms-in-China/4.png" alt=""></p><p>Given that impressive track record and how deeply imbued the culture behind it is, we shouldn’t expect China’s most fundamental ways of operating to change much. As a result, while trade deals can be made, attempts to change “Chinese characteristics”,—most importantly to change the top-down government management of most/all aspects of the system pursuit of making China as great as it can be—won’t work.</p><p>While considerable attention is now being paid to the trade war, what is more important is that China and the US are in a competition of cultural approaches, with the US approach being more opposite than similar to the Chinese approach Most fundamentally, the US is a country in which individuals, individualism, and individual property rights are perceived to be of paramount importance it is directed from the bottom up (e.g., through “one man, one vote” democracies that empower people to choose their leaders), being revolutionary is considered a good thing, and conflict is valued more than harmony. Rather than respecting top down control most American have a strong preference to keep government from interfering with their most individual choices. Character development is a personal or family issue, not a government issue (which leaves it largely neglected in areas with broken families, especially if they’re poor). Rather than there being a long-term top down vision for the country and a plan to achieve that vision, in the capitalist and democratic system such directions are more bottom up determined based on commercial and popularity considerations.</p><p>I’m not saying which system is better. Each culture/system has its pros and cons that I’m not going to get into now. I believe that the important thing to know are that while there will be trade wars and trade truces they aren’t the most important things. The most important things are that 1) China has a culture and system that has worked well for it for a long time so it shouldn’t be expected to change much, 2) the U.S. has the same, 3) these systems (and those of other countries) will be both competing and cooperating, and how well they do that will be an important influence on global conditions, 4) how well each system works in practice will have a far greater influence on where each country stands in the future than the terms of the deals that they strike with each other, so each would do well to examine its own weaknesses and come up with reforms to rectify them, and 5) there is a lot to respect about the Chinese culture and approach that led to its remarkable accomplishments, 6) we would do well to learn from each other, cooperate and compete to bring each other up rather than to tear each other down, and 7) China is a place we need to continue to evolve with and invest in. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As the end of 2018 marks the 40th anniversary of Deng Xiaoping and China’s other leaders opening up and reforming China and since this is
      
    
    </summary>
    
    
      <category term="Review" scheme="http://blog.ozairs.com/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>澳洲必备保健品</title>
    <link href="http://blog.ozairs.com/uncategorized/%E6%BE%B3%E6%B4%B2%E5%BF%85%E5%A4%87%E4%BF%9D%E5%81%A5%E5%93%81/"/>
    <id>http://blog.ozairs.com/uncategorized/澳洲必备保健品/</id>
    <published>2019-01-29T00:50:18.000Z</published>
    <updated>2019-01-29T03:57:33.673Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间去了澳洲玩，去之前做了一堆功课，最终买了这几款必备的保健品，因为本身是过敏体质，食用过后感觉有明显改善，因此用自己的方式画出来分享给大家。🌟</p><p>no. 1 ♡ 玫瑰果丸💘- 美白</p><p><img src="/uncategorized/澳洲必备保健品/2.pic.jpg" alt=""></p><p>价格比日本pola要实在很多，一瓶一百多软妹币，其实我本身白皮，但是我在澳洲上学的朋友她原来很黑的一个人，这次找她玩，我发现她竟然比我还要白很多！问了之后才知道她一直在食用这个，并且去海边也没有轻易晒黑，所以！必须入手！</p><p>no. 2 ♡ 葡萄籽 💘- 抗衰老</p><p><img src="/uncategorized/澳洲必备保健品/3.pic.jpg" alt=""></p><p>20多岁的老阿姨必须入手啊，感觉女生过了20岁以后真的老的很快，黑眼圈，暗沉，熬了一夜，第二天脸色就很差，所以很希望它能救救我，就入手了。</p><p>no. 3 ♡ 葡萄籽 💘- 护肝片</p><p><img src="/uncategorized/澳洲必备保健品/4.pic.jpg" alt=""></p><p>身为设计师，每天爆肝赶图无话可说，虽然不赶图时候也不早睡……但是因为晚上11点到1点是肝脏排毒时间，如果不睡的话就会积累很多毒素，所以一般这个点还没睡的话，我就会食用两颗辅助排毒，来缓解自己的心里负担，另外抽烟喝酒也可食用帮助排毒</p><p>no. 4 ♡ 胶原蛋白💘- 抗衰老</p><p><img src="/uncategorized/澳洲必备保健品/5.pic.jpg" alt=""></p><p>同样20多岁的老阿姨，感觉需要必入的东西，胶原蛋白火的有两款，一款液体，一款固体，功能差不多，我个人比较倾向于固体的，固体易携带，也不容易变质，不会那么麻烦，周围很多朋友因为液体放冰箱忘记食用最后变质，感觉很浪费</p><p>no. 5 ♡ 成人益生菌 💘- 抗过敏</p><p><img src="/uncategorized/澳洲必备保健品/6.pic.jpg" alt=""></p><p>我是过敏体质，所以专门做功课入了这一款，我过敏是因为免疫力差，这一款含多种益生菌，提高免疫力</p><p>no. 6 ♡ 膳食纤维粉💘- 减肥</p><p><img src="/uncategorized/澳洲必备保健品/7.pic.jpg" alt=""></p><p>看张韶涵有推荐，后来有个视频印象深刻，把这个和一杯油放在一起混合之后，水油会变分离，感觉排油很厉害，所以我如果是大吃大喝一顿或者吃夜宵的话，就会冲一杯缓解罪恶感，第二天会排出去</p><p>no. 7 ♡ 素颜丸💘- 修复肌肤</p><p><img src="/uncategorized/澳洲必备保健品/8.pic.jpg" alt=""></p><p>这个貌似很多人推荐，据说有改善肌肤，然后素颜也可以很美，我晚上睡前食用，会感觉睡的比较踏实，应该这个也有一方便原因吧，据说对女性也很有好吃，需要在食用一段时间看</p><p>no. 8 ♡ 睡眠片💘- 睡眠</p><p><img src="/uncategorized/澳洲必备保健品/9.pic.jpg" alt=""></p><p>有时候压力大晚上想事情会失眠，这个不含褪黑素，所以放心食用。</p><p>说实话澳洲保健品真的有用，女生不仅要注重外在修饰，内调更重要，用自己喜欢的方式做的第一次分享，画了好多图，码了好多字，喜欢的话请给我点赞打☎️（下一篇会更有动力，感恩💕） <a href="https://www.xiaohongshu.com/user/profile/573d642d6a6a6929995b37e1" target="_blank" rel="noopener">@小红叔</a> <a href="https://www.xiaohongshu.com/user/profile/52d8c541b4c4d60e6c867480" target="_blank" rel="noopener">@薯队长</a></p><p>澳洲保健品 我的护肤日常 插画 日常美容保健品 美白必吃保健品 我的护肤日常 肌肤过敏如何急救 健身吃什么 懒人护肤法 健身吃什么 肌肤过敏如何急救 学生党护肤推荐</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间去了澳洲玩，去之前做了一堆功课，最终买了这几款必备的保健品，因为本身是过敏体质，食用过后感觉有明显改善，因此用自己的方式画出来分享给大家。🌟&lt;/p&gt;
&lt;p&gt;no. 1 ♡ 玫瑰果丸💘- 美白&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uncategorized/澳洲必
      
    
    </summary>
    
    
      <category term="澳洲" scheme="http://blog.ozairs.com/tags/%E6%BE%B3%E6%B4%B2/"/>
    
  </entry>
  
  <entry>
    <title>澳洲Ego QV儿童保湿霜</title>
    <link href="http://blog.ozairs.com/%E6%BE%B3%E6%B4%B2%E4%BB%A3%E8%B4%AD/%E6%BE%B3%E6%B4%B2Ego-QV%E5%84%BF%E7%AB%A5%E4%BF%9D%E6%B9%BF%E9%9C%9C/"/>
    <id>http://blog.ozairs.com/澳洲代购/澳洲Ego-QV儿童保湿霜/</id>
    <published>2019-01-28T11:07:18.000Z</published>
    <updated>2019-02-01T06:57:34.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="澳洲Ego-QV婴儿、儿童保湿霜"><a href="#澳洲Ego-QV婴儿、儿童保湿霜" class="headerlink" title="澳洲Ego QV婴儿、儿童保湿霜"></a><strong>澳洲Ego QV婴儿、儿童保湿霜</strong></h3><p><img src="/澳洲代购/澳洲Ego-QV儿童保湿霜/GV Cream.jpg" alt=""></p><p>澳洲QV的产品 几乎零差评 真心是高端却平价。</p><p>这么一大罐250克呢 从脸到脚都可以擦 成人有时候皮肤过敏啥的也能用哦</p><p>澳洲Ego QV婴儿、儿童保湿霜，这个牌子在澳洲家喻户晓 📢 在澳洲各大药房 👷 均有出售 ❕ 所有产品都不含香料，色素，羊毛脂和丙二醇，适合所有肌肤，特别是干燥及敏感肌肤。</p><p>国内已经进入秋天💨给宝宝用适合秋冬的面霜吧[愉快]特别适合给极度干燥，轻微湿疹，肌肤敏感的儿童使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;澳洲Ego-QV婴儿、儿童保湿霜&quot;&gt;&lt;a href=&quot;#澳洲Ego-QV婴儿、儿童保湿霜&quot; class=&quot;headerlink&quot; title=&quot;澳洲Ego QV婴儿、儿童保湿霜&quot;&gt;&lt;/a&gt;&lt;strong&gt;澳洲Ego QV婴儿、儿童保湿霜&lt;/strong&gt;&lt;/h3&gt;
      
    
    </summary>
    
      <category term="澳洲代购" scheme="http://blog.ozairs.com/categories/%E6%BE%B3%E6%B4%B2%E4%BB%A3%E8%B4%AD/"/>
    
    
      <category term="Baby" scheme="http://blog.ozairs.com/tags/Baby/"/>
    
  </entry>
  
  <entry>
    <title>818澳洲那些超热门的婴幼儿营养品</title>
    <link href="http://blog.ozairs.com/uncategorized/818%E6%BE%B3%E6%B4%B2%E9%82%A3%E4%BA%9B%E8%B6%85%E7%83%AD%E9%97%A8%E7%9A%84%E5%A9%B4%E5%B9%BC%E5%84%BF%E8%90%A5%E5%85%BB%E5%93%81/"/>
    <id>http://blog.ozairs.com/uncategorized/818澳洲那些超热门的婴幼儿营养品/</id>
    <published>2019-01-27T23:39:34.000Z</published>
    <updated>2019-01-28T02:49:47.140Z</updated>
    
    <content type="html"><![CDATA[<p>​    澳洲地广人稀，自然环境非常的优越，物产丰富，空气纯净，环境无污染，保证了本地产品独特的天然性，无论是内服还是外用产品，对宝宝们都是百分百安全的！</p><p>澳洲除了婴儿奶粉外，保健品，护肤品，常用药，也非常出名，宝宝从怀胎十月的妈妈肚子里面来到这个美丽世界，少了子宫的保护，宝宝需要有强壮的身体才能茁壮成长，锌、钙、DHA等是孩子成长必需的微量元素，帮助妈妈保护和增强宝宝的免疫力、促进食欲、维护宝宝健康，呵护宝宝健康成长。下面为大家818澳洲那些超热门的婴幼儿、儿童产品，都是很值得推荐给宝妈们的！</p><p>一、    Ostelin婴幼儿维生素D滴剂</p><p>【产品介绍】</p><p><img src="/uncategorized/818澳洲那些超热门的婴幼儿营养品/2.pic.jpg" alt=""></p><p>Ostelin是澳洲唯一一家只生产钙和维D的品牌（除了钙及维D外不生产任何其他产品)，也是澳洲补钙和维D产品的首选，绝对专业中的专业。补钙，维生素D的摄入显得尤为重要。如果宝宝们体内缺少维他命D，无论我们补充多少的钙质也不能够被很好的吸收。草莓口味维生素D滴剂，让宝宝更容易接受。内含一刻度滴管，方便使用。</p><p>【产品功效】</p><p>1、提高肌体对钙、磷的吸收，使血浆钙和血浆磷的水平达到饱和程度。</p><p>2、促进生长和骨骼钙化，促进牙齿健全；</p><p>3、通过肠壁增加磷的吸收，并通过肾小管增加磷的再吸收；</p><p>4、维持血液中柠檬酸盐的正常水平；</p><p>【剂量及使用方法】</p><p>感冒时期：每天1.0ml，随餐服用或随医嘱</p><p>日常保健：每天0.5ml，随餐服用或随医嘱</p><p>开封后建议40天内服用完，可直接滴入宝宝口内或滴在一小勺牛奶、果汁中。（使用前先摇匀，每天剂量不可超过1.0ml）</p><p>【适用人群】</p><p>0-12岁儿童</p><p>二、Ostelin儿童VD+钙咀嚼片</p><p>【产品介绍】</p><p><img src="/uncategorized/818澳洲那些超热门的婴幼儿营养品/3.pic.jpg" alt=""></p><p>说到儿童补钙产品怎么能不提Ostelin，它家的Ostelin儿童钙+VD可是深受妈妈们的喜爱，人称“恐龙钙”是也，绝对是孩子补钙好帮手！比（澳洲）市场上其他儿童维生素补充营养品含有更多的维生素D和钙 ，所含钙为儿童每日所需的钙摄入量，堪称“钙片中的爱马仕”，不含人造色素及香料 ，非常美味的梅子味咀嚼片。</p><p>【产品功效】</p><p>1、促进骨骼钙化和生长。</p><p>2、预防宝宝患佝偻病。</p><p>3、提高机体对钙的吸收。</p><p>4、增强和稳固牙齿、骨骼，预防和缓解缺钙引起的腰酸、腿痛、腿脚抽筋。</p><p>【剂量及使用方法】</p><p>2岁-8岁：每日嚼咀2片</p><p>9岁-13岁：每日嚼咀3片或遵医嘱服用</p><p>【适用人群】</p><p>1、年龄在2-13岁的儿童。</p><p>2、由于饮食的限制，如过敏或挑食的饮食，造成的膳食钙的摄入量不足。</p><p>3、日光照射有限区域的儿童。</p><p>4、    正处于非常快速的成长期的儿童。</p><p>三、Life Space婴幼儿益生菌粉</p><p>【产品介绍】</p><p><img src="/uncategorized/818澳洲那些超热门的婴幼儿营养品/5.pic.jpg" alt=""></p><p>Life Space 是一家专门生产各类高端益生菌产品的澳洲本土公司，针对不同人群，特别量身定制了益生菌产品，包括婴幼儿，儿童，老人，孕妇，成人等，它被澳洲多本母婴杂志评选为澳洲最佳的母婴益生菌产品。Life space益生菌采用冻干粉技术保证了益生菌的存活率，并且无需冷藏储存，外出携带也非常方便。它属于复合型益生菌，蕴含十几种不同品种的天然益生菌群，从而满足人体的不同需求。</p><p>【产品功效】</p><p>有效增强抵抗力，调理肠道，保持身体机能健康</p><p>【适用人群】</p><p>1、免疫力较低，容易感冒发烧咳嗽的婴幼儿</p><p>2、患有湿疹、过敏性体质的婴幼儿</p><p>3、容易腹泻、拉肚子、便秘的婴幼儿</p><p>4、服用抗生素的婴幼儿</p><p>【剂量及使用方法】</p><p>6-18个月宝宝：每天1-2克</p><p>18-36个月宝宝：每天2克 （产品内附1克量勺），或遵医嘱</p><p>开启后三个月内用完，效果最佳，可混入牛奶、果汁及食物当中。</p><p>四、Bio island婴幼儿天然液体乳钙</p><p>【产品介绍】</p><p><img src="/uncategorized/818澳洲那些超热门的婴幼儿营养品/4.pic.jpg" alt=""></p><p>Bioisland 是澳洲婴幼儿营养补充剂销量排名第一的婴幼儿营养品品牌，Bioisland乳钙是直接从牛奶中提取出来的纯天然活性高乳蛋白钙，在体内不需要太多胃酸参与，即可分离呈现离子状态，进而被人体直接吸收利用，迅速调节血钙平衡，消化吸收的过程中，不会给宝宝肠胃带来负担，不会出现气胀、浮肿、便秘，特别适合胃酸不足的婴幼儿补充。</p><p>【产品功效】</p><p>促进宝宝骨骼和牙齿生长，预防佝偻病和骨质疏松。</p><p>【剂量及使用方法】</p><p>0~6个月婴儿：每天1粒</p><p>7个月~12个月：每天1-2粒</p><p>1~3岁儿童：每天2-3粒</p><p>可以挤入牛奶或者果汁中服用。服用起来也特别方便，把小鱼的尾巴拧掉，把液体乳钙挤入宝宝嘴里就可以了。</p><p>五、Bio island顶级深海鳕鱼鱼油</p><p>【产品介绍】</p><p><img src="/uncategorized/818澳洲那些超热门的婴幼儿营养品/6.pic.jpg" alt=""></p><p>鱼油的主要有益成分是Omega-3，是不饱和脂肪酸DHA、EPA，主要作用是益智。鱼肝油主要有益成分是对视力有好处的维生素A以及能促进钙吸收的维生素D，鱼油是脂肪酸，对大脑发育好，鱼肝油是脂溶性维生素，对眼睛和骨骼好。这款产品兼具鱼油和鱼肝油，补脑护眼，一粒搞定。</p><p>【产品功效】</p><p>促进钙吸收，有助宝宝大脑和视力、骨骼发育</p><p>【剂量及使用方法】</p><p>0~6个月婴儿：每天1粒</p><p>7个月~12个月：每天1-2粒</p><p>1~3岁儿童：每天2粒</p><p>可以挤入牛奶或者果汁中服用。服用起来也特别方便，把小鱼的尾巴拧掉，把鱼油挤入宝宝嘴里就可以了。</p><p>六、Bio island海藻油DHA</p><p>【产品介绍】</p><p><img src="/uncategorized/818澳洲那些超热门的婴幼儿营养品/7.pic.jpg" alt=""></p><p>藻油DHA是从藻类中提炼的，因为具体原料藻类的品种以及提炼工艺的不同，有的藻油DHA中含有少量EPA，有的不含有EPA。给宝宝选择要选不含有EPA的藻油DHA。给宝宝选DHA不看来源，要看EPA含量，不论鱼油还是藻油，选EPA含量低的。</p><p>DHA是宝宝成长中的脑黄金，孕妇哺育中的好宝贝。奶粉中的DHA很容易氧化掉，建议应单独补充DHA。</p><p>【产品功效】</p><p>促进视网膜光感细胞的成熟,增进大脑细胞的发育</p><p>【剂量及使用方法】</p><p>0~6个月婴儿：每天1粒</p><p>7个月~6岁儿童：每天1粒</p><p>可以挤入牛奶或者果汁中服用。服用起来也特别方便，把小鱼的尾巴拧掉，把藻油挤入宝宝嘴里就可以了。</p><p>七、Bio island补锌咀嚼片</p><p>【产品介绍】</p><p><img src="/uncategorized/818澳洲那些超热门的婴幼儿营养品/8.pic.jpg" alt=""></p><p>锌是人体不可缺少的微量元素，是几十种金属酶的组成部分，对蛋白质的合成、生长因子的产生和分泌等环节有重要作用，可促进宝宝的生长发育，增强创伤组织的再生能力，维持味觉与食欲，参与维生素A的代谢，增强免疫功能。</p><p>【产品功效】</p><p>1、提高儿童食欲，帮助儿童维持正常味觉，嗅觉功能</p><p>2、增强儿童肌体免疫力</p><p>3、参与儿童体内多种酶的合成与代谢，促进生长发育</p><p>4、参与儿童体内维生素A的代谢和生理功能</p><p>5、保护皮肤黏膜的正常发育</p><p>【剂量及使用方法】</p><p>1-8岁儿童：每天嚼咀1片或遵医嘱</p><p>9-12岁儿童：每天嚼咀2片或遵医嘱</p><p>八、Swisse儿童复合维生素</p><p>【产品介绍】</p><p><img src="/uncategorized/818澳洲那些超热门的婴幼儿营养品/9.pic.jpg" alt=""></p><p>本产品是Swisse专为两岁以上的儿童设计的专用维生素，不仅可以为儿童提供每日所需的多种维生素、矿物质及抗氧化元素，还能减少宝宝因偏食，挑食所导致的营养不良，帮助骨骼的生长，使宝宝健康成长和发育。而且内含的西洋参能有效维持儿童身体的能量水平，荨草和玫瑰果则能增强儿童的免疫力。</p><p>【产品功效】</p><p>1、抵御伤风感冒袭击</p><p>2、缓解降低患感冒的时间长度及程度</p><p>3、帮助孩子增强抗体与健康</p><p>【剂量及使用方法】</p><p>2岁-4岁儿童：每日嚼咀1片</p><p>4岁-12岁儿童：每日嚼咀2片</p><p>随餐或餐后立即服用，或遵医嘱</p><p>九、Nature’s way 儿童三色鱼油</p><p>【产品介绍】</p><p><img src="/uncategorized/818澳洲那些超热门的婴幼儿营养品/10.pic.jpg" alt=""></p><p>澳洲儿童营养专家研配，含有丰富的DHA及EPA以及omega 3，DHA有助大脑及身体发展，EPA有助调节血脂，维持血管正常。omega 3脂肪酸来自优质含脂量较高的鱼，是提升儿童记忆力、学习能力、行为控制力不可或缺的营养成份。</p><p>【产品功效】</p><p>1、强健脑力，提高记忆和学习能力。</p><p>2、保护眼睛，预防和改善近视。</p><p>3、促进胎儿、婴儿、儿童的大脑发育，增长智力。</p><p>4、补充大脑营养、提高大脑灵敏度、增强思维能力、提高记忆。</p><p>【剂量及使用方法】</p><p>6个月~5岁的儿童：每天1粒，或遵医嘱</p><p>5岁以上的儿童：每天1~2粒，或遵医嘱</p><p>年龄小的宝宝可以拧开或剪开胶囊尾部，挤入宝宝口中或加到食物里</p><p>—    End —</p><p>话说，无论给宝贝选择什么样的营养补充品，您首先要保证的都是孩子的均！衡！饮！食！而且不要盲目跟风，要有针对性地根据宝宝年龄、身体状况进行选择，缺什么补什么，适合宝宝的才是最好的！    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    澳洲地广人稀，自然环境非常的优越，物产丰富，空气纯净，环境无污染，保证了本地产品独特的天然性，无论是内服还是外用产品，对宝宝们都是百分百安全的！&lt;/p&gt;
&lt;p&gt;澳洲除了婴儿奶粉外，保健品，护肤品，常用药，也非常出名，宝宝从怀胎十月的妈妈肚子里面来到这个美丽世界，少
      
    
    </summary>
    
    
      <category term="Baby" scheme="http://blog.ozairs.com/tags/Baby/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.ozairs.com/uncategorized/hello-world/"/>
    <id>http://blog.ozairs.com/uncategorized/hello-world/</id>
    <published>2019-01-27T04:05:03.506Z</published>
    <updated>2019-01-27T04:53:20.343Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How To Buy A Car In Australia</title>
    <link href="http://blog.ozairs.com/uncategorized/How-To-Buy-A-Car-In-Australia/"/>
    <id>http://blog.ozairs.com/uncategorized/How-To-Buy-A-Car-In-Australia/</id>
    <published>2019-01-27T03:24:57.000Z</published>
    <updated>2019-01-27T06:36:59.756Z</updated>
    
    <content type="html"><![CDATA[<p>导读：绝大部分的留学生买车主要是为了方便上下学和日常的打工，甚至有一小部分学生喜欢开车出去旅游，澳洲又是开车特别舒服的国家(路宽人少风景美)，基于这些需求，选择一辆质量好，节油，价格实惠的汽车是大部分学……</p><ul><li><p>1、如何选购汽车的品牌</p><p>绝大部分的<strong>留学</strong>生买车主要是为了方便上下学和日常的打工，甚至有一小部分学生喜欢开车出去旅游，澳洲又是开车特别舒服的国家(路宽人少风景美)，基于这些需求，选择一辆质量好，节油，价格实惠的汽车是大部分学生的第一选择。</p><p>其实澳洲本土来说，丰田汽车是保有量最大的品牌，其次是马自达。在中国随处可见的大众汽车，在澳洲几乎很难见得到。原因是丰田的车维修起来，成本低，时间短，而且又节油。有个朋友买了奥迪A4，不小心撞了前保险杠，拿去维修，等了半年才修好······因为德国的配件需要从德国空运，价格不仅贵了两三倍，时间也要等很久。</p><p>划重点：如果不是非常喜欢德系车，建议在澳洲购买日系车，使用更加方便<br><img src="/uncategorized/How-To-Buy-A-Car-In-Australia/3.jpg" alt="日系车"></p></li><li><p>2、去哪里买车呢?</p><p>如果是买新车的话，建议就去当地的4S店，这一点跟中国差不多，多逛几家4S店，多了解一些价格，然后砍到合理的价格就入手。这里需要搞清楚的就是，你看中的这款车是不是最新款，有些“不良商家”喜欢把16年的车说成是17年款，实际上你掏了一样的钱却买了旧款的车子。具体的汽车配置可以上汽车品牌官网查看，也可以上Carsales(澳洲最大的车辆交易网站，可以通过这个网站来查看车子的内外功能配置)</p><p>如果是买二手车的话，购买渠道就很多了，有私人二手车(Private)、二手车行(Dealer)、拍卖行(Auctions)这三种主流购买渠道。刚刚我们推荐的Carsales这个网站，很多人会在上面发布卖车信息(发布信息网站是要收费的)，私人二手车和Dealer二手车都可以在这个上面找到，以下图举例：</p><p><img src="/uncategorized/How-To-Buy-A-Car-In-Australia/2.jpg" alt="二手车"></p><p>  除了Carsales还有Gumtree，Gumtree类似于我们国内的赶集网，58同城这种，发布信息都是免费的，所以导致信息真假和质量层次不齐，我们在这里就不推荐学生去这个网站搜索，Carsales已经可以满足大部分要求了(我们绝对没有收广告费!!工作室太小，Carsales也不认得我们o(╥﹏╥)o)</p><p>  Auctions主要拍卖的是政府的车，公里数比较高，车况一般，而且不能试车，国际驾照不能在拍卖行买车，所以我们就不多做介绍了。</p></li></ul><ul><li><p>3、如何判断这车可不可以买？</p><p>先说二手车行(Dealer)的车，二手车行也分大小，一般价位在5000澳币以内的车只有小车行卖，要求门槛也比较低，车况不一定很好。卖5000-10000澳币的车行在规模上会相对大一些，但是没达到4S店的规模。经手的车辆在性能上和可靠性上一般可以维持12个月的中上水准。1W以上的车大部分都是在连锁Dealer上卖了，例如国内的4S店，价格虽然偏贵，但是车况是很不错的。第一类车行肯定是不推荐的，因为价格本来就便宜，车行还要分一笔钱，可想而知那车品质也好不到哪里去。第二类车行呢可以考虑，不过也要对比价格和提供的服务，比如有些车行不提供完善的保修服务，这种情况就得看你能不能接受了。第三类车行肯定是强烈推荐的，但是呢也分好坏，据我朋友说他见过最好的是墨尔本东部某起亚4s店，提供5年全车部件的保修，还包括卖车时候的蒸汽清洁和全新轮胎。</p><p>接下来是私人二手车了，一般先在网上找到自己喜欢的二手车，然后约车主出来看车，一般建议约学校附近或者住宅区附近，千万别太偏僻了，女孩子家最好多找几个人陪同。如果有朋友懂车，那是最好的，让他陪你一起去看。</p></li></ul><ul><li><p>4、接下来的步骤非常重要</p><p>01、挑选好自己喜欢的车之后，根据车辆的Registration Number上MyRTA(RTA 是Roads &amp; Traffic Authority的简称)的网站花费25刀查阅该车辆的历史纪录，重点查看其有无重大事故发生(Written-Off)，以及车主记录——“前任”越少越好。</p><p>02、检查车辆的保养记录(Service Logbook)，查看车辆是否按期保养。</p><p>03、记得查看和拍照保存车主的身份证和车子的Rego(汽车上路缴的路费单)，检查名字是否一致，同时记下相关信息，方便以后查询。</p><p>04、二手车的牌照，在汽车转手时也需要从卖主转到卖主。卖主需要在交易完成时在Rego单背面签字，并尽快填写车辆过户表(Vehicle Registration Transfer Form)给买主，让其交到RTA完成车主转移。</p><p>05、过户要求带上驾照、驾照翻译件和护照(或学生卡)和地址的信件去路局进行过户。过户的时候购买价格可议根据自己需求而填写成交金额，因为过户费需要缴纳成交金额的百分比，所以成交金额填写的越高需要贡献给政府的税金也就越高。</p><p>06、由于RWC(去过户的时候强制要求的一张证明，差不多就是车辆的体检单，有效期为1个月，大部分汽车维修店可以做RWC证明)有效期仅为一个月，建议完成购买之后尽快去过户;如果买的是Dealer的车，一般都是Drive Away服务，就是交钱立马开走。如果是私人二手车，就得找维修店去做。</p><p>07、买完车之后记得一定要买汽车保险，不同的保险公司报价也不一样，可以多咨询多比较。澳洲的保险公司一般以RACV(不同州结尾不同)、AAMI、Allianz这三家公司为主。网上可以搜到不同的险种和价格，如果确定要买的话，直接打电话说你要买就好了，保险当时就生效。</p><p><img src="/uncategorized/How-To-Buy-A-Car-In-Australia/1.png" alt="车险"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;导读：绝大部分的留学生买车主要是为了方便上下学和日常的打工，甚至有一小部分学生喜欢开车出去旅游，澳洲又是开车特别舒服的国家(路宽人少风景美)，基于这些需求，选择一辆质量好，节油，价格实惠的汽车是大部分学……&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、如何选购汽车的品牌&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Car" scheme="http://blog.ozairs.com/tags/Car/"/>
    
  </entry>
  
  <entry>
    <title>Serverless Overview</title>
    <link href="http://blog.ozairs.com/uncategorized/Serverless-Overview/"/>
    <id>http://blog.ozairs.com/uncategorized/Serverless-Overview/</id>
    <published>2019-01-26T10:58:05.000Z</published>
    <updated>2019-01-27T04:53:20.340Z</updated>
    
    <content type="html"><![CDATA[<p>今年有人提出了2018年微服务将疯狂至死，可见微服务的争论从未停止过。在这我将自己对微服务的理解整理了一下，希望对大家有所帮助。</p><p>1.什么是微服务</p><p>1）一组小的服务（大小没有特别的标准，只要同一团队的工程师理解服务的标识一致即可）<br>2）独立的进程（java的tomcat，nodejs等）<br>3）轻量级的通信（不是soap，是http协议）<br>4）基于业务能力（类似用户服务，商品服务等等）<br>5）独立部署（迭代速度快）<br>6）无集中式管理（无须统一技术栈，可以根据不同的服务或者团队进行灵活选择）<br>ps：微服务的先行者Netflix公司，开源了一些好的微服务框架，后续会有介绍。</p><ol start="2"><li>怎么权衡微服务的利于弊</li></ol><p>利：<br>强模块边界 。（模块化的演化过程：类–&gt;组件/类库（sdk）–&gt;服务(service)，方式越来越灵活）<br>可独立部署。<br>技术多样性。<br>弊：<br>分布式复杂性。<br>最终一致性。（各个服务的团队，数据也是分散式治理，会出现不一致的问题）<br>运维复杂性。<br>测试复杂性。</p><ol start="3"><li>企业在什么时候考虑引入微服务</li></ol><p>从生产力和系统的复杂性这两个方面来看。公司一开始的时候，业务复杂性不高，这时候是验证商业模式的时候，业务简单，用单体服务反而生产力很高。随着公司的发展，业务复杂性慢慢提高，这时候就可以采用微服务来提升生产力了。至于这个转化的点，需要团队的架构师来进行各方面衡量，就个人经验而言，团队发展到百人以上，采用微服务就很有必要了。<br>有些架构师是具有微服务架构能力，所以设计系统时就直接设计成了微服务，而不是通过单服务慢慢演化发展成微服务。在这里我并不推荐这种做法，因为一开始对业务领域并不是很了解，并且业务模式还没有得到验证，这时候上微服务风险比较高，很有可能失败。所以建议大家在单服务的应用成熟时，并且对业务领域比较熟悉的时候，如果发现单服务无法适应业务发展时，再考虑微服务的设计和架构。<br>4.微服务的组织架构</p><p>如上图左边，传统的企业中，团队是按职能划分的。开发一个项目时，会从不同的职能团队找人进行开发，开发完成后，再各自回到自己的职能团队，这种模式实践证明，效率还是比较低的。<br>如上图右边，围绕每个业务线或产品，按服务划分团队。团队成员从架构到运维，形成一个完整的闭环。一直围绕在产品周围，进行不断的迭代。不会像传统的团队一样离开。这样开发效率会比较高。至于这种团队的规模，建议按照亚马逊的两个披萨原则，大概10人左右比较好。<br>5：怎么理解中台战略和微服务</p><p>中台战略的由来：马云2015年去欧洲的一家公司supersell参观，发现这个公司的创新能力非常强，团队的规模很小，但是开发效率很高。他们就是采用中台战略。马云感触很深，回国后就在集团内部推出了中台战略。</p><p>简单的理解就是把传统的前后台体系中的后台进行了细分。阿里巴巴提出了大中台小前台的战略。就是强化业务和技术中台，把前端的应用变得更小更灵活。当中台越强大，能力就越强，越能更好的快速响应前台的业务需求。打个比喻，就是土壤越肥沃，越适合生长不同的生物，打造好的生态系统。<br>6：服务分层</p><p>每个公司的服务分层都不相同，有的公司服务没有分层，有的怎分层很多。目前业界没有统一的标准。<br>下面推荐一个比较容易理解的两层结构。</p><p>1：基础服务： 比如一个电商网站，商品服务和订单服务就属于基础服务（核心领域服务）。缓存服务，监控服务，消息队列等也属于基础服务（公共服务）<br>2：聚合服务 ：例如网关服务就算一种聚合服务（适配服务）。<br>这是一种逻辑划分，不是物理划分，实际设计的东西很多很复杂。<br>7：微服务的技术架构体系</p><p>下图是一个成型的互联网微服务的架构体系：</p><p>1：接入层 负载均衡作用，运维团队负责<br>2：网关层 反向路由，安全验证，限流等<br>3：业务服务层 基础服务和领域服务<br>4：支撑服务层<br>5：平台服务<br>6：基础设施层 运维团队负责。（或者阿里云）<br>8：微服务的服务发现的三种方式</p><p>第一种：如下图所示，传统的服务发现（大部分公司的做法）。服务上线后，通知运维，申请域名，配置路由。调用方通过dns域名解析，经过负载均衡路由，进行服务访问。缺点： LB的单点风险，服务穿透LB，性能也不是太好</p><p>第二种：也叫客户端发现方式。如下图所示。通过服务注册的方式，服务提供者先注册服务。消费者通过注册中心获取相应服务。<br>并且把LB的功能移动到了消费者的进程内，消费者根据自身路由去获取相应服务。优点是，没有了LB单点问题，也没有了LB的中间一跳，性能也比较好。但是这种方式有一个非常明显的缺点就是具有非常强的耦合性。针对不同的语言，每个服务的客户端都得实现一套服务发现的功能。</p><p>第三种：也叫服务端发现方式，如下图所示。和第二种很相似。但是LB功能独立进程单独部署，所以解决了客户端多语言开发的问题。唯一的缺点就是运维成比较高，每个节点都得部署一个LB的代理，例如nginx。</p><p>9.微服务网关</p><p>网关就好比一个公司的门卫。屏蔽内部细节，统一对外服务接口。</p><p>下图是一个网关所处位置的示例图。</p><p>10：Netflix Zuul网关介绍</p><p>核心就是一个servlet，通过filter机制实现的。主要分为三类过滤器：前置过滤器，过滤器和后置过滤器。<br>主要特色是，这些过滤器可以动态插拔，就是如果需要增加减少过滤器，可以不用重启，直接生效。原理就是：通过一个db维护过滤器（上图蓝色部分），如果增加过滤器，就将新过滤器编译完成后push到db中，有线程会定期扫描db，发现新的过滤器后，会上传到网关的相应文件目录下，并通知过滤器loader进行加载相应的过滤器。</p><p>整个网关调用的流程<br>上图从左变http Request开始经过三类过滤器，最终到最右边的Http Response，这就是Zull网关的整个调用流程。<br>11：微服务的路由发现体系</p><p>整个微服务的路由发现体系，一般由服务注册中心和网关两部分组成。以NetFlix为例子，Eureka和Zull这两个组件支撑了netFlix整个的路由发现体系。如下图所示，首先外部请求发送到网关，网关去服务注册中心获取相应的服务，进行调用。其次内部服务间的调用，也通过服务注册中心进行的</p><p>12.微服务配置中心</p><p>目前大部分公司都是把配置写到配置文件中，遇到修改配置的情况，成本很高。并且没有修改配置的记录，出问题很难追溯。配置中心就接解决了以上的问题。<br>可配置内容：数据库连接，业务参数等等</p><p>配置中心就是一个web服务，配置人员通过后台页面修改配置，各个服务就会得到新的配置参数。实现方式主要有两种，一种是push，另一种是pull。两张方式各有优缺点。push实时性较好，但是遇到网络抖动，会丢失消息。pull不会丢失消息但是实时性差一些。大家可以同时两种方式使用，实现一个比较好的效果。如下图所示，这是一个国内知名互联网公司的配置中心架构图。</p><p>开源地址：<a href="http://github.com/ctripcorp/appollo" target="_blank" rel="noopener">http://github.com/ctripcorp/appollo</a><br>13：RPC遇到了REST</p><p>内部一些核心服务，性能要求比较高的可以采用RPC，对外服务的一般可以采用rest。<br>14：服务框架和治理</p><p>微服务很多的时候，就需要有治理了。一个好的微服务框架一般分为以下14个部分。如下图所示。这就是开篇所说的，微服务涉及的东西很多，有些初创公司和业务不成熟的产品是不太适合的，成本比较高。<br>目前国内比较好的微服务框架就是阿里巴巴的DUBBO了,国外的就是spring cloud,大家可以去研究一下.</p><p>15：监控体系</p><p>监控是微服务治理的重要环节。一般分为以下四层。如下图所示。</p><p>监控的内容分为五个部分：日志监控，Metrics监控（服务调用情况），调用链监控，告警系统和健康检查。<br>日志监控，国内常用的就是ELK+KAFKA来实现。健康检查和Metrics，像spring boot会自带。Nagios也是一个很好的开源监控框架。<br>16:Trace调用链监控</p><p>调用链监控是用来追踪微服务之前依赖的路径和问题定位。例如阿里的鹰眼系统。主要原理就是子节点会记录父节点的id信息。</p><p>下图是目前比较流行的调用链监控框架。</p><p>17：微服务的限流熔断</p><p>假设服务A依赖服务B和服务C，而B服务和C服务有可能继续依赖其他的服务，继续下去会使得调用链路过长。如果在A的链路上某个或几个被调用的子服务不可用或延迟较高，则会导致调用A服务的请求被堵住，堵住的请求会消耗占用掉系统的线程、io等资源，当该类请求越来越多，占用的计算机资源越来越多的时候，会导致系统瓶颈出现，造成其他的请求同样不可用，最终导致业务系统崩溃。<br>一般情况对于服务依赖的保护主要有两种方式：熔断和限流。目前最流行的就是Hystrix的熔断框架。<br>下图是Hystrix的断路器原理图：</p><p>限流方式可以采用zuul的API限流方法。<br>18.Docker 容器部署技术&amp;持续交付流水线</p><p>随着微服务的流行，容器技术也相应的被大家重视起来。容器技术主要解决了以下两个问题：<br>1：环境一致性问题。例如java的jar/war包部署会依赖于环境的问题（操着系统的版本，jdk版本问题）。<br>2：镜像部署问题。例如java，rubby，nodejs等等的发布系统是不一样的，每个环境都得很麻烦的部署一遍，采用docker镜像，就屏蔽了这类问题。<br>下图是Docker容器部署的一个完整过程。</p><p>更重要的是，拥有如此多服务的集群环境迁移、复制也非常轻松，只需选择好各服务对应的Docker服务镜像、配置好相互之间访问地址就能很快搭建出一份完全一样的新集群。<br>19.容器调度和发布体系</p><p>目前基于容器的调度平台有Kubernetes，mesos，omega。下图是mesos的一个简单架构示意图。</p><p>下图是一个完整的容器发布体系</p><p>在此我向大家推荐一个架构学习交流群。交流学习群号：478030634  里面会分享一些资深架构师录制的视频录像：有Spring，MyBatis，Netty源码分析，高并发、高性能、分布式、微服务架构的原理，JVM性能优化、分布式架构等这些成为架构师必备的知识体系。还能领取免费的学习资源，目前受益良多</p><p>大家觉得文章对你还是有一点点帮助的，大家可以点击下方二维码进行关注。 《Java烂猪皮》 公众号聊的不仅仅是Java技术知识，还有面试等干货，后期还有大量架构干货。大家一起关注吧！关注烂猪皮，你会了解的更多………….. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年有人提出了2018年微服务将疯狂至死，可见微服务的争论从未停止过。在这我将自己对微服务的理解整理了一下，希望对大家有所帮助。&lt;/p&gt;
&lt;p&gt;1.什么是微服务&lt;/p&gt;
&lt;p&gt;1）一组小的服务（大小没有特别的标准，只要同一团队的工程师理解服务的标识一致即可）&lt;br&gt;2）独立
      
    
    </summary>
    
    
      <category term="Serverless" scheme="http://blog.ozairs.com/tags/Serverless/"/>
    
  </entry>
  
  <entry>
    <title>Use-of-Terraform</title>
    <link href="http://blog.ozairs.com/uncategorized/Terraform%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.ozairs.com/uncategorized/Terraform使用/</id>
    <published>2019-01-12T23:49:25.000Z</published>
    <updated>2019-01-27T04:53:20.344Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.terraform.io/" target="_blank" rel="noopener">Terraform</a> 是一个 IT 基础架构自动化编排工具，它的口号是 “Write, Plan, and create Infrastructure as Code”, 基础架构即代码。具体的说就是可以用代码来管理维护 IT 资源，比如针对 AWS，我们可以用它创建，修改，删除 S3 Bucket, Lambda, EC2 实例，Kinesis， VPC 等各种资源。并且在真正运行之前可以看到执行计划(即干运行-dryrun)。由于状态保存到文件中，因此能够离线方式查看资源情况 – 当然，前提是不要在 Terraform 之外对资源进行修改。</p><p>Terraform 配置的状态除了能够保存在本地文件中，也可以保存到 <a href="https://www.terraform.io/docs/backends/types/consul.html" target="_blank" rel="noopener">Consul</a>, <a href="https://www.terraform.io/docs/backends/types/s3.html" target="_blank" rel="noopener">S3</a>, azure, http, swift 等处。</p><p>Terraform 是一个高度可扩展的工具，通过 Provider 来支持新的基础架构，AWS 不过为目前官方内建 68 个 <a href="https://www.terraform.io/docs/providers/index.html" target="_blank" rel="noopener">Providers</a> 中的一个。其他能用 Terraform 的地方有 Alicloud(阿里云, 实名制备案才能用), Google Cloud, Heroku, Kubernetes, Microsoft Azure, MySQL, RabbitMQ, Docker 等等。愿意的话可以写自己的 Provider, 如搞个 Kafka 的话，用来管理 Topic 等的创建，维护工作。</p><p>Terraform 之前我们对 AWS 的操作用的是 awscli, 或 <a href="https://serverless.com/framework/" target="_blank" rel="noopener">Serverless</a>。awscli 什么都能做，但它是无状态的，必须明确用不同的命令来创建，修改和删除。Serverless 不是用来管理基础架构的，用它创建  Lambda 时创建资源都是很麻烦的事。AWS 提供的 CloudFormation 才是与 Terraform 较类似的工具，但是看到用法就头疼。</p><p>下面从最简单例子开始，看看怎么用 Terraform 创建，删改，修改 S3 Bucket。本地系统为 Mac OS。</p><p>\1. Terraform 安装</p><p>brew install terraform</p><p>安装后 shell 命令就是 terraform, 常用的是 terraform init, terraform plan, terraform apply</p><p>\2. 创建配置文件</p><p>像 git 一样，每个 Terraform 项目需要自己单独的目录空间，所以我们创建一个 terraform-learning 目录</p><p>mkdir terraform-learning</p><p>cd terraform-learning</p><p>该目录下的所有  <em>.tf 文件都会被 Terraform 加载，在初始化 Terraform 工作空间之前必须至少要有一个 </em>.tf 文件。我们这里建立文件 main.tf, 内容如下</p><p><img src="/Users/mark/Library/Application Support/typora-user-images/142F3AD6-DFE0-4683-9528-F3115C02FEE4/pastedGraphic.png" alt="pastedGraphic.png"></p><p>Terraform 配置的语法是该公司 HashiCorp 独创的 <a href="https://github.com/hashicorp/hcl" target="_blank" rel="noopener">HCL</a>(HashiCorp configuration language), 它可以兼容 JSON 格式。</p><p>上面 tf 文件在 Vim 中的语法加亮是安装的 hashivim/vim-terraform 插件。</p><p>我们写好了 *.tf 文件后可以调用 terraform fmt 对配置文件进行格式化，它比较喜欢被 Java 弃用的等号对齐的格式。</p><p>\3. 配置文件介绍</p><p>从正式跨入 terraform 命令正题之前先来大概的介绍一下上面那个 main.tf 文件。</p><p><strong>1)</strong> <a href="https://www.terraform.io/docs/providers/aws/index.html" target="_blank" rel="noopener"><strong>provider “aws”</strong></a> <strong>部分</strong>，它指定选用什么 provider, 以及验证信息。aws 既允许指定 access_key 和 secret_key</p><p>provider “aws” {</p><p>​    region           = “us-east-1”</p><p>​    access_key  = “your-access-key-here”</p><p>​    secret_key   = “your-secret-key-here”</p><p>}</p><p>也能够指定证书文件中的 profile</p><p>provider “aws” {</p><p>​    region                                  = “us-east-1”</p><p>​    shared_credentials_file  = “~/.aws/credentials”   //不指定的话，默认值是 “~/.aws/credentials”</p><p>​    profile                                  = “yanbin”                        //不指定的话，默认值是 “default”</p><p>}</p><p>如果是使用 shared_credentials_file 中的 profile, 请确定您以预先生成好的 credentials 文件及有效的 profile。</p><p>更多关于 AWS Provider 的配置请参考 <a href="https://www.terraform.io/docs/providers/aws/index.html" target="_blank" rel="noopener">https://www.terraform.io/docs/providers/aws/index.html</a></p><p><strong>2) resource “aws_s3_bucket” “s3_bucket”</strong> <strong>部分</strong></p><p>这只是我们今天举的一个小例子，点击链接 <a href="https://www.terraform.io/docs/providers/aws/r/s3_bucket.html" target="_blank" rel="noopener">aws_s3_bucket</a> 查看 S3 Bucket 所有的配置项。Terraform 能够管理的所有 AWS 资源也能从前面那个链接中看到。</p><p>如果 bucket yanbin-test-bucket 不存在的话，运行 terraform apply 将会创建它，否则试图更新该 bucket。此例子只指定了 bucket 的 acl 和 tag 信息。terraform destroy 用来删除已存在的  bucket。</p><p>注意：terraform 配置文件中只指定要管理的资源对象，并不关心操作资源的行为–创建，修改，删除操作。操作行为与 Terraform 的状态有关系，无则创建，有则修改，更名会拆分为除旧立新两个操作，terraform destroy 用于显式删除资源。后面实例操作时会讲到。</p><p>注：resource “aws_s3_bucket” “s3_bucket” { 中，resource 后第一个是 type, 即资源名，第二个参是 name。其实 “s3_bucket” 在这里没什么用，只是一个描述或助记符而已。(2017-08-28): 更正一下，在作为变量引用的时候就要用到它，例如在后面要为 Lambda 创建一个 S3 Event 的 Trigger, 就要写成 event_source_arn = “${aws_s3_bucket.s3_bucket.arn}”, 引用时不需要知道实际的名称。</p><p>\4. 初始化工作目录</p><p>在初始化 Terraform 工作目录之前， 其他命令如 apply, plan 多是不可用的，提示需要初始化工作目录，命令是</p><p>terraform init</p><p>它要做的事情像是 git init 加上 npm install，执行完了 terraform init 之后会在当前目录中生成 .terraform 目录，并依照 *.tf 文件中的配置下载相应的插件。</p><p>\5. 执行 Terraform 管理命令</p><p>有了前面的准备之后，终于可以开始运行 Terraform 的管理命令了。Terraform 在正式执行之前提供了预览执行计划的机会，让我们清楚的了解将要做什么</p><p>terraform plan</p><p><img src="/Users/mark/Library/Application Support/typora-user-images/142F3AD6-DFE0-4683-9528-F3115C02FEE4/pastedGraphic_1.png" alt="pastedGraphic_1.png"></p><p>由此计划还能知道关于 aws_s3_bucket 有些什么配置项，比如配置中可以加上 acceleration_status = “Enabled”</p><p>terraform apply</p><p><img src="/Users/mark/Library/Application Support/typora-user-images/142F3AD6-DFE0-4683-9528-F3115C02FEE4/pastedGraphic_2.png" alt="pastedGraphic_2.png"></p><p>这样便在 AWS 上创建了一个 S3 bucket “yanbin-test-bucket”, 同时会在当前目录中生成一个<a href="https://www.terraform.io/docs/state/index.html" target="_blank" rel="noopener">状态</a>文件 terraform.tfstate, 它是一个标准的 JSON 文件。这个文件对 Terraform 来说很重要，它会影响 terraform plan 的决策，虽然不会影响到实际的执行效果。我们可以把它存到远端，如 S3 或 Consul。terraform state [list|mv|pull|push|rm|show] 用来操作状态文件。</p><p>此时什么也不改，再次执行 terraform plan, 会显示没什么要做的</p><p>aws_s3_bucket.s3_bucket: Refreshing state… (ID: yanbin-test-bucket)</p><p>No changes. Infrastructure is up-to-date.</p><p>如果对 main.tf 作点小改，改个 tag 属性，再次 terraform plan</p><p>~ aws_s3_bucket.s3_bucket</p><p>tags.Name: “Created by Terraform” =&gt; “sCreated by Terraform”</p><p>Plan: 0 to add, 1 to change, 0 to destroy.</p><p>为什么说 terraform plan 是基于状态文件 terraform.tfstate 作出的呢？我们可以删除这个状态文件，然后执行 terraform plan 看看</p><p>+ aws_s3_bucket.s3_bucket</p><p>​    …..</p><p>​    bucket: “yanbin-test-bucket”</p><p>​    ……</p><p>​    tags.Environment: “QA”</p><p>​    ……</p><p>Plan: 1 to add, 0 to change, 0 to destroy.</p><p>Terraform 由于缺乏 terraform.tfstate 对比，所以认为是要添加一个 bucket, 但是实际执行 terraform apply 时，连接到远端 AWS, 发现该 bucket 已存在就只是进行更新。terraform apply 总能给出正确的操作结果。同理如果状态文件中说有那个 bucket, terraform plan 会说是更新，但 AWS 没有那个  bucket，实际执行 terraform apply 也会进行添加的。</p><p>资源更名</p><p>如果把 main.tf 中的</p><p>bucket = “yanbin-test-bucket”</p><p>改成</p><p>bucket = “yanbin-test-bucket-rename”</p><p>即欲为 bucket 更名，用 terraform plan 看下计划</p><p><img src="/Users/mark/Library/Application Support/typora-user-images/142F3AD6-DFE0-4683-9528-F3115C02FEE4/pastedGraphic_3.png" alt="pastedGraphic_3.png"></p><p>实际上 terraform apply 也是先删除旧的，再创建新的。Terraform 像 git 一样用不同颜色和  +/- 号来显示变动操作</p><p>最后是 terraform destroy 命令，把 *.tf 文件中配置的所有资源从 AWS 上清理掉。</p><p>关于 Terraform 工作目录中文件命名</p><p>Terraform 运行时会读取工作目录中所有的 <em>.tf, </em>.tfvars 文件，所以我们不必把所有的东西都写在单个文件中去，应按职责分列在不同的文件中，例如：</p><p>provider.tf                – provider 配置</p><p>terraform.tfvars      – 配置 provider 要用到的变量</p><p>varable.tf                  – 通用变量</p><p>resource.tf                – 资源定义</p><p>data.tf                        – 包文件定义</p><p>output.tf                    – 输出</p><p>以此篇最简单的入门出发，以后可以深入了解 Lambda, Lambda 触发器，及 API Gateway, EC2 实例怎么用 Terraform 来管理，也知晓了资源的可用属性应该到哪里去查。</p><p>一个小提示：在执行像 terraform plan 或 terraform apply 等命令的时候，可以按下 ctrl + c 让控制台输出详细的日志信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.terraform.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Terraform&lt;/a&gt; 是一个 IT 基础架构自动化编排工具，它的口号是 “Write, Plan, and create Infras
      
    
    </summary>
    
    
      <category term="Cloud" scheme="http://blog.ozairs.com/tags/Cloud/"/>
    
  </entry>
  
</feed>
