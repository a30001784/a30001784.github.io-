<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>带你走进美丽的墨尔本</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ozairs.com/"/>
  <updated>2019-03-14T03:00:06.688Z</updated>
  <id>http://blog.ozairs.com/</id>
  
  <author>
    <name>Mark Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年DevOps必备面试问题</title>
    <link href="http://blog.ozairs.com/DevOps/2019%E5%B9%B4DevOps%E5%BF%85%E5%A4%87%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.ozairs.com/DevOps/2019年DevOps必备面试问题/</id>
    <published>2019-03-14T02:51:03.000Z</published>
    <updated>2019-03-14T03:00:06.688Z</updated>
    
    <content type="html"><![CDATA[<p>您是DevOps工程师还是想进入DevOps？那么，未来就是你的。顶级研究公司Forrester宣布2018年为“ <a href="https://go.forrester.com/blogs/2018-the-year-of-enterprise-devops/" target="_blank" rel="noopener">企业DevOps年</a> ”，并估计全球有50％的组织正在实施DevOps。</p><p>在这篇博客中，我列出了几十个可能的问题，面试官会问潜在的DevOps员工。此列表是根据Edureka教练的专业知识精心制作的，他们是行业专家，来自60个国家的近30,000名Edureka DevOps学习者的经验。</p><p>要理解的关键是DevOps不仅仅是一种技术集合，而是<a href="https://www.edureka.co/blog/devops-is-neither-a-method-nor-a-tool-its-a-culture/" target="_blank" rel="noopener">一种思维方式，一种文化</a>。DevOps需要一种将运营与发展相结合的文化转变，并需要一个相互关联的技术工具链来促进协作变革。由于DevOps理念仍处于初期阶段，因此DevOps的应用以及适应和协作所需的带宽因组织而异。但是，您可以开发<a href="https://www.edureka.co/blog/devops-skills" target="_blank" rel="noopener">DevOps技能组合，</a>使您成为任何类型组织的理想候选人。</p><p>如果您想以周到，有条理的方式开发DevOps技能并获得DevOps工程师认证，<a href="https://www.edureka.co/devops" target="_blank" rel="noopener">我们很乐意为您提供帮助</a>。完成Edureka DevOps认证课程后，我们承诺您将能够处理业内各种DevOps角色。</p><p><strong>成为DevOps工程师有哪些要求？</strong></p><p>在寻求填写DevOps角色时，组织会寻找一套清晰的技能。其中最重要的是：</p><ul><li>具有基础架构自动化工具的经验，如Chef，Puppet，Ansible，SaltStack或Windows PowerShell DSC。</li><li>熟练使用Ruby，Python，PHP或Java等网络语言。</li><li>人际关系技巧，可帮助您跨团队和角色进行沟通和协作。</li></ul><h2 id="顶级Devops面试问题"><a href="#顶级Devops面试问题" class="headerlink" title="顶级Devops面试问题"></a><strong>顶级Devops面试问题</strong></h2><p>这些是您在DevOps求职面试中可能遇到的首要问题：</p><p><strong>一般DevOps面试问题</strong></p><p>此类别将包含与任何特定DevOps阶段无关的问题。这里的问题旨在测试您对DevOps的理解，而不是关注特定工具或阶段。</p><h3 id="Q1。DevOps和Agile之间的根本区别是什么？"><a href="#Q1。DevOps和Agile之间的根本区别是什么？" class="headerlink" title="Q1。DevOps和Agile之间的根本区别是什么？"></a><strong>Q1。DevOps和Agile之间的根本区别是什么？</strong></h3><p>两者之间的差异列于下表中。</p><table><thead><tr><th><strong>特征</strong></th><th><strong>DevOps的</strong></th><th><strong>敏捷</strong></th></tr></thead><tbody><tr><td><strong>敏捷</strong></td><td>开发和运营方面的敏捷性</td><td>只有发展的敏捷性</td></tr><tr><td><strong>流程/实践</strong></td><td>涉及CI，CD，CT等流程。</td><td>涉及敏捷Scrum，敏捷看板等实践。</td></tr><tr><td><strong>重点关注领域</strong></td><td>及时性和质量同等重要</td><td>及时性是主要优先事项</td></tr><tr><td><strong>发布周期/开发冲刺</strong></td><td>较小的发布周期和即时反馈</td><td>较小的发布周期</td></tr><tr><td><strong>反馈来源</strong></td><td>反馈来自自我（监测工具）</td><td>反馈来自客户</td></tr><tr><td><strong>工作范围</strong></td><td>敏捷性和自动化需求</td><td>只有敏捷</td></tr></tbody></table><h3 id="Q2。DevOps需要什么？"><a href="#Q2。DevOps需要什么？" class="headerlink" title="Q2。DevOps需要什么？"></a><strong>Q2。DevOps需要什么？</strong></h3><p>据我所知，这个答案应该从解释一般市场趋势开始。公司不是发布大量功能，而是试图通过一系列发布列表来查看是否可以将小功能传输给客户。这具有许多优点，例如来自客户的快速反馈，更好的软件质量等，这反过来导致高的客户满意度。为实现这一目标，公司必须：</p><ol><li>增加部署频率</li><li>降低新版本的故障率</li><li>缩短了修复之间的准备时间</li><li>新版本崩溃时平均恢复时间更快</li></ol><p>DevOps满足所有这些要求，有助于实现无缝的软件交付。您可以举出像Etsy，Google和亚马逊这样的公司的例子，这些公司已经采用了<a href="https://www.edureka.co/blog/why-devops-improves-organization-performance/" target="_blank" rel="noopener">DevOps来达到</a>甚至五年前<a href="https://www.edureka.co/blog/why-devops-improves-organization-performance/" target="_blank" rel="noopener">无法</a>想象<a href="https://www.edureka.co/blog/why-devops-improves-organization-performance/" target="_blank" rel="noopener">的性能水平</a>。他们每天进行数十，数百甚至数千次代码部署，同时提供世界级的稳定性，可靠性和安全性。</p><p>如果我必须测试你对DevOps的了解，你应该知道Agile和DevOps之间的区别。下一个问题是针对这一点的。</p><h3 id="Q3。DevOps与Agile-SDLC有何不同？"><a href="#Q3。DevOps与Agile-SDLC有何不同？" class="headerlink" title="Q3。DevOps与Agile / SDLC有何不同？"></a><strong>Q3。DevOps与Agile / SDLC有何不同？</strong></h3><p>我建议你按照以下说明进行操作：</p><p>敏捷是一套关于如何生产即开发软件的价值观和原则。示例：如果您有一些想法，并且希望将这些想法转变为可用的软件，则可以使用敏捷值和原则作为实现此目的的方法。但是，该软件可能只适用于开发人员的笔记本电脑或测试环境。您希望以安全，简单的方式快速，轻松，可重复地将该软件移植到生产基础架构中。要做到这一点，您需要DevOps工具和技术。</p><p>您可以总结一下，敏捷软件开发方法侧重于软件的开发，但另一方面，DevOps负责开发以及以最安全和最可靠的方式部署软件。这是一个博客，将为您提供有关<a href="https://www.edureka.co/blog/what-is-devops/" target="_blank" rel="noopener">DevOps演变的</a>更多信息。</p><p>现在请记住，您在之前的答案中包含了DevOps工具，因此请准备好回答与此相关的一些问题。</p><h3 id="Q4。哪些是最顶级的DevOps工具？你做过哪些工具？"><a href="#Q4。哪些是最顶级的DevOps工具？你做过哪些工具？" class="headerlink" title="Q4。哪些是最顶级的DevOps工具？你做过哪些工具？"></a><strong>Q4。哪些是最顶级的DevOps工具？你做过哪些工具？</strong></h3><p>最受欢迎的DevOps工具如下所述：</p><ul><li>Git：版本控制系统工具</li><li>Jenkins：持续集成工具</li><li>Selenium：连续测试工具</li><li>Puppet，Chef，Ansible：配置管理和部署工具</li><li>Nagios：持续监控工具</li><li>Docker：容器化工具</li></ul><p>如果需要，您还可以提及任何其他工具，但请确保在答案中包含上述工具。<br>答案的第二部分有两种可能性：</p><ol><li>如果您有上述所有工具的经验，那么您可以说我已经使用所有这些工具来开发高质量的软件并轻松，经常和可靠地部署这些软件。</li><li>如果您只有上述某些工具的经验，那么请提及这些工具，并说我对这些工具有专业性，并对其余工具进行了概述。</li></ol><p>我们的DevOps认证课程包括最流行的DevOps工具的实际操作培训。<a href="https://www.edureka.co/devops" target="_blank" rel="noopener">找出下一批次开始的时间</a>。</p><h3 id="Q5。所有这些工具如何协同工作？"><a href="#Q5。所有这些工具如何协同工作？" class="headerlink" title="Q5。所有这些工具如何协同工作？"></a><strong>Q5。所有这些工具如何协同工作？</strong></h3><p>下面给出了一个通用的逻辑流程，其中所有内容都自动进行无缝交付 但是，根据要求，此流程可能因组织而异。</p><ol><li>开发人员开发代码，此源代码由Git等版本控制系统工具管理。</li><li>开发人员将此代码发送到Git存储库，并且代码中所做的任何更改都将提交到此存储库。</li><li>Jenkins使用Git插件从存储库中提取此代码，并使用Ant或Maven等工具构建它。</li><li>配置管理工具，如puppet部署和配置测试环境，然后Jenkins在测试环境中发布此代码，使用selenium等工具进行测试。</li><li>一旦代码被测试，Jenkins就会将其发送到生产服务器上进行部署（甚至生产服务器也由puppet等工具进行配置和维护）。</li><li>部署后，Nagios等工具会持续监控。</li><li>Docker容器提供测试环境来测试构建功能。</li></ol><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/10/2-DevOps-tools.png" alt="devops工具 -  devops面试问题"></p><h3 id="Q6。DevOps有哪些优势？"><a href="#Q6。DevOps有哪些优势？" class="headerlink" title="Q6。DevOps有哪些优势？"></a><strong>Q6。DevOps有哪些优势？</strong></h3><p>对于这个答案，您可以使用您过去的经验并解释DevOps如何帮助您完成上一份工作。如果您没有任何此类经验，那么您可以提及以下优势。</p><p>技术优势：</p><ul><li>持续的软件交付</li><li>修复不太复杂的问题</li><li>更快地解决问题</li></ul><p>商业利益：</p><ul><li>更快速地传递功能</li><li>更稳定的操作环境</li><li>更多时间可用于增加价值（而不是修复/维护）</li></ul><h3 id="Q7。DevOps帮助我们实现的最重要的事情是什么？"><a href="#Q7。DevOps帮助我们实现的最重要的事情是什么？" class="headerlink" title="Q7。DevOps帮助我们实现的最重要的事情是什么？"></a><strong>Q7。DevOps帮助我们实现的最重要的事情是什么？</strong></h3><p>据我所知，DevOps帮助我们实现的最重要的事情是尽可能快地将更改投入生产，同时最大限度地降低软件质量保证和合规性的风险。这是DevOps的主要目标。在<a href="https://www.edureka.co/blog/devops-tutorial" target="_blank" rel="noopener">DevOps教程</a>博客中了解更多信息。<br>但是，您可以添加DevOps的许多其他积极效果。例如，团队之间更清晰的沟通和更好的工作关系，即Ops团队和开发团队共同合作提供高质量的软件，从而提高客户满意度。</p><h3 id="Q8。解释DevOps可用于工业-现实生活中的用例。"><a href="#Q8。解释DevOps可用于工业-现实生活中的用例。" class="headerlink" title="Q8。解释DevOps可用于工业/现实生活中的用例。"></a><strong>Q8。解释DevOps可用于工业/现实生活中的用例。</strong></h3><p>有许多行业正在使用DevOps，所以你可以提到任何这些用例，你也可以参考下面的例子：<br>Etsy是一个点对点的电子商务网站，专注于手工或古董物品和用品，以及独特的工厂制造的物品。Etsy在缓慢，痛苦的网站更新中挣扎，经常导致网站崩溃。它影响了数百万Etsy用户的销售，这些用户通过在线市场销售商品并冒险将其推向竞争对手。<br>在新技术管理团队的帮助下，Etsy从其瀑布模型转变为更敏捷的方法，瀑布模型每周两次进行4小时全站点部署。如今，它拥有完全自动化的部署管道，据报道，其持续交付实践每天导致50多次部署，中断更少。</p><h3 id="Q9。解释您在过去曾与之合作过的组织的软件开发方面和技术操作方面的理解和专业知识。"><a href="#Q9。解释您在过去曾与之合作过的组织的软件开发方面和技术操作方面的理解和专业知识。" class="headerlink" title="Q9。解释您在过去曾与之合作过的组织的软件开发方面和技术操作方面的理解和专业知识。"></a><strong>Q9。解释您在过去曾与之合作过的组织的软件开发方面和技术操作方面的理解和专业知识。</strong></h3><p>对于这个答案，分享您过去的经验并尝试解释您在以前的工作中的灵活性。您可以参考以下示例：<br>DevOps工程师几乎总是在24/7关键业务在线环境中工作。我适应了随叫随到的职责，可以承担实时，实时系统的责任。我成功实现了自动化流程，以支持持续的软件部署 我有使用公共/私有云，Chef或Puppet等工具，使用Python和PHP等工具编写脚本和自动化的经验，以及Agile的背景知识。</p><h3 id="Q10。DevOps的反模式有哪些？"><a href="#Q10。DevOps的反模式有哪些？" class="headerlink" title="Q10。DevOps的反模式有哪些？"></a><strong>Q10。DevOps的反模式有哪些？</strong></h3><p>通常遵循一种模式。如果其他人普遍采用的模式对您的组织不起作用，并且您继续盲目地遵循它，那么您实际上采用的是反模式。有关于DevOps的神话。其中一些包括：</p><ul><li>DevOps是一个过程</li><li>敏捷等于DevOps？</li><li>我们需要一个单独的DevOps组</li><li>Devops将解决我们所有的问题</li><li>DevOps意味着开发人员管理生产</li><li>DevOps是开发驱动的发布管理<ol><li>DevOps不是开发驱动的。</li><li>DevOps不是IT运营驱动的。</li></ol></li><li>我们不能做DevOps - 我们是独一无二的</li><li>我们不能做DevOps - 我们遇到了错误的人</li></ul><h2 id="版本控制系统（VCS）面试问题"><a href="#版本控制系统（VCS）面试问题" class="headerlink" title="版本控制系统（VCS）面试问题"></a><strong>版本控制系统（VCS）面试问题</strong></h2><p>现在让我们来看看有关VCS的一些访谈问题。如果您希望获得像Git这样的VCS的实际操作培训，它将包含在我们的<a href="https://www.edureka.co/devops" target="_blank" rel="noopener">DevOps认证课程中。</a></p><h3 id="Q1。什么是版本控制？"><a href="#Q1。什么是版本控制？" class="headerlink" title="Q1。什么是版本控制？"></a><strong>Q1。什么是版本控制？</strong></h3><p>这可能是您在面试中将面临的最简单的问题。我的建议是首先给出版本控制的定义。它是一个记录文件或文件集随时间变化的系统，以便您以后可以调用特定版本。版本控制系统由一个中央共享存储库组成，队友可以在其中提交对文件或文件集的更改。然后你可以提到版本控制的用途。</p><p>版本控制允许您：</p><ul><li>将文件还原为以前的状态。</li><li>将整个项目还原为以前的状态。</li><li>比较一段时间内的变化</li><li>查看最后一次修改可能导致问题的内容。</li><li>谁介绍了一个问题，何时。</li></ul><h2 id="Q2。使用版本控制有什么好处？"><a href="#Q2。使用版本控制有什么好处？" class="headerlink" title="Q2。使用版本控制有什么好处？"></a><strong>Q2。使用版本控制有什么好处？</strong></h2><p>我建议你包括版本控制的以下优点：</p><ol><li>使用版本控制系统（VCS），所有团队成员都可以随时在任何文件上自由工作。稍后VCS将允许您将所有更改合并到一个通用版本中。</li><li>所有过去的版本和变体都整齐地打包在VCS中。当您需要它时，您可以随时请求任何版本，您将获得完整项目的快照。</li><li>每次保存项目的新版本时，VCS都要求您提供已更改内容的简短说明。此外，您还可以查看文件内容的确切更改内容。这可以让您知道谁在项目中做了哪些更改。</li><li>像Git这样的分布式VCS允许所有团队成员拥有项目的完整历史记录，因此如果中央服务器出现故障，您可以使用任何团队成员的本地Git存储库。</li></ol><h3 id="Q3。描述您使用的分支策略。"><a href="#Q3。描述您使用的分支策略。" class="headerlink" title="Q3。描述您使用的分支策略。"></a><strong>Q3。描述您使用的分支策略。</strong></h3><p>这个问题被要求测试你的分支经验，告诉他们你在以前的工作中如何使用分支以及它的用途是什么，你可以参考以下几点：</p><ul><li>功能分支<br>功能分支模型保留分支内特定功能的所有更改。当通过自动化测试对功能进行全面测试和验证时，该分支将合并到主服务器中。</li><li>任务分支<br>在此模型中，每个任务都在其自己的分支上实现，任务键包含在分支名称中。很容易看出哪个代码实现了哪个任务，只需在分支名称中查找任务键。</li><li>发布分支<br>一旦开发分支为发布获得了足够的功能，您就可以克隆该分支以形成发布分支。创建此分支将启动下一个发布周期，因此在此之后不能添加任何新功能，只有错误修复，文档生成和其他面向发布的任务应该在此分支中。一旦准备好发布，该版本将合并到主服务器并标记版本号。此外，它应该合并回到开发分支，自发布以来可能已经取得了进展。</li></ul><p>最后告诉他们分支策略因组织而异，所以我知道基本的分支操作，如删除，合并，检查分支等。</p><h3 id="Q4。您熟悉哪种VCS工具？"><a href="#Q4。您熟悉哪种VCS工具？" class="headerlink" title="Q4。您熟悉哪种VCS工具？"></a><strong>Q4。您熟悉哪种VCS工具？</strong></h3><p>你可以提到你曾经使用的VCS工具：“我已经使用过Git，它对SVN等其他VCS工具的一个主要优势就是它是一个分布式版本控制系统。”<br>分布式VCS工具不一定依靠中央服务器来存储项目文件的所有版本。相反，每个开发人员都“克隆”存储库的副本，并在自己的硬盘上拥有项目的完整历史记录。</p><h3 id="Q5。什么是Git？"><a href="#Q5。什么是Git？" class="headerlink" title="Q5。什么是Git？"></a><strong>Q5。什么是Git？</strong></h3><p>我建议您首先解释一下git的体系结构来尝试这个问题，如下图所示。您可以参考下面给出的解释：</p><ul><li>Git是一个分布式版本控制系统（DVCS）。它可以跟踪文件的更改，并允许您恢复到任何特定的更改。</li><li>与SVN等其他版本控制系统（VCS）相比，它的分布式架构具有许多优势，一个主要优点是它不依赖于中央服务器来存储项目文件的所有版本。相反，每个开发人员“克隆”我在下图中使用“本地存储库”显示的存储库副本，并在其硬盘驱动器上具有项目的完整历史记录，以便在出现服务器中断时，恢复所需的全部内容是你队友的本地Git存储库之一。</li><li>还有一个中央云存储库，开发人员可以在其中提交更改并与其他团队成员共享，如图所示，所有协作者都在提交更改“远程存储库”。</li></ul><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/01/Git-architecture-devops-interview-questions.png" alt="git架构 -  devops面试问题"></p><h3 id="Q6。解释一些基本的Git命令？"><a href="#Q6。解释一些基本的Git命令？" class="headerlink" title="Q6。解释一些基本的Git命令？"></a><strong>Q6。解释一些基本的Git命令？</strong></h3><p>以下是一些基本的Git命令：</p><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/01/Git.png" alt="git命令 -  devops面试问题"></p><h3 id="Q7。在Git中，您如何还原已经被推送并公开的提交？"><a href="#Q7。在Git中，您如何还原已经被推送并公开的提交？" class="headerlink" title="Q7。在Git中，您如何还原已经被推送并公开的提交？"></a><strong>Q7。在Git中，您如何还原已经被推送并公开的提交？</strong></h3><p>此问题可以有两个答案，因此请确保包含两个答案，因为根据具体情况可以使用以下任何选项：</p><ul><li>在新提交中删除或修复错误文件，并将其推送到远程存储库。这是修复错误的最自然方式。对文件进行必要的更改后，将其提交到远程存储库，我将使用<br><strong>git commit -m“commit message”</strong></li><li>创建一个新的提交，撤消在错误提交中所做的所有更改。为此，我将使用命令<br><strong>git revert <bad of="" bad="" commit=""></bad></strong></li></ul><h3 id="Q8。你如何将N次提交压缩成一次提交？"><a href="#Q8。你如何将N次提交压缩成一次提交？" class="headerlink" title="Q8。你如何将N次提交压缩成一次提交？"></a><strong>Q8。你如何将N次提交压缩成一次提交？</strong></h3><p>将N个提交压缩到单个提交中有两种选择。在您的答案中包括以下两个选项：</p><ul><li>如果要从头开始编写新的提交消息，请使用以下命令<br><strong>git reset -soft HEAD~N &amp;&amp;</strong><br><strong>git commit</strong></li><li>如果你想用现有提交消息的串联开始编辑新的提交消息，那么你需要提取这些消息并将它们传递给Git commit，我将使用<br><strong>git reset -soft HEAD~N &amp;&amp;</strong><br><strong>git commit -edit -m “$（git log -format =％B -reverse .HEAD @ {N}）”</strong></li></ul><p>DevOps认证培训观看课程预览</p><h3 id="Q9。什么是Git-bisect？你怎么用它来确定（回归）bug的来源？"><a href="#Q9。什么是Git-bisect？你怎么用它来确定（回归）bug的来源？" class="headerlink" title="Q9。什么是Git bisect？你怎么用它来确定（回归）bug的来源？"></a><strong>Q9。什么是Git bisect？你怎么用它来确定（回归）bug的来源？</strong></h3><p>我建议你先给出一个Git bisect的小定义，Git bisect用于查找通过二进制搜索引入bug的提交。Git bisect的命令是<br><strong>git bisect &lt;子命令&gt; <options></options></strong>现在你已经提到了上面的命令，解释一下这个命令会做什么，这个命令使用二进制搜索算法来查找项目历史中哪个提交引入了一个bug。您可以通过首先告诉它已知包含该错误的“错误”提交以及在引入错误之前已知的“良好”提交来使用它。然后Git bisect在这两个端点之间选择一个提交，并询问您所选的提交是“好”还是“坏”。它继续缩小范围，直到找到引入更改的确切提交。</p><h3 id="Q10。什么是Git-rebase以及它如何在合并之前用于解决功能分支中的冲突？"><a href="#Q10。什么是Git-rebase以及它如何在合并之前用于解决功能分支中的冲突？" class="headerlink" title="Q10。什么是Git rebase以及它如何在合并之前用于解决功能分支中的冲突？"></a><strong>Q10。什么是Git rebase以及它如何在合并之前用于解决功能分支中的冲突？</strong></h3><p>根据我的说法，您应首先说git rebase是一个命令，它将另一个分支合并到您当前正在工作的分支中，并将所有位于重新分支之前的本地提交移到该历史记录的顶部。科。<br>现在，一旦您为一个示例定义了Git rebase时间，以显示如何在合并之前使用它来解决功能分支中的冲突，如果从master创建了一个功能分支，那么主分支已经收到了新的提交，Git rebase可用于将要素分支移动到主要提示。<br>该命令有效地将重放在master的tip处的功能分支中所做的更改，从而允许在该过程中解决冲突。完成后，这将允许功能分支相对容易地合并到主服务器中，有时作为简单的快进操作。</p><h3 id="Q11。如何配置Git存储库以在提交之前运行代码健全性检查工具，并在测试失败时阻止它们？"><a href="#Q11。如何配置Git存储库以在提交之前运行代码健全性检查工具，并在测试失败时阻止它们？" class="headerlink" title="Q11。如何配置Git存储库以在提交之前运行代码健全性检查工具，并在测试失败时阻止它们？"></a><strong>Q11。如何配置Git存储库以在提交之前运行代码健全性检查工具，并在测试失败时阻止它们？</strong></h3><p>我建议你先介绍一下理智检查，理智或烟雾测试 确定继续测试是否可行和合理。<br>现在解释如何实现这一点，这可以通过与存储库的预提交钩子相关的简单脚本来完成。即使在您需要输入提交消息之前，也会在提交之前触发预提交挂钩。在此脚本中，可以运行其他工具，例如linters，并对提交到存储库中的更改执行完整性检查。<br>最后给出一个例子，你可以参考下面的脚本：<br><strong>＃！/ bin / sh files = $（git diff -cached -name-only -diff-filter = ACM | grep’.go $’）if [-z files] ; 然后退出0 fi unfmtd = $（gofmt -l $ files）如果[-z unfmtd]; 然后退出0 fi echo“一些.go文件不是fmt’d” 退出1</strong>此脚本检查是否需要通过标准Go源代码格式化工具gofmt传递任何即将提交的.go文件。通过以非零状态退出，脚本有效地阻止将提交应用于存储库。</p><h3 id="Q12。如何找到特定提交中已更改的文件列表？"><a href="#Q12。如何找到特定提交中已更改的文件列表？" class="headerlink" title="Q12。如何找到特定提交中已更改的文件列表？"></a><strong>Q12。如何找到特定提交中已更改的文件列表？</strong></h3><p>对于这个答案，而不是只是告诉命令，解释这个命令究竟会做什么，所以你可以这么说，为了获得在特定提交中更改的列表文件使用命令<br><strong>git diff-tree -r {hash}</strong><br>给定提交哈希，这将列出在该提交中更改或添加的所有文件。-r标志使命令列表单个文件，而不是仅将它们折叠到根目录名称中。<br>你也可以包括下面提到的点，虽然它是完全可选的，但有助于给面试官留下深刻的印象。<br>输出还将包含一些额外的信息，可以通过包含两个标志来轻松抑制：<br><strong>git diff-tree -no-commit-id -name-only -r {hash}</strong><br>这里-no-commit-id将禁止提交哈希值出现在输出中，而-name-only只会打印文件名而不是它们的路径。</p><h3 id="Q13。每次存储库通过推送接收新提交时，如何设置脚本运行？"><a href="#Q13。每次存储库通过推送接收新提交时，如何设置脚本运行？" class="headerlink" title="Q13。每次存储库通过推送接收新提交时，如何设置脚本运行？"></a><strong>Q13。每次存储库通过推送接收新提交时，如何设置脚本运行？</strong></h3><p>每次存储库通过push接收新提交时，有三种方法可以配置脚本运行，需要根据需要触发脚本的时间来定义预接收，更新或后接收挂钩。</p><ul><li>将提交提交到目标存储库时，将调用目标存储库中的预接收挂钩。绑定到此挂钩的任何脚本都将在更新任何引用之前执行。这是一个有用的钩子，用于运行有助于实施开发策略的脚本。</li><li>Update钩子以类似于预接收钩子的方式工作，并且在实际进行任何更新之前也会触发。但是，对于已推送到目标存储库的每个提交，都会调用一次update钩子。</li><li>最后，在将更新接受到目标存储库之后，将调用存储库中的post-receive挂钩。这是配置简单部署脚本，调用一些持续集成系统，向存储库维护人员发送通知电子邮件等的理想场所。</li></ul><p>钩子是每个Git存储库的本地存储，并且没有版本化。脚本可以在“.git”目录内的hooks目录中创建，也可以在别处创建，并且可以在目录中放置这些脚本的链接。</p><h3 id="Q14。如果分支已经合并为主分支，你怎么知道Git？"><a href="#Q14。如果分支已经合并为主分支，你怎么知道Git？" class="headerlink" title="Q14。如果分支已经合并为主分支，你怎么知道Git？"></a><strong>Q14。如果分支已经合并为主分支，你怎么知道Git？</strong></h3><p>我建议你包括下面提到的命令：<br>git branch -merged列出已合并到当前分支的分支。<br>git branch -no-merged列出了尚未合并的分支。</p><h2 id="持续整合问题"><a href="#持续整合问题" class="headerlink" title="持续整合问题"></a><strong>持续整合问题</strong></h2><p>现在，让我们来看看持续集成面试问题：</p><h3 id="Q1。持续集成是什么意思？"><a href="#Q1。持续集成是什么意思？" class="headerlink" title="Q1。持续集成是什么意思？"></a><strong>Q1。持续集成是什么意思？</strong></h3><p>我将建议您通过给出持续集成（CI）的小定义来开始这个答案。这是一种开发实践，需要开发人员每天多次将代码集成到共享存储库中。然后通过自动构建验证每个签入，允许团队尽早发现问题。<br>我建议您解释一下如何在以前的工作中实施它。您可以参考以下给出的示例：</p><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/10/Jenkins-standalone-architecture-Jenkins-tutorial-What-is-Jenkins-Edureka.png" alt="Jenkins独立架构 -  devops面试问题"></p><p>在上图中：</p><ol><li>开发人员将代码签入其私有工作区。</li><li>完成后，他们将更改提交到共享存储库（版本控制存储库）。</li><li>CI服务器监视存储库并在发生更改时检出更改。</li><li>然后，CI服务器将提取这些更改并构建系统，并运行单元和集成测试。</li><li>CI服务器现在将通知团队成功构建。</li><li>如果构建或测试失败，CI服务器将向团队发出警报。</li><li>该团队将尽早解决问题。</li><li>这个过程不断重复。</li></ol><h3 id="Q2。为什么需要开发和测试的持续集成？"><a href="#Q2。为什么需要开发和测试的持续集成？" class="headerlink" title="Q2。为什么需要开发和测试的持续集成？"></a><strong>Q2。为什么需要开发和测试的持续集成？</strong></h3><p>对于这个答案，您应该关注持续集成的需求。我的建议是在你的答案中提到以下解释：<br>开发和测试的持续集成通过在完成所有开发之后替换传统的测试实践来提高软件质量并减少交付时间。它允许Dev团队尽早检测和定位问题，因为开发人员需要每天多次（更频繁地）将代码集成到共享存储库中。然后自动测试每个登记入住。</p><h3 id="Q3。持续集成的成功因素有哪些？"><a href="#Q3。持续集成的成功因素有哪些？" class="headerlink" title="Q3。持续集成的成功因素有哪些？"></a><strong>Q3。持续集成的成功因素有哪些？</strong></h3><p>在这里，您必须提到持续集成的要求。您可以在答案中包含以下几点：</p><ul><li>维护代码存储库</li><li>自动化构建</li><li>使构建自我测试</li><li>每个人每天承诺到基线</li><li>应该构建每个提交（到基线）</li><li>保持快速构建</li><li>在生产环境的克隆中进行测试</li><li>让您轻松获得最新的可交付成果</li><li>每个人都可以看到最新版本的结果</li><li>自动部署</li></ul><h3 id="Q4。解释如何将Jenkins从一台服务器移动或复制到另一台服务器？"><a href="#Q4。解释如何将Jenkins从一台服务器移动或复制到另一台服务器？" class="headerlink" title="Q4。解释如何将Jenkins从一台服务器移动或复制到另一台服务器？"></a><strong>Q4。解释如何将Jenkins从一台服务器移动或复制到另一台服务器？</strong></h3><p>我将通过将jobs目录从旧服务器复制到新服务器来完成此任务。有多种方法可以做到这一点; 我在下面提到过它们：<br>你可以：</p><ul><li>只需复制相应的作业目录，即可将作业从一个Jenkins安装移动到另一个。</li><li>通过使用其他名称克隆作业目录来制作现有作业的副本。</li><li>通过重命名目录重命名现有作业。请注意，如果更改作业名称，则需要更改尝试调用重命名作业的任何其他作业。</li></ul><h3 id="Q5。解释如何在Jenkins中创建备份和复制文件？"><a href="#Q5。解释如何在Jenkins中创建备份和复制文件？" class="headerlink" title="Q5。解释如何在Jenkins中创建备份和复制文件？"></a><strong>Q5。解释如何在Jenkins中创建备份和复制文件？</strong></h3><p>回答这个问题真的很直接。要创建备份，您需要做的就是定期备份JENKINS_HOME目录。这包含所有构建作业配置，从属节点配置和构建历史记录。要创建Jenkins设置的备份，只需复制此目录即可。您还可以复制作业目录以克隆或复制作业或重命名目录。</p><h3 id="Q6。解释如何设置Jenkins工作？"><a href="#Q6。解释如何设置Jenkins工作？" class="headerlink" title="Q6。解释如何设置Jenkins工作？"></a><strong>Q6。解释如何设置Jenkins工作？</strong></h3><p>我对这个答案的解决方法是首先提一下如何创建Jenkins的工作。转到Jenkins首页，选择“New Job”，然后选择“Build a free-style software project”。<br>然后你可以告诉这个自由式工作的元素：</p><ul><li>可选的SCM，例如源代码所在的CVS或Subversion。</li><li>用于控制Jenkins何时执行构建的可选触发器。</li><li>某种构建脚本，用于执行实际工作的构建（ant，maven，shell脚本，批处理文件等）。</li><li>从构建中收集信息的可选步骤，例如归档工件和/或记录javadoc和测试结果。</li><li>使用构建结果通知其他人/系统的可选步骤，例如发送电子邮件，IM，更新问题跟踪器等。</li></ul><h3 id="Q7。提到Jenkins中一些有用的插件。"><a href="#Q7。提到Jenkins中一些有用的插件。" class="headerlink" title="Q7。提到Jenkins中一些有用的插件。"></a><strong>Q7。提到Jenkins中一些有用的插件。</strong></h3><p>下面，我提到了一些重要的插件：</p><ul><li>Maven 2项目</li><li>亚马逊EC2</li><li>HTML发布者</li><li>复制工件</li><li>加入</li><li>绿球</li></ul><h3 id="Q8。你如何保护Jenkins？"><a href="#Q8。你如何保护Jenkins？" class="headerlink" title="Q8。你如何保护Jenkins？"></a><strong>Q8。你如何保护Jenkins？</strong></h3><p>我保护Jenkins的方式如下所述。如果您有任何其他方式，请在下面的评论部分中提及：</p><ul><li>确保全球安全。</li><li>确保Jenkins与我公司的用户目录与适当的插件集成。</li><li>确保启用矩阵/项目矩阵以微调访问。</li><li>使用自定义版本控制的脚本自动化在Jenkins中设置权限/特权的过程。</li><li>限制对Jenkins数据/文件夹的物理访问。</li><li>定期对其进行安全审核。</li></ul><p>Jenkins是DevOps中广泛使用的众多流行工具之一。</p><h2 id="持续测试面试问题："><a href="#持续测试面试问题：" class="headerlink" title="持续测试面试问题："></a><strong>持续测试面试问题：</strong></h2><p>现在让我们继续讨论持续测试问题。</p><h3 id="Q1。什么是连续测试？"><a href="#Q1。什么是连续测试？" class="headerlink" title="Q1。什么是连续测试？"></a><strong>Q1。什么是连续测试？</strong></h3><p>我将建议您遵循以下提到的解释：<br>持续测试是将自动化测试作为软件交付管道的一部分执行的过程，以获得与最新构建相关的业务风险的即时反馈。通过这种方式，每个构建都会持续测试，允许开发团队获得快速反馈，以便他们可以防止这些问题进入软件交付生命周期的下一阶段。这大大加快了开发人员的工作流程，因为无需手动重建项目并在进行更改后重新运行所有测试。</p><h3 id="Q2。什么是自动化测试？"><a href="#Q2。什么是自动化测试？" class="headerlink" title="Q2。什么是自动化测试？"></a><strong>Q2。什么是自动化测试？</strong></h3><p>自动化测试或测试自动化是自动化手动过程以测试被测应用程序/系统的过程。自动化测试涉及使用单独的测试工具，使您可以创建可以重复执行的测试脚本，而不需要任何手动干预。</p><h3 id="Q3。-自动化测试有哪些好处-？"><a href="#Q3。-自动化测试有哪些好处-？" class="headerlink" title="Q3。 自动化测试有哪些好处**？**"></a><strong>Q3。</strong> <strong>自动化测试有哪些好处**</strong>？**</h3><p>我列举了自动化测试的一些优点。在您的答案中包含这些内容，您可以添加自己的经验，了解Continuous Testing如何帮助您以前的公司：</p><ul><li>支持执行重复的测试用例</li><li>有助于测试大型测试矩阵</li><li>启用并行执行</li><li>鼓励无人看管的执行</li><li>提高准确性，从而减少人为产生的错误</li><li>节省时间和金钱</li></ul><h3 id="Q4。如何在DevOps生命周期中自动化测试？"><a href="#Q4。如何在DevOps生命周期中自动化测试？" class="headerlink" title="Q4。如何在DevOps生命周期中自动化测试？"></a><strong>Q4。如何在DevOps生命周期中自动化测试？</strong></h3><p>我已经提到了一个通用流程，您可以在其中参考：<br>在DevOps中，开发人员需要将源代码中的所有更改提交到共享存储库。像Jenkins这样的持续集成工具每次在代码中进行更改时都会从此共享存储库中提取代码，并将其部署到连续测试中，这些工作由Selenium等工具完成，如下图所示。<br>通过这种方式，与传统方法不同，代码的任何变化都会不断进行测试。</p><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/01/automate-testing-devops-interview-questions.png" alt="自动化测试 -  devops面试问题"></p><h3 id="Q5。-为什么持续测试对DevOps很重要？"><a href="#Q5。-为什么持续测试对DevOps很重要？" class="headerlink" title="Q5。**为什么持续测试对DevOps很重要？**"></a><strong>Q5。**</strong>为什么持续测试对DevOps很重要？**</h3><p>您可以通过说“连续测试允许立即测试代码中的任何更改来回答这个问题。这避免了在周期结束时进行“大爆炸”测试所产生的问题，例如发布延迟和质量问题。通过这种方式，持续测试可以促进更频繁和更好的质量发布。“</p><h3 id="Q6。连续测试工具的关键要素是什么？"><a href="#Q6。连续测试工具的关键要素是什么？" class="headerlink" title="Q6。连续测试工具的关键要素是什么？"></a><strong>Q6。连续测试工具的关键要素是什么？</strong></h3><p>连续测试的关键要素是：</p><ul><li><strong>风险评估：</strong>它涵盖风险缓解任务，技术债务，质量评估和测试覆盖范围优化，以确保构建准备好向下一阶段发展。</li><li><strong>策略分析：</strong>确保所有流程符合组织不断发展的业务和合规性要求。</li><li><strong>要求可追溯性：</strong>确保满足真正的要求，不需要返工。对象评估用于确定哪些需求存在风险，按预期工作或需要进一步验证。</li><li><strong>高级分析：</strong>它在静态代码分析，变更影响分析和范围评估/优先级划分等领域使用自动化，以便首先防止缺陷并在每次迭代中完成更多工作。</li><li><strong>测试优化：</strong>确保测试产生准确的结果并提供可操作的结果。方面包括测试数据管理，测试优化管理和测试维护</li><li><strong>服务虚拟化：</strong>它确保访问真实的测试环境。服务可视化使您能够访问所需测试阶段的虚拟表单，从而缩短测试环境设置和可用性的浪费时间。</li></ul><h3 id="Q7。您熟悉哪种测试工具以及该工具的优点是什么？"><a href="#Q7。您熟悉哪种测试工具以及该工具的优点是什么？" class="headerlink" title="Q7。您熟悉哪种测试工具以及该工具的优点是什么？"></a><strong>Q7。您熟悉哪种测试工具以及该工具的优点是什么？</strong></h3><p>这里提到您使用过的测试工具，并相应地构建您的答案。我已经提到了一个例子：<br>我已经在Selenium上工作，以确保高质量和更频繁的发布。</p><p>Selenium的一些优点是：</p><ul><li>它是免费和开源的</li><li>它拥有庞大的用户群和帮助社区</li><li>它具有跨浏览器兼容性（Firefox，Chrome，Internet Explorer，Safari等）</li><li>它具有出色的平台兼容性（Windows，Mac OS，Linux等）</li><li>它支持多种编程语言（Java，C＃，Ruby，Python，Pearl等）</li><li>它有新的和定期的存储库开发</li><li>它支持分布式测试</li></ul><h3 id="Q8。Selenium支持哪些测试类型？"><a href="#Q8。Selenium支持哪些测试类型？" class="headerlink" title="Q8。Selenium支持哪些测试类型？"></a><strong>Q8。Selenium支持哪些测试类型？</strong></h3><p>Selenium支持两种类型的测试：<br><strong>回归测试</strong>：它是在修复错误的区域周围重新测试产品的行为。<br><strong>功能测试</strong>：它指的是单独测试软件功能（功能点）。</p><h3 id="Q9。什么是Selenium-IDE？"><a href="#Q9。什么是Selenium-IDE？" class="headerlink" title="Q9。什么是Selenium IDE？"></a><strong>Q9。什么是Selenium IDE？</strong></h3><p>我的建议是通过定义Selenium IDE来开始这个答案。它是Selenium脚本的集成开发环境。它作为Firefox扩展实现，允许您记录，编辑和调试测试。Selenium IDE包含整个Selenium Core，允许您在他们将运行的实际环境中轻松快速地记录和回放测试。<br>现在，您的答案中包含一些优势。凭借自动完成支持和快速移动命令的能力，无论您喜欢何种类型的测试，Selenium IDE都是创建Selenium测试的理想环境。</p><h3 id="Q10。Selenium中的Assert和Verify命令有什么区别？"><a href="#Q10。Selenium中的Assert和Verify命令有什么区别？" class="headerlink" title="Q10。Selenium中的Assert和Verify命令有什么区别？"></a><strong>Q10。Selenium中的Assert和Verify命令有什么区别？</strong></h3><p>我在下面提到了Assert和Verify命令之间的区别：</p><ul><li>断言命令检查给定条件是真还是假。假设我们断言给定元素是否存在于网页上。如果条件为真，则程序控制将执行下一个测试步骤。但是，如果条件为假，则执行将停止，并且不会执行进一步的测试。</li><li>Verify命令还会检查给定条件是true还是false。无论条件是真还是假，程序执行都不会停止，即验证期间的任何故障都不会停止执行，并且所有测试步骤都将被执行。</li></ul><h3 id="Q11。如何使用WebDriver启动浏览器？"><a href="#Q11。如何使用WebDriver启动浏览器？" class="headerlink" title="Q11。如何使用WebDriver启动浏览器？"></a><strong>Q11。如何使用WebDriver启动浏览器？</strong></h3><p>以下语法可用于启动Browser：<br><strong>WebDriver driver = new FirefoxDriver（）;</strong><br><strong>WebDriver driver = new ChromeDriver（）;</strong><br><strong>WebDriver driver = new InternetExplorerDriver（）;</strong></p><h3 id="Q12。-我什么时候应该使用Selenium-Grid？"><a href="#Q12。-我什么时候应该使用Selenium-Grid？" class="headerlink" title="Q12。**我什么时候应该使用Selenium Grid？**"></a><strong>Q12。**</strong>我什么时候应该使用Selenium Grid？**</h3><p>对于这个答案，我的建议是给出Selenium Grid的一个小定义。它可以用于在多个平台和浏览器上同时执行相同或不同的测试脚本，以实现分布式测试执行。这允许在不同环境下进行测试并显着节省执行时间。</p><p>在我们的DevOps认证课程中，通过现场讲师指导的在线课程学习自动化测试和其他DevOps概念。</p><p><a href="https://www.edureka.co/devops/" target="_blank" rel="noopener"><strong>立即使用DevOps进行自动化测试&gt;&gt;</strong></a></p><h2 id="配置管理面试问题"><a href="#配置管理面试问题" class="headerlink" title="配置管理面试问题"></a><strong>配置管理面试问题</strong></h2><p>现在让我们来看看你对Configuration Management的了解程度。</p><h3 id="Q1。配置管理流程的目标是什么？"><a href="#Q1。配置管理流程的目标是什么？" class="headerlink" title="Q1。配置管理流程的目标是什么？"></a><strong>Q1。配置管理流程的目标是什么？</strong></h3><p>配置管理（CM）的目的是通过使开发或部署过程可控且可重复，确保产品或系统在其整个生命周期中的完整性，从而创建更高质量的产品或系统。CM流程允许有序管理系统信息和系统更改，以便：</p><ul><li>修改能力，</li><li>提高性能，</li><li>可靠性或可维护性，</li><li>延长寿命，</li><li>降低成本，</li><li>降低风险和</li><li>责任或纠正缺陷。</li></ul><h3 id="Q2。资产管理和配置管理有什么区别？"><a href="#Q2。资产管理和配置管理有什么区别？" class="headerlink" title="Q2。资产管理和配置管理有什么区别？"></a><strong>Q2。资产管理和配置管理有什么区别？</strong></h3><p>以下是资产管理和配置管理之间的一些差异：</p><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/01/asset-management-configuration-management-devops-interview-questions.png" alt="资产管理配置管理 -  devops面试问题"></p><h3 id="Q3。资产和配置项有什么区别？"><a href="#Q3。资产和配置项有什么区别？" class="headerlink" title="Q3。资产和配置项有什么区别？"></a><strong>Q3。资产和配置项有什么区别？</strong></h3><p>据我说，你应该首先解释资产。它具有财务价值以及附加的折旧率。IT资产只是它的一个子集。任何具有成本的组织和组织都将其用于资产价值计算和税收计算中的相关收益属于资产管理，此类项目称为资产。<br>另一方面，配置项可能有也可能没有分配给它的财务值。它不会有任何与之相关的折旧。因此，它的生命不依赖于其财务价值，而是取决于该项目对该组织过时的时间。</p><p>现在，您可以举例说明两者之间的相似性和差异：<br>1）相似性：<br>服务器 - 它既是资产又是CI。<br>2）差异：<br>建筑 - 这是一种资产，但不是CI。<br>文档 - 它是CI但不是资产</p><h3 id="Q4。您对“基础设施作为代码”有何看法？它如何适用于DevOps方法？它的目的是什么？"><a href="#Q4。您对“基础设施作为代码”有何看法？它如何适用于DevOps方法？它的目的是什么？" class="headerlink" title="Q4。您对“基础设施作为代码”有何看法？它如何适用于DevOps方法？它的目的是什么？"></a><strong>Q4。您对“基础设施作为代码”有何看法？它如何适用于DevOps方法？它的目的是什么？</strong></h3><p>作为代码的基础架构（IAC）是一种IT基础架构，运营团队可以使用它来自动管理和通过代码进行配置，而不是使用手动过程。<br>更快部署的公司会将软件等基础设施视为可以使用DevOps工具和流程管理的代码。利用这些工具，您可以更轻松，快速，安全，可靠地更改基础架构。</p><h3 id="Q5。Puppet，Chef，SaltStack和Ansible中哪一个是最好的配置管理（CM）工具？为什么？"><a href="#Q5。Puppet，Chef，SaltStack和Ansible中哪一个是最好的配置管理（CM）工具？为什么？" class="headerlink" title="Q5。Puppet，Chef，SaltStack和Ansible中哪一个是最好的配置管理（CM）工具？为什么？"></a><strong>Q5。Puppet，Chef，SaltStack和Ansible中哪一个是最好的配置管理（CM）工具？为什么？</strong></h3><p>这取决于组织的需求，因此在所有这些工具上提到几点：<br>Puppet是最古老，最成熟的CM工具。Puppet是一个基于Ruby的配置管理工具，虽然它有一些免费功能，但Puppet很棒的大部分内容仅在付费版本中可用。不需要大量额外功能的组织会发现Puppet很有用，但那些需要更多自定义的组织可能需要升级到付费版本。<br>Chef是用Ruby编写的，因此可以由熟悉该语言的人定制。它还包括免费功能，如果需要，还可以从开源升级到企业级。最重要的是，它是一个非常灵活的产品。<br>Ansible是一个非常安全的选项，因为它使用Secure Shell。它是一个简单的工具，但除了配置管理之外，它还提供了许多其他服务。它非常容易学习，因此非常适合那些没有专职IT人员但仍需要配置管理工具的人。<br>SaltStack是基于python的开源CM工具，适用于大型企业，但其学习曲线相当低。</p><h3 id="Q6。什么是Puppet？"><a href="#Q6。什么是Puppet？" class="headerlink" title="Q6。什么是Puppet？"></a><strong>Q6。什么是Puppet？</strong></h3><p>我会建议你先给出一个小小的Puppet定义。它是一个配置管理工具，用于自动执行管理任务。<br>现在您应该描述其架构以及Puppet如何管理其代理。Puppet有一个Master-Slave架构，其中Slave必须首先向Master发送证书签名请求，Master必须签署该证书才能在Puppet Master和Puppet Slave之间建立安全连接，如下图所示。Puppet Slave向Puppet Master和Puppet Master发送请求，然后在Slave上推送配置。<br>请参阅下面的图解释上述说明。</p><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/01/what-is-puppet-devops-interview-questions-1.png" alt="什么是傀儡 -  devops面试问题"></p><h3 id="Q7。-在客户端使用Puppet-Master进行身份验证之前，需要对其证书进行签名和接受。你将如何自动完成这项任务？"><a href="#Q7。-在客户端使用Puppet-Master进行身份验证之前，需要对其证书进行签名和接受。你将如何自动完成这项任务？" class="headerlink" title="Q7。**在客户端使用Puppet Master进行身份验证之前，需要对其证书进行签名和接受。你将如何自动完成这项任务？**"></a><strong>Q7。**</strong>在客户端使用Puppet Master进行身份验证之前，需要对其证书进行签名和接受。你将如何自动完成这项任务？**</h3><p>最简单的方法是在puppet.conf中启用自动签名。<br>请注意这是一个安全风险。如果您仍想这样做：</p><ul><li>防火墙您的Puppet大师 - 将端口tcp / 8140限制为仅您信任的网络。</li><li>为每个“信任区域”创建Puppet大师，并且只在该Puppet大师清单中包含可信节点。</li><li>切勿使用完整的通配符，例如*。</li></ul><h3 id="Q8。描述通过Puppet自动化流程所取得的最重要的收益。"><a href="#Q8。描述通过Puppet自动化流程所取得的最重要的收益。" class="headerlink" title="Q8。描述通过Puppet自动化流程所取得的最重要的收益。"></a><strong>Q8。描述通过Puppet自动化流程所取得的最重要的收益。</strong></h3><p>对于这个答案，我建议你解释一下你过去使用Puppet的经历。您可以参考以下示例：<br>我使用Puppet自动配置和部署Linux和Windows机器。除了将处理时间从一周缩短到10分钟之外，我还使用了角色和配置文件模式，并在README中记录了每个模块的用途，以确保其他人可以使用Git更新模块。我写的模块仍然在使用，但是我的团队成员和社区成员对它们进行了改进</p><h3 id="Q9。您使用哪些开源或社区工具来使Puppet更强大？"><a href="#Q9。您使用哪些开源或社区工具来使Puppet更强大？" class="headerlink" title="Q9。您使用哪些开源或社区工具来使Puppet更强大？"></a><strong>Q9。您使用哪些开源或社区工具来使Puppet更强大？</strong></h3><p>在这里，您需要提及工具以及如何使用这些工具使Puppet更强大。以下是一个供您参考的示例：<br>更改和请求通过Jira出票，我们通过内部流程管理请求。然后，我们使用Git和Puppet的Code Manager应用程序根据最佳实践管理Puppet代码。此外，我们使用烧杯测试框架通过Jenkins中的持续集成管道运行所有Puppet更改。</p><h3 id="Q10。什么是Puppet清单？"><a href="#Q10。什么是Puppet清单？" class="headerlink" title="Q10。什么是Puppet清单？"></a><strong>Q10。什么是Puppet清单？</strong></h3><p>这是一个非常重要的问题，所以请确保您正确的流程。据我说，你应该首先定义清单。每个节点（或Puppet Agent）都在Puppet Master中获得了配置细节，用本机Puppet语言编写。这些细节用Puppet可以理解的语言编写，称为Manifest。它们由Puppet代码组成，其文件名使用.pp扩展名。<br>现在举个例子。您可以在Puppet Master中编写一个清单，用于创建文件并在连接到Puppet Master的所有Puppet Agent（Slaves）上安装apache。</p><h3 id="Q11。-什么是Puppet模块以及它与Puppet-Manifest的不同之处？"><a href="#Q11。-什么是Puppet模块以及它与Puppet-Manifest的不同之处？" class="headerlink" title="Q11。 什么是Puppet模块以及它与Puppet Manifest的不同之处？"></a><strong>Q11。</strong> <strong>什么是Puppet模块以及它与Puppet Manifest的不同之处？</strong></h3><p>对于这个答案，您可以使用下面提到的解释：<br>Puppet模块是清单和数据（例如事实，文件和模板）的集合，它们具有特定的目录结构。模块对于组织Puppet代码很有用，因为它们允许您将代码拆分为多个清单。使用模块来组织几乎所有的Puppet清单是最佳实践。<br>Puppet程序称为Manifest，它由Puppet代码组成，其文件名使用.pp扩展名。</p><h3 id="Q12。-什么是Puppet的Facter？"><a href="#Q12。-什么是Puppet的Facter？" class="headerlink" title="Q12。 什么是Puppet的Facter？"></a><strong>Q12。</strong> <strong>什么是Puppet的Facter？</strong></h3><p>你应该回答Facter在Puppet中做了什么，所以根据我的说法，你应该说，“Facter收集有关Puppet Agent的基本信息（事实），如硬件细节，网络设置，操作系统类型和版本，IP地址，MAC地址， SSH密钥等等。这些事实随后在Puppet Master的清单中作为变量提供。“</p><h3 id="Q13。什么是Chef？"><a href="#Q13。什么是Chef？" class="headerlink" title="Q13。什么是Chef？"></a><strong>Q13。什么是Chef？</strong></h3><p>通过定义Chef来开始这个答案。它是一个强大的自动化平台，可将基础架构转换为代码。Chef是一个工具，您可以编写用于自动化流程的脚本。什么过程？几乎与IT相关的任何事情。<br>现在您可以解释Chef的架构，它包括：</p><ul><li><strong>Chef Server：</strong> Chef Server是基础架构配置数据的中央存储。Chef Server存储配置节点所需的数据并提供搜索功能，这是一个功能强大的工具，允许您根据数据动态驱动节点配置。</li><li><strong>Chef Node：</strong> Node是使用Chef-client配置的任何主机。Chef-client在您的节点上运行，与Chef Server联系以获取配置节点所需的信息。由于Node是运行Chef-client软件的机器，因此节点有时被称为“客户端”。</li><li><strong>Chef Workstation：</strong> Chef Workstation是您用来修改cookbook和其他配置数据的主机。</li></ul><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/01/Chef-server-devops-interview-questions.png" alt="Chef建筑 -  devops面试问题"></p><h3 id="Q14。Chef的资源是什么？"><a href="#Q14。Chef的资源是什么？" class="headerlink" title="Q14。Chef的资源是什么？"></a><strong>Q14。</strong>Chef的资源是什么？</h3><p>我的建议是先定义资源。资源代表一个基础架构及其所需的状态，例如应安装的软件包，应运行的服务或应生成的文件。<br>您应该解释资源的功能，包括以下几点：</p><ul><li>描述配置项的所需状态。</li><li>声明将该项目置于所需状态所需的步骤。</li><li>指定资源类型，例如包，模板或服务。</li><li>根据需要列出其他详细信息（也称为资源属性）。</li><li>分为配方，描述工作配置。</li></ul><h3 id="Q15。Chef的食谱是什么意思？"><a href="#Q15。Chef的食谱是什么意思？" class="headerlink" title="Q15。Chef的食谱是什么意思？"></a><strong>Q15。Chef的食谱是什么意思？</strong></h3><p>对于这个答案，我建议你使用上面提到的流程：首先定义食谱。Recipe是描述特定配置或策略的资源集合。配方描述了配置系统部分所需的一切。<br>定义之后，通过包括以下几点来解释食谱的功能：</p><ul><li>安装和配置软件组件。</li><li>管理文件。</li><li>部署应用程序。</li><li>执行其他食谱。</li></ul><h3 id="Q16。-Cookbook与Chef中的食谱有何不同？"><a href="#Q16。-Cookbook与Chef中的食谱有何不同？" class="headerlink" title="Q16。 Cookbook与Chef中的食谱有何不同？"></a><strong>Q16。</strong> <strong>Cookbook与Chef中的食谱有何不同？</strong></h3><p>对此的答案非常直接。您可以简单地说，“Recipe是一组资源，主要配置软件包或某些基础架构。“食谱”将食谱和其他信息整合在一起，比单独使用“食谱”更易于管理。“</p><h3 id="Q17。-如果未在Chef中指定Resource的操作，会发生什么？"><a href="#Q17。-如果未在Chef中指定Resource的操作，会发生什么？" class="headerlink" title="Q17。 如果未在Chef中指定Resource的操作，会发生什么？"></a><strong>Q17。</strong> <strong>如果未在Chef中指定Resource的操作，会发生什么？</strong></h3><p>我的建议是首先直接回答：当您未指定资源的操作时，Chef会应用默认操作。<br>现在用一个例子解释一下，下面的资源：<br><strong>文件’C：\ Users \ Administrator \ chef-repo \ settings.ini’做</strong><br><strong>内容’greeting = hello world’</strong><br><strong>结束</strong><br>与下面的资源相同：<br><strong>文件’C：\ Users \管理\Chef回购\的Settings.ini”做的</strong><br><strong>动作：创建</strong><br><strong>内容“的问候语=你好世界</strong><br><strong>结束</strong><br>的原因是：创造是文件资源的默认操作。</p><h3 id="Q18。什么是Ansible模块？"><a href="#Q18。什么是Ansible模块？" class="headerlink" title="Q18。什么是Ansible模块？"></a><strong>Q18。什么是Ansible模块？</strong></h3><p>模块被认为是Ansible的工作单元。每个模块大多是独立的，可以用标准的脚本语言编写，如Python，Perl，Ruby，bash等。模块的一个指导属性是幂等性，这意味着即使一个操作重复多次，例如，从停电中恢复，它将始终将系统置于同一状态。</p><h3 id="Q19。什么是Ansible的剧本？"><a href="#Q19。什么是Ansible的剧本？" class="headerlink" title="Q19。什么是Ansible的剧本？"></a><strong>Q19。什么是Ansible的剧本？</strong></h3><p>Playbooks是Ansible的配置，部署和编排语言。他们可以描述您希望远程系统实施的策略，或者描述一般IT流程中的一系列步骤。Playbooks设计为人类可读的，并以基本文本语言开发。<br>在基本级别，可以使用playbooks来管理远程计算机的配置和部署。</p><h3 id="Q20。-如何查看所有ansible-变量的列表？"><a href="#Q20。-如何查看所有ansible-变量的列表？" class="headerlink" title="Q20。 如何查看所有ansible_变量的列表？"></a><strong>Q20。</strong> <strong>如何查看所有ansible_变量的列表？</strong></h3><p>Ansible默认收集有关所管理机器的“事实”，这些事实可以在Playbooks和模板中访问。要查看有关计算机的所有可用事实的列表，可以将“设置”模块作为临时操作运行：<br><strong>Ansible -m setup hostname</strong>这将打印出所有可用事实的字典对于那个特定的主人。</p><h3 id="Q21。如何设置应用程序的部署顺序？"><a href="#Q21。如何设置应用程序的部署顺序？" class="headerlink" title="Q21。如何设置应用程序的部署顺序？"></a><strong>Q21。如何设置应用程序的部署顺序？</strong></h3><p>WebLogic Server 8.1允许您选择应用程序的加载顺序。请参阅Application中的Application MBean Load Order属性。WebLogic Server在部署应用程序之前部署服务器级资源（第一个JDBC，然后是JMS）。应用程序按以下顺序部署：连接器，然后是EJB，然后是Web应用程序。如果应用程序是EAR，则按照在application.xml部署描述符中声明它们的顺序加载各个组件。</p><h3 id="Q22。我是否可以刷新已部署应用程序的静态组件而无需重新部署整个应用程序？"><a href="#Q22。我是否可以刷新已部署应用程序的静态组件而无需重新部署整个应用程序？" class="headerlink" title="Q22。我是否可以刷新已部署应用程序的静态组件而无需重新部署整个应用程序？"></a><strong>Q22。我是否可以刷新已部署应用程序的静态组件而无需重新部署整个应用程序？</strong></h3><p>是的，您可以使用weblogic.Deployer指定组件并使用以下语法定位服务器：<br>java weblogic.Deployer -adminurl http：// admin：7001 -name appname -targets server1，server2 -deploy jsps / * .jsp</p><h3 id="Q23。如何关闭自动部署功能？"><a href="#Q23。如何关闭自动部署功能？" class="headerlink" title="Q23。如何关闭自动部署功能？"></a><strong>Q23。如何关闭自动部署功能？</strong></h3><p>自动部署功能每三秒检查一次应用程序文件夹，以确定是否有任何新应用程序或对现有应用程序的任何更改，然后动态部署这些更改。</p><p>为在开发模式下运行的服务器启用了自动部署功能。要禁用自动部署功能，请使用以下方法之一将服务器置于生产模式：</p><ul><li>在管理控制台中，单击左窗格中的域名，然后在右窗格中选择“生产模式”复选框。</li><li>在命令行中，在启动域的管理服务器时包括以下参数：<br>-Dweblogic.ProductionModeEnabled = true</li><li>为给定域中的所有WebLogic Server实例设置生产模式。</li></ul><h3 id="Q24。我什么时候应该使用external-stage选项？"><a href="#Q24。我什么时候应该使用external-stage选项？" class="headerlink" title="Q24。我什么时候应该使用external_stage选项？"></a><strong>Q24。我什么时候应该使用external_stage选项？</strong></h3><p>如果您想自己暂存应用程序，请使用weblogic.Deployer设置-external_stage，并希望通过自己的方式将其复制到目标。</p><h2 id="持续监控面试问题"><a href="#持续监控面试问题" class="headerlink" title="持续监控面试问题"></a><strong>持续监控面试问题</strong></h2><p>让我们测试您对持续监控的了解。</p><h3 id="Q1。为什么需要持续监控？"><a href="#Q1。为什么需要持续监控？" class="headerlink" title="Q1。为什么需要持续监控？"></a><strong>Q1。为什么需要持续监控？</strong></h3><p>我建议您使用下面提到的流程：<br>持续监控可以及时发现问题或缺陷，并采取快速纠正措施，有助于降低组织的费用。持续监控提供解决方案，解决三个操作规程，称为：</p><ul><li>持续审计</li><li>连续控制监测</li><li>持续交易检查</li></ul><h3 id="Q2。什么是Nagios？"><a href="#Q2。什么是Nagios？" class="headerlink" title="Q2。什么是Nagios？"></a><strong>Q2。什么是Nagios？</strong></h3><p>您可以通过首先提到Nagios是监视工具之一来回答这个问题。它用于DevOps文化中的系统，应用程序，服务和业务流程等的连续监视。如果发生故障，Nagios可以向技术人员提醒问题，允许他们在中断影响业务流程，最终用户或客户之前开始修复流程。使用Nagios，您无需解释为什么不可见的基础架构中断会影响您组织的底线。<br>现在，一旦你定义了什么是Nagios，你可以提到使用Nagios可以实现的各种事情。<br>通过使用Nagios，您可以：</p><ul><li>在过时的系统导致故障之前规划基础架构升级。</li><li>在出现问题的第一个迹象时回答问题。</li><li>检测到问题时自动修复问题。</li><li>协调技术团队的回应。</li><li>确保您的组织的SLA得到满足。</li><li>确保IT基础架构中断对组织的底线影响最小。</li><li>监控整个基础架构和业务流程。</li></ul><p>这就完成了这个问题的答案。可以根据讨论的方向添加诸如优点等的进一步细节。</p><h3 id="Q3。Nagios如何运作？"><a href="#Q3。Nagios如何运作？" class="headerlink" title="Q3。Nagios如何运作？"></a><strong>Q3。Nagios如何运作？</strong></h3><p>我将建议您按照以下解释来解答：<br>Nagios在服务器上运行，通常作为守护进程或服务运行。Nagios定期运行驻留在同一服务器上的插件，它们会联系您网络或Internet上的主机或服务器。可以使用Web界面查看状态信息。如果发生某些事情，您还可以收到电子邮件或短信通知<br>Nagios守护程序的行为类似于在某些时刻运行某些脚本的调度程序。它存储这些脚本的结果，并在这些结果发生变化时运行其他脚本。</p><p>现在期待关于Nagios组件的一些问题，如插件，NRPE等。</p><h3 id="Q4。什么是Nagios的插件？"><a href="#Q4。什么是Nagios的插件？" class="headerlink" title="Q4。什么是Nagios的插件？"></a><strong>Q4。什么是Nagios的插件？</strong></h3><p>通过定义插件开始这个答案。它们是脚本（Perl脚本，Shell脚本等），可以从命令行运行以检查主机或服务的状态。Nagios使用插件的结果来确定网络上主机和服务的当前状态。<br>一旦定义了插件，解释为什么我们需要插件。只要需要检查主机或服务的状态，Nagios就会执行插件。插件将执行检查，然后只是将结果返回给Nagios。Nagios将处理从插件接收的结果并采取必要的操作。</p><h3 id="Q5。Nagios中的NRPE（Nagios-Remote-Plugin-Executor）是什么？"><a href="#Q5。Nagios中的NRPE（Nagios-Remote-Plugin-Executor）是什么？" class="headerlink" title="Q5。Nagios中的NRPE（Nagios Remote Plugin Executor）是什么？"></a><strong>Q5。Nagios中的NRPE（Nagios Remote Plugin Executor）是什么？</strong></h3><p>对于这个答案，给出插件的简要定义。NRPE插件旨在允许您在远程Linux / Unix计算机上执行Nagios插件。这样做的主要原因是允许Nagios监视远程计算机上的“本地”资源（如CPU负载，内存使用情况等）。由于这些公共资源通常不会暴露给外部计算机，因此必须在远程Linux / Unix计算机上安装NRPE之类的代理。</p><p>我将建议您根据下图所示解释NRPE架构。NRPE插件由两部分组成：</p><ul><li>check_nrpe插件，驻留在本地监视机器上。</li><li>NRPE守护程序，在远程Linux / Unix机器上运行。</li></ul><p>监视主机和远程主机之间存在SSL（安全套接字层）连接，如下图所示。</p><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/01/nrpe-architecture-devops-interview-questions.png" alt="nrpe架构 -  devops面试问题"></p><h3 id="Q6。你对Nagios的被动检查是什么意思？"><a href="#Q6。你对Nagios的被动检查是什么意思？" class="headerlink" title="Q6。你对Nagios的被动检查是什么意思？"></a><strong>Q6。你对Nagios的被动检查是什么意思？</strong></h3><p>据我所知，答案应该从解释被动检查开始。它们由外部应用程序/进程启动和执行，被动检查结果将提交给Nagios进行处理。<br>然后解释被动检查的必要性。它们对于监视异步的服务非常有用，并且无法通过定期轮询其状态来有效监视。它们还可用于监视位于防火墙后面的服务，并且无法从监视主机主动检查。</p><h3 id="Q7。-Nagios何时检查外部命令？"><a href="#Q7。-Nagios何时检查外部命令？" class="headerlink" title="Q7。 Nagios何时检查外部命令？"></a><strong>Q7。</strong> <strong>Nagios何时检查外部命令？</strong></h3><p>确保在解释过程中坚持这个问题，所以我建议你按照下面提到的流程。Nagios在以下条件下检查外部命令：</p><ul><li>由主配置文件中的command_check_interval选项指定的定期间隔，或</li><li>事件处理程序执行后立即执行。这是外部命令检查的常规循环的补充，并且在事件处理程序向Nagios提交命令时提供立即操作。</li></ul><h3 id="Q8。-Nagios中的主动和被动检查有什么区别？"><a href="#Q8。-Nagios中的主动和被动检查有什么区别？" class="headerlink" title="Q8。**Nagios中的主动和被动检查有什么区别？**"></a><strong>Q8。**</strong>Nagios中的主动和被动检查有什么区别？**</h3><p>对于这个答案，首先指出主动和被动检查的基本区别。主动检查和被动检查之间的主要区别在于Active检查由Nagios启动和执行，而被动检查由外部应用程序执行。<br>如果您的面试官看起来不相信上述说明，那么您还可以提及主动和被动检查的一些关键功能：<br>被动检查对于监控以下服务非常有用：</p><ul><li>本质上是异步的，无法通过定期轮询其状态来有效监控。</li><li>位于防火墙后面，无法从监控主机主动检查。</li></ul><p>Actives检查的主要功能如下：</p><ul><li>Nagios流程启动主动检查。</li><li>主动检查定期运行。</li></ul><h3 id="Q9。Nagios如何帮助分布式监控？"><a href="#Q9。Nagios如何帮助分布式监控？" class="headerlink" title="Q9。Nagios如何帮助分布式监控？"></a><strong>Q9。Nagios如何帮助分布式监控？</strong></h3><p>面试官将期待与Nagios的分布式架构相关的答案。因此，我建议您以下面提到的格式回答：<br>使用Nagios，您可以使用分布式监控方案监控整个企业，Nagios的本地从属实例执行监控任务并将结果报告给单个主站。您可以管理主服务器的所有配置，通知和报告，而从服务器可以完成所有工作。这种设计利用了Nagios利用被动检查的能力，即外部应用程序或将结果发送回Nagios的过程。在分布式配置中，这些外部应用程序是Nagios的其他实例。</p><h3 id="Q10。解释Nagios的主要配置文件及其位置？"><a href="#Q10。解释Nagios的主要配置文件及其位置？" class="headerlink" title="Q10。解释Nagios的主要配置文件及其位置？"></a><strong>Q10。解释Nagios的主要配置文件及其位置？</strong></h3><p>首先提一下这个主配置文件包含的内容及其功能。主配置文件包含许多影响Nagios守护程序运行方式的指令。Nagios守护程序和CGI都读取此配置文件（它指定主配置文件的位置）。<br>现在您可以知道它的存在位置以及创建方式。运行configure脚本时，将在Nagios分发的基本目录中创建示例主配置文件。主配置文件的默认名称是nagios.cfg。它通常放在Nagios安装的etc /子目录中（即/ usr / local / nagios / etc /）。</p><h3 id="Q11。解释Flaip-Detection在Nagios中的工作原理？"><a href="#Q11。解释Flaip-Detection在Nagios中的工作原理？" class="headerlink" title="Q11。解释Flaip Detection在Nagios中的工作原理？"></a><strong>Q11。解释Flaip Detection在Nagios中的工作原理？</strong></h3><p>我会建议你先解释Flapping。当服务或主机过于频繁地更改状态时会发生抖动，这会导致大量问题和恢复通知。<br>定义Flapping后，解释Nagios如何检测Flapping。每当Nagios检查主机或服务的状态时，它将检查它是否已经开始或停止振荡。Nagios遵循以下给定的程序来做到这一点：</p><ul><li>存储分析历史检查结果的主机或服务的最后21次检查的结果，并确定状态更改/转换发生的位置</li><li>使用状态转换来确定主机或服务的百分比状态更改值（更改度量）</li><li>比较百分比状态变化值与低和高拍打阈值</li></ul><p>当主机或服务的百分比状态变化首先超过高振荡阈值时，确定主机或服务已开始振荡。当主机或服务的百分比状态低于低抖动阈值时，确定主机或服务已停止振荡。</p><h3 id="Q12。在Nagios中影响递归和继承的三个主要变量是什么？"><a href="#Q12。在Nagios中影响递归和继承的三个主要变量是什么？" class="headerlink" title="Q12。在Nagios中影响递归和继承的三个主要变量是什么？"></a><strong>Q12。在Nagios中影响递归和继承的三个主要变量是什么？</strong></h3><p>根据我的说法，这个答案的正确格式应该是：<br>首先命名变量，然后对每个变量做一个小解释：</p><ul><li>名称</li><li>使用</li><li>寄存器</li></ul><p>然后给出每个变量的简要说明。Name是其他对象使用的占位符。使用定义应使用其属性的“父”对象。寄存器的值可以为0（表示只有模板）和1（实际对象）。寄存器值永远不会被继承。</p><h3 id="Q13。Nagios的意思是面向对象？"><a href="#Q13。Nagios的意思是面向对象？" class="headerlink" title="Q13。Nagios的意思是面向对象？"></a><strong>Q13。Nagios的意思是面向对象？</strong></h3><p>回答这个问题非常直接。我将回答这个问题，“Nagios的一个特性是对象配置格式，因为您可以创建从其他对象定义继承属性的对象定义，从而创建名称。这简化并阐明了各个组件之间的关系。“</p><h3 id="Q14。什么是Nagios的州跟踪？"><a href="#Q14。什么是Nagios的州跟踪？" class="headerlink" title="Q14。什么是Nagios的州跟踪？"></a><strong>Q14。什么是Nagios的州跟踪？</strong></h3><p>我会建议你先介绍一下State Salking。它用于记录目的。当为特定主机或服务启用Stalking时，Nagios将非常仔细地监视该主机或服务，并记录它在检查结果输出中看到的任何更改。<br>根据您和访调员之间的讨论，您还可以添加“在以后分析日志文件时非常有用。在正常情况下，只有在主机或服务自上次检查后状态发生变化时，才会记录主机或服务检查的结果。“</p><p>想要接受像Nagios这样的监控工具的培训吗？想获得DevOps工程师认证吗？请务必<a href="https://www.edureka.co/masters-program/devops-engineer-training" target="_blank" rel="noopener">查看我们的DevOps硕士课程</a>。</p><h2 id="容器化和虚拟化面试问题"><a href="#容器化和虚拟化面试问题" class="headerlink" title="容器化和虚拟化面试问题"></a><strong>容器化和虚拟化面试问题</strong></h2><p>让我们看看您对容器和虚拟机的了解程度。</p><h3 id="Q1。什么是容器？"><a href="#Q1。什么是容器？" class="headerlink" title="Q1。什么是容器？"></a><strong>Q1。什么是容器？</strong></h3><p>我的建议是首先解释容器化的必要性，容器用于提供从开发人员的笔记本电脑到测试环境，从临时环境到生产的一致计算环境。<br>现在给出一个容器的定义，一个容器由一个完整的运行时环境组成：一个应用程序，以及它所有的依赖项，库和其他二进制文件，以及运行它所需的配置文件，捆绑到一个包中。容纳应用程序平台及其依赖项消除了操作系统分发和底层基础架构的差异。</p><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/10/containers-devops-interview-questions.png" alt="容器 -  devops面试问题"></p><h3 id="Q2。容器化相比虚拟化有哪些优势？"><a href="#Q2。容器化相比虚拟化有哪些优势？" class="headerlink" title="Q2。容器化相比虚拟化有哪些优势？"></a><strong>Q2。容器化相比虚拟化有哪些优势？</strong></h3><p>以下是容器化优于虚拟化的优势：</p><ul><li>容器提供实时配置和可伸缩性，但VM提供缓慢的配置</li><li>与VM相比，容器是轻量级的</li><li>与容器相比，VM的性能有限</li><li>与VM相比，容器具有更好的资源利用率</li></ul><h3 id="Q3。容器（在我们的例子中是Docker）与虚拟机管理程序虚拟化（vSphere）有何不同？有什么好处？"><a href="#Q3。容器（在我们的例子中是Docker）与虚拟机管理程序虚拟化（vSphere）有何不同？有什么好处？" class="headerlink" title="Q3。容器（在我们的例子中是Docker）与虚拟机管理程序虚拟化（vSphere）有何不同？有什么好处？"></a><strong>Q3。容器（在我们的例子中是Docker）与虚拟机管理程序虚拟化（vSphere）有何不同？有什么好处？</strong></h3><p>以下是一些差异。确保在答案中包含这些差异：</p><p><img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2016/10/Docker-vsphere-devops-interview-questions-507x300.png" alt="docker vsphere  -  devops面试问题"></p><h3 id="Q4。什么是Docker图像？"><a href="#Q4。什么是Docker图像？" class="headerlink" title="Q4。什么是Docker图像？"></a><strong>Q4。什么是Docker图像？</strong></h3><p>我建议你使用下面提到的流程：<br>Docker镜像是Docker容器的来源。换句话说，Docker镜像用于创建容器。使用build命令创建映像，并且在使用run启动时它们将生成容器。图像存储在Docker注册表中，例如registry.hub.docker.com，因为它们可能变得非常大，图像被设计为由其他图像层组成，允许在通过网络传输图像时发送最少量的数据。<br><strong>提示：请注意Dockerhub，以便回答有关预先可用图像的问题。</strong></p><h3 id="Q5。什么是Docker容器？"><a href="#Q5。什么是Docker容器？" class="headerlink" title="Q5。什么是Docker容器？"></a><strong>Q5。什么是Docker容器？</strong></h3><p>这是一个非常重要的问题，所以请确保您不偏离主题。我建议您遵循下面提到的格式：<br>Docker容器包括应用程序及其所有依赖项，但与其他容器共享内核，在主机操作系统的用户空间中作为独立进程运行。Docker容器不依赖于任何特定的基础架构：它们可以在任何计算机，任何基础架构和任何云中运行。<br>现在解释如何创建Docker容器，可以通过创建Docker镜像然后运行它来创建Docker容器，也可以使用Dockerhub上存在的Docker镜像。<br>Docker容器基本上是Docker镜像的运行时实例。</p><h3 id="Q6。-什么是Docker中心？"><a href="#Q6。-什么是Docker中心？" class="headerlink" title="Q6。**什么是Docker中心？**"></a><strong>Q6。**</strong>什么是Docker中心？**</h3><p>回答这个问题非常直接。Docker hub是一个基于云的注册表服务，允许您链接到代码存储库，构建映像并测试它们，存储手动推送的映像以及指向Docker云的链接，以便您可以将映像部署到主机。它为整个开发流程中的容器映像发现，分发和变更管理，用户和团队协作以及工作流自动化提供了集中资源。</p><h3 id="Q7。-Docker与其他容器技术有何不同？"><a href="#Q7。-Docker与其他容器技术有何不同？" class="headerlink" title="Q7。 Docker与其他容器技术有何不同？"></a><strong>Q7。</strong> <strong>Docker与其他容器技术有何不同？</strong></h3><p>据我<br>所知，您的答案应该在以下几点：Docker容器易于在云中部署。与其他技术相比，它可以在相同的硬件上运行更多的应用程序，使开发人员可以轻松快速创建，可立即运行的容器化应用程序，并使管理和部署应用程序变得更加容易。您甚至可以与您的应用程序共享容器。<br>如果你还有一些要点可以添加，你可以这样做，但要确保上面的解释在你的答案中。</p><h3 id="Q8。-什么是Docker-Swarm？"><a href="#Q8。-什么是Docker-Swarm？" class="headerlink" title="Q8。 什么是Docker Swarm？"></a><strong>Q8。</strong> <strong>什么是Docker Swarm？</strong></h3><p>你应该通过解释Docker Swarn来开始这个答案。它是Docker的本机群集，它将Docker主机池转变为单个虚拟Docker主机。Docker Swarm提供标准的Docker API，任何已经与Docker守护进程通信的工具都可以使用Swarm透明地扩展到多个主机。<br>我还建议您添加一些支持的工具：</p><ul><li>Dokku</li><li>Docker撰写</li><li>Docker Machine</li><li>Jenkins</li></ul><h3 id="Q9。Dockerfile用于什么？"><a href="#Q9。Dockerfile用于什么？" class="headerlink" title="Q9。Dockerfile用于什么？"></a><strong>Q9。Dockerfile用于什么？</strong></h3><p>根据我的回答应该从解释Dockerfile的使用开始。Docker可以通过读取Dockerfile中的指令自动构建图像。<br>现在我建议你给出一个Dockerfle的小定义。Dockerfile是一个文本文档，其中包含用户可以在命令行上调用以组合图像的所有命令。使用docker构建用户可以创建一个连续执行多个命令行指令的自动构建。</p><p>现在期待一些问题来测试您使用Docker的体验。</p><h3 id="Q10。-我可以在Docker中使用json而不是yaml作为我的compose文件吗？"><a href="#Q10。-我可以在Docker中使用json而不是yaml作为我的compose文件吗？" class="headerlink" title="Q10。 我可以在Docker中使用json而不是yaml作为我的compose文件吗？"></a><strong>Q10。</strong> <strong>我可以在Docker中使用json而不是yaml作为我的compose文件吗？</strong></h3><p>你可以使用json而不是yaml作为你的compose文件，使用带有compose的json文件，指定用于例如的文件名：<br><strong>docker-compose -f docker-compose.json up</strong></p><h3 id="Q11。-告诉我们你在过去的职位中如何使用Docker？"><a href="#Q11。-告诉我们你在过去的职位中如何使用Docker？" class="headerlink" title="Q11。 告诉我们你在过去的职位中如何使用Docker？"></a><strong>Q11。</strong> <strong>告诉我们你在过去的职位中如何使用Docker？</strong></h3><p>解释您如何使用Docker来帮助快速部署。解释你如何使用脚本化Docker并将Docker与Puppet，Chef或Jenkins等其他工具一起使用。如果您在Docker中没有过去的实践经验，并且在类似的空间中有过其他工具的经验，请诚实并解释相同的内容。在这种情况下，如果您可以在功能方面与Docker比较其他工具，这是有意义的。</p><h3 id="Q12。如何创建Docker容器？"><a href="#Q12。如何创建Docker容器？" class="headerlink" title="Q12。如何创建Docker容器？"></a><strong>Q12。如何创建Docker容器？</strong></h3><p>我建议你直接回答这个问题。我们可以使用以下命令使用Docker镜像创建Docker容器：<br><strong>docker run -t -i <image name=""> <command name=""></image></strong>此命令将创建并启动容器。<br>您还应该添加，如果要检查主机上具有状态的所有正在运行的容器的列表，请使用以下命令：<br><strong>docker ps -a</strong></p><h3 id="Q13。如何停止并重新启动Docker容器？"><a href="#Q13。如何停止并重新启动Docker容器？" class="headerlink" title="Q13。如何停止并重新启动Docker容器？"></a><strong>Q13。如何停止并重新启动Docker容器？</strong></h3><p>为了停止Docker容器，您可以使用以下命令：<br><strong>docker stop &lt;容器ID&gt;</strong><br>现在重新启动Docker容器，您可以使用：<br><strong>docker restart &lt;容器ID&gt;</strong></p><h3 id="Q14。Docker容器可以扩展多远？"><a href="#Q14。Docker容器可以扩展多远？" class="headerlink" title="Q14。Docker容器可以扩展多远？"></a>Q14。Docker容器可以扩展多远？</h3><p>像谷歌和Twitter这样的大型网络部署，以及像Heroku和dotCloud这样的平台提供商都运行在容器技术上，并行运行数十万甚至数百万个容器。</p><h3 id="Q15。Docker运行的平台是什么？"><a href="#Q15。Docker运行的平台是什么？" class="headerlink" title="Q15。Docker运行的平台是什么？"></a>Q15。Docker运行的平台是什么？</h3><p>我将通过说Docker仅在Linux和云平台上运行来开始这个答案，然后我将提到以下Linux供应商：</p><ul><li>Ubuntu 12.04,13.04等</li><li>Fedora 19/20 +</li><li>RHEL 6.5+</li><li>CentOS 6+</li><li>Gentoo的</li><li>ArchLinux的</li><li>openSUSE 12.3+</li><li>CRUX 3.0+</li></ul><p>云：</p><ul><li>亚马逊EC2</li><li>Google Compute Engine</li><li>Microsoft Azure</li><li>Rackspace公司</li></ul><p><strong>请注意，Docker无法在Windows或Mac上运行。</strong></p><h3 id="Q16。当Docker容器退出时，我会丢失数据吗？"><a href="#Q16。当Docker容器退出时，我会丢失数据吗？" class="headerlink" title="Q16。当Docker容器退出时，我会丢失数据吗？"></a><strong>Q16。当Docker容器退出时，我会丢失数据吗？</strong></h3><p>你可以回答这个问题，当Dcoker容器退出时，我不会丢失我的数据。在您明确删除容器之前，应用程序写入磁盘的任何数据都会保留在其容器中。即使在容器停止之后，容器的文件系统仍然存在。</p><p>而且，就是这样！</p><p>我希望这些问题可以帮助您破解DevOps面试。如果您对我们有任何疑问，请在评论部分提及，我们会尽快回复您。</p><p>如果您希望为DevOps角色构建强大的简历，<a href="https://www.edureka.co/blog/devops-resume" target="_blank" rel="noopener">请查看我们为您编写的博客</a>。</p><p>您还可以通过<a href="https://www.facebook.com/edurekaIN/" target="_blank" rel="noopener">Facebook</a>，<a href="https://twitter.com/edurekaIN" target="_blank" rel="noopener">Twitter</a>，<a href="https://www.instagram.com/edureka_learning/" target="_blank" rel="noopener">Instagram</a>，<a href="https://www.youtube.com/user/edurekaIN?sub_confirmation=1" target="_blank" rel="noopener">YouTube</a>，<a href="https://www.linkedin.com/company/edureka/" target="_blank" rel="noopener">LinkedIn</a>甚至<a href="https://in.pinterest.com/edurekaco/" target="_blank" rel="noopener">Pinterest与我们联系</a>！</p><p>想要开始您的DevOps学习之旅吗？<a href="https://www.edureka.co/blog/edureka-online-courses/" target="_blank" rel="noopener">没有比Edureka更好的地方了</a>。我们的荒谬承诺保证了它！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;您是DevOps工程师还是想进入DevOps？那么，未来就是你的。顶级研究公司Forrester宣布2018年为“ &lt;a href=&quot;https://go.forrester.com/blogs/2018-the-year-of-enterprise-devops/&quot; ta
      
    
    </summary>
    
      <category term="DevOps" scheme="http://blog.ozairs.com/categories/DevOps/"/>
    
    
      <category term="DevOps" scheme="http://blog.ozairs.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>利用 Puppet 实现自动化管理配置 Linux 计算机集群</title>
    <link href="http://blog.ozairs.com/DevOps/Puppet/%E5%88%A9%E7%94%A8-Puppet-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE-Linux-%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9B%86%E7%BE%A4/"/>
    <id>http://blog.ozairs.com/DevOps/Puppet/利用-Puppet-实现自动化管理配置-Linux-计算机集群/</id>
    <published>2019-03-14T01:18:33.000Z</published>
    <updated>2019-03-14T03:33:56.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Puppet：开源系统配置和管理工具"><a href="#Puppet：开源系统配置和管理工具" class="headerlink" title="Puppet：开源系统配置和管理工具"></a>Puppet：开源系统配置和管理工具</h2><p>随着虚拟化和云计算技术的兴起，计算机集群的自动化管理和配置成为了数据中心运维管理的热点。对于 IaaS、Paas、Saas 来说，随着业务需求的提升，后台计算机集群的数量也会线性增加。对于数据中心的运维人员来说，如何自动化管理、配置这些大规模的计算机集群节点，对于数据中心的稳定运行以及运维成本控制都显得至关重要。</p><p>Puppet 是一个开源系统配置管理工具，它有着简明的架构以及良好的扩展性；同时，Puppet 还提供了自有的系统配置描述语言以及完善的公用库，非常适合用于管理和部署大规模集群系统。</p><h2 id="Puppet-的系统架构"><a href="#Puppet-的系统架构" class="headerlink" title="Puppet 的系统架构"></a>Puppet 的系统架构</h2><p>Puppet 使用简明的 C/S 架构，分为 Puppet Server 和 Puppet Node。</p><h5 id="图-1-Puppet-的架构"><a href="#图-1-Puppet-的架构" class="headerlink" title="图 1. Puppet 的架构"></a>图 1. Puppet 的架构</h5><p><img src="/DevOps/Puppet/利用-Puppet-实现自动化管理配置-Linux-计算机集群/1.png" alt=""></p><p><strong>Puppet Server</strong></p><p>Puppet Server 是配置和管理整个集群的大脑，管理着所有节点。系统管理员在 Puppet Server 上用 Puppet 特有的配置描述语言为各个节点编写配置文件 (manifest)，配置文件描述了节点的目标状态——资源的集合。这些资源可以是文件、服务、软件包等等。各个节点会周期性的查询 Puppet Server，获得自己的最新配置文件，并且在本地应用这些配置文件，使得自身的资源和状态达到配置文件要求。</p><p><strong>Puppet Node(Agent)</strong></p><p>被 Puppet Master 管理着的计算机节点称为 Puppet node。Puppet node 会周期性的查询 Puppet Master，来获取自己的配置文件，并且在本地应用。在每次应用配置文件之后，Puppet node 会提供上传一份报告给 Puppet Master，以便以后的统计和分析。系统管理员也可以手动地在 Puppet Node 上执行命令，让 Puppet Node 立即查询 Puppet Server 获取自身最新的配置文件，并且在本地应用。</p><h2 id="Puppet-的工作流程"><a href="#Puppet-的工作流程" class="headerlink" title="Puppet 的工作流程"></a>Puppet 的工作流程</h2><p>Puppet 的工作流程可以概括成这几步：定义、模拟、应用、报告。</p><h5 id="图-2-Puppet-的工作流程"><a href="#图-2-Puppet-的工作流程" class="headerlink" title="图 2. Puppet 的工作流程"></a>图 2. Puppet 的工作流程</h5><p><img src="/DevOps/Puppet/利用-Puppet-实现自动化管理配置-Linux-计算机集群/2.png" alt=""></p><h3 id="定义-Define"><a href="#定义-Define" class="headerlink" title="定义 (Define)"></a>定义 (Define)</h3><p>管理员为各个节点编写配置文件，配置文件中定义了该节点所需要的资源的集合以及资源之间的关系。这些资源可以是文件、服务、软件包、可执行的命令等等。Puppet 内置的配置管理语言对这些资源提供了较为完整的底层抽象，减轻了编写配置文件的复杂度。</p><h3 id="模拟-Simulate"><a href="#模拟-Simulate" class="headerlink" title="模拟 (Simulate)"></a>模拟 (Simulate)</h3><p>根据节点的配置文件，我们可以了解到该节点需要什么样的资源并且处于什么样的状态。配置文件描述了节点的状态，而不是具体的配置步骤。Puppet 会将配置文件 Manifest 编译成更为详细的一种配置文件 Catalog。通过 Catalog，Puppet 会根据节点的当前状态，模拟出节点达到该目标状态所需要的步骤。</p><h3 id="应用-Enforce"><a href="#应用-Enforce" class="headerlink" title="应用 (Enforce)"></a>应用 (Enforce)</h3><p>节点周期性地向 Puppet Server 来请求自己最新的配置文件。Puppet 会将节点的实际状态与节点配置文件中所表述的目标状态做比较，并根据得到的所需要的步骤，对节点执行操作，使其达到配置文件所表述的状态。</p><h3 id="报告-Report"><a href="#报告-Report" class="headerlink" title="报告 (Report)"></a>报告 (Report)</h3><p>当每次应用执行过后，节点都会给 Puppet Server 发送一份运行报告，报告该节点的状态，以便以后的分析和统计。</p><h2 id="Puppet-配置语言介绍"><a href="#Puppet-配置语言介绍" class="headerlink" title="Puppet 配置语言介绍"></a>Puppet 配置语言介绍</h2><p>Puppet 配置管理语言中的核心概念是资源，资源可以是一个软件包，一个文件，一种服务等等。一个节点的状态可以用资源的集合以及他们之间的关系来表示。管理员不需要详细地描述配置和部署系统的具体步骤，Puppet 只需要管理员来描述系统的目标状态，即资源的集合以及它们之间的关系。Puppet 内置的执行引擎会根据节点的现有状态将配置文件转化为具体的执行步骤并且执行。</p><p>在 Puppet 中，类是一系列相关资源的集合；模块是一系列类的集合。Puppet 内置提供了一些常用的类和模块，同时用户可以定义自己的类和模块。通过类和模块使用，配置模块重用和共享变的非常容易。</p><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>由于 Puppet Server 和节点之间通过主机名来通信，所以需要双方可以通过彼此的主机名来找到对应的 IP 地址。可以通过配置 DNS 或者配置/ets/hosts 文件来实现。</p><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><p>在安装官方提供的开源版本的 Puppet 软件之前，Puppet Server 和 agent 首先需要都安装官方的软件源 (Puppet 对各种 Linux 发行版都有提供支持，本文以 Ubuntu 14.04 系统为例)：</p><p>下载官方软件源的安装包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`wget https://apt.puppetlabs.com/puppetlabs-release-pc1-trusty.deb`</span><br></pre></td></tr></table></figure><p>更新软件源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`sudo dpkg -i puppetlabs-release-pc1-trusty.deb``sudo apt-get update`</span><br></pre></td></tr></table></figure><p><strong>安装 Puppet Server</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`sudo apt-get install puppetserver`</span><br></pre></td></tr></table></figure><p><strong>启动 PuppetServer</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`sudo service puppetservice start`</span><br></pre></td></tr></table></figure><p><strong>安装 PuppetAgent</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`sudo apt-get install puppet-agent`</span><br></pre></td></tr></table></figure><p>编辑/etc/puppetlabs/puppet/puppet.conf 文件，设置该 agent 的 puppet server 的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`[main]``server = puppetmaster`</span><br></pre></td></tr></table></figure><p>注：puppetmaster 是 puppetserver 的主机名。</p><p><strong>启动 puppet service</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`sudo /opt/puppetlabs/bin/puppet resource service puppet ensure=running enable=true`</span><br></pre></td></tr></table></figure><h2 id="编写第一个配置文件"><a href="#编写第一个配置文件" class="headerlink" title="编写第一个配置文件"></a>编写第一个配置文件</h2><h3 id="第一个-Hello-World-配置文件"><a href="#第一个-Hello-World-配置文件" class="headerlink" title="第一个 Hello World 配置文件"></a>第一个 Hello World 配置文件</h3><p>作为第一个实例配置文件，我们想让节点做一件最简单的事情：在/etc/文件夹下面创建一个文件 helloworld.txt，文件的内容是”hello world from puppet!\n”。</p><p>首先我们在 puppetserver 上进入/etc/puppetlabs/code/environments/production/manifests 文件夹，创建 site.pp 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`node puppetagent &#123;` `file &#123; &apos;helloworld&apos;:` `    ``path =&gt; &apos;/etc/helloworld.txt&apos;,``    ``owner  =&gt; &apos;root&apos;,``    ``group  =&gt; &apos;root&apos;,``    ``mode   =&gt; &apos;655&apos;,``    ``content =&gt; &quot;hello world from puppet!\n&quot;,``    ``&#125;` `&#125;`</span><br></pre></td></tr></table></figure><p>site.pp 就是节点的配置文件，里面可以包含对各个节点的配置描述。在实例配置文件中，”puppetagent”就是节点的主机名。包含在 puppetagent 中的配置描述就是该节点的资源集合的描述。</p><p>配置文件创建好后，节点会周期性地查询 PuppetServer 来获取自己的配置文件并在本地应用。当然 Puppet 也支持手动获取自己的配置。在本例中，我们通过手动的方式来进行配置更新。我们在 PuppetAgent 上手动执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`root@puppetAgent:/opt/puppetlabs/bin# ./puppet agent --test``2016-05-21 14:24:14.858673 WARN  puppetlabs.facter - locale environment variables were bad; ``                         ``continuing with LANG=C LC_ALL=C``Info: Using configured environment &apos;production&apos;``Info: Retrieving pluginfacts``Info: Retrieving plugin``Info: Caching catalog for puppetagent``Info: Applying configuration version &apos;1463811856&apos;``Notice: /Stage[main]/Main/Node[puppetagent]/File[helloworld]/ensure: ``                        ``defined content as &apos;&#123;md5&#125;c3aa68786c58c94ef6f3e2399920f268&apos;``Notice: Applied catalog in 0.02 seconds``root@puppetAgent:/opt/puppetlabs/bin# cat /etc/helloworld.txt ``hello world from puppet!`</span><br></pre></td></tr></table></figure><p>我们看到节点成功从 Puppet Server 获取配置文件，并且在本地应用，对应的文件成功创建。</p><h3 id="进阶：执行脚本任务"><a href="#进阶：执行脚本任务" class="headerlink" title="进阶：执行脚本任务"></a>进阶：执行脚本任务</h3><p>作为进阶的任务，我们希望节点可以执行一些更加复杂一点的任务。我们希望节点可以从 PuppetServer 获取一个命令脚本，并且执行该脚本。</p><p>我们首先在/etc/puppetlabs/code/environments/production/modules 中创建一个名叫”test”的模块，在 test 模块下面创建一个”files”文件夹。在这个文件夹里的文件是可以被节点获取的。然后我们在这个”files”文件夹里创建一个 shell 脚本 test.sh，路径如下：</p><p>/etc/puppetlabs/code/environments/production/modules/test/files/test.sh</p><p>test.sh 文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`touch /etc/helloworld.log``echo &quot;helloworld&quot; &gt;&gt; /etc/helloworld.log`</span><br></pre></td></tr></table></figure><p>该脚本会在/etc/目录下创建 helloworld.log 文件，然后在文件里添加”hello world”内容。</p><p>进入目录/etc/puppetlabs/code/environments/production/manifests，然后我们再来编辑 site.pp 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`node puppetagent &#123;``file &#123; &apos;test.sh&apos;:`` ``path =&gt; &apos;/etc/test.sh&apos;,`` ``owner  =&gt; &apos;root&apos;,`` ``group  =&gt; &apos;root&apos;,`` ``mode   =&gt; &apos;655&apos;,`` ``source =&gt; &apos;puppet:///modules/test/test.sh&apos;,`` ``&#125;``exec &#123; &apos;execute &apos;:`` ``command =&gt; &apos;bash /etc/test.sh&apos;,`` ``require =&gt; File[&apos;test.sh&apos;],`` ``path =&gt; [&quot;/bin/&quot;],``&#125;``&#125;`</span><br></pre></td></tr></table></figure><p>其中，我们定义了两个资源：一个文件资源和一个执行命令资源。同时这两个资源有依赖关系，命令执行资源依赖于文件资源，所以 Puppet 会优先处理文件资源。执行命令资源会在文件资源存在后再执行。</p><p>我们看下客户端的执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`root@puppetAgent:/opt/puppetlabs/bin# ./puppet agent --test``2016-05-21 15:39:39.817370 WARN  puppetlabs.facter - locale environment variables were bad; ``                                ``continuing with LANG=C LC_ALL=C``Info: Using configured environment &apos;production&apos;``Info: Retrieving pluginfacts``Info: Retrieving plugin``Info: Caching catalog for puppetagent``Info: Applying configuration version &apos;1463816381&apos;``Notice: /Stage[main]/Main/Node[puppetagent]/File[test.sh]/ensure: ``                                ``defined content as &apos;&#123;md5&#125;2ce060ad2ddab2fe416ca8fb6f8da32a&apos;``Notice: /Stage[main]/Main/Node[puppetagent]/Exec[execute ]/returns: executed successfully``Notice: Applied catalog in 0.05 seconds``root@puppetAgent:/opt/puppetlabs/bin# cat /etc/helloworld.log ``helloworld`</span><br></pre></td></tr></table></figure><p>我们可以看到，helloworld.log 文件被正确的创建，说明脚本文件被正确地执行。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>Puppet 是基于 Ruby 的开源系统配置和管理工具，它提供的独特的系统配置语言极大程度地简化了系统管理员管理和配置系统的过程。本文首先介绍了 Puppet 的系统架构和工作流程，并且介绍了 Puppet 独特的系统配置语言，之后我们简单介绍了安装和配置 Puppet 的具体步骤。最后，本文以两个实例介绍了如何在 Puppet 中为节点编写配置文件，来达到创建文件和执行命令的效果。希望本文能对系统管理员，Puppet 初学者有所帮助。</p><p>其他：</p><p>问题1: Exiting; no certificate found and waitforcert is disabled </p><p>解决方案： <a href="https://fvtool.wordpress.com/2013/04/15/exiting-no-certificate-found-and-waitforcert-is-disabled-installing-puppet/" target="_blank" rel="noopener">https://fvtool.wordpress.com/2013/04/15/exiting-no-certificate-found-and-waitforcert-is-disabled-installing-puppet/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Puppet：开源系统配置和管理工具&quot;&gt;&lt;a href=&quot;#Puppet：开源系统配置和管理工具&quot; class=&quot;headerlink&quot; title=&quot;Puppet：开源系统配置和管理工具&quot;&gt;&lt;/a&gt;Puppet：开源系统配置和管理工具&lt;/h2&gt;&lt;p&gt;随着虚拟化和
      
    
    </summary>
    
      <category term="DevOps" scheme="http://blog.ozairs.com/categories/DevOps/"/>
    
      <category term="Puppet" scheme="http://blog.ozairs.com/categories/DevOps/Puppet/"/>
    
    
      <category term="Puppet" scheme="http://blog.ozairs.com/tags/Puppet/"/>
    
  </entry>
  
  <entry>
    <title>Puppt命令实用指南</title>
    <link href="http://blog.ozairs.com/DevOps/Puppet/Puppet_command/"/>
    <id>http://blog.ozairs.com/DevOps/Puppet/Puppet_command/</id>
    <published>2019-03-14T00:45:41.000Z</published>
    <updated>2019-03-14T00:45:35.381Z</updated>
    
    <content type="html"><![CDATA[<p>1、下载安装r10k Module<br>puppet module install puppet/r10k –modulepath=/etc/puppetlabs/code/modules</p><p>2、puppet code与github repo同步<br>r10k deploy environment -p</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、下载安装r10k Module&lt;br&gt;puppet module install puppet/r10k –modulepath=/etc/puppetlabs/code/modules&lt;/p&gt;
&lt;p&gt;2、puppet code与github repo同步&lt;br&gt;r10
      
    
    </summary>
    
      <category term="DevOps" scheme="http://blog.ozairs.com/categories/DevOps/"/>
    
      <category term="Puppet" scheme="http://blog.ozairs.com/categories/DevOps/Puppet/"/>
    
    
      <category term="Puppet" scheme="http://blog.ozairs.com/tags/Puppet/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.ozairs.com/uncategorized/Git%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.ozairs.com/uncategorized/Git实用教程/</id>
    <published>2019-03-13T11:16:43.451Z</published>
    <updated>2019-03-14T01:21:27.179Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;Git实用教程&gt;</p><p>1、Git创建和切换Branch</p><p>git brach example</p><p>git checkout ‘example’</p><p>2、查看Branch，Branch改名和删除Branch</p><p>git branch</p><p>git branch -m originname newname</p><p>git branch -D branchname</p><p>3、提交代码到Staging Enviroment</p><p>git add example （git add . ）</p><p>4、提交代码到正式环境</p><p>git commit -m “comment”</p><p>5、合并不同 branch的代码</p><p>git merge branchname</p><p>6、查看代码日志</p><p>git log</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;lt;Git实用教程&amp;gt;&lt;/p&gt;
&lt;p&gt;1、Git创建和切换Branch&lt;/p&gt;
&lt;p&gt;git brach example&lt;/p&gt;
&lt;p&gt;git checkout ‘example’&lt;/p&gt;
&lt;p&gt;2、查看Branch，Branch改名和删除Branch&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git 和 GitHub 基础配置</title>
    <link href="http://blog.ozairs.com/DevOps/Git-%E5%92%8C-GitHub-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.ozairs.com/DevOps/Git-和-GitHub-基础配置/</id>
    <published>2019-03-13T10:43:27.000Z</published>
    <updated>2019-03-13T10:52:52.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在本系列的<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-git-and-github-1/index.html" target="_blank" rel="noopener">第一篇</a>文章中着重介绍了 Git 的基础特性。本文作为本系列的第二篇文章将介绍 Git 和 GitHub 的基础配置，包括 Git 安装、使用 Git 克隆 GitHub 上的代码库、使用 Git 克隆远端代码仓库、Git 的基本配置和设置忽略提交规则。您在阅读完本文将有能力完成本地 Git 环境的基础配置，为接下来的 Git 日常使用做基础。</p><p>GitHub 是一个代码托管平台，如果开发者想要在本地进行开发工作，那么就需要使用到 Git 的客户端工具来连接到 GitHub，再克隆代码到本地。如果您是重度的 GUI 使用者，那么有很多 GUI 客户端可以选择，在 Git 的官网就专门有个页面列出了业内的<a href="https://git-scm.com/downloads/guis/" target="_blank" rel="noopener"> GUI 客户端</a>。</p><p>但遗憾的是往往 GUI 客户端只能提供 Git 部分的功能，如果想要享受到 Git 自底向上强大的功能，使用命令行的方式来操作 Git 是不二之选。建议无论您是否擅长使用命令行工作，都可以尝试使用命令行方式来操作 Git。本文将只介绍如何从命令行来连接到 GitHub。</p><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><p>使用命令行方式操作 Git 工具，需要本地安装 Git。注意，这里没有使用 “Git 客户端” 一词，因为 Git 作为一个开源版本控制系统，本身既可以作为客户端工具，也可以用于建立服务器端代码库，所以本质上 Git 作为工具来讲没有客户端和服务器端之分。</p><p>本地安装 Git 十分简单。</p><p>对于 Windows 用户，可以下载 <a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git For Windows</a> 工具。下载安装成功之后，我们可以得到一个 Git Bash 工具，它是一个类 Linux Bash 工具。在该工具中我们可以直接执行 Git 相关命令。</p><p>对于 Mac 和 Linux 用户，只需通过对应的包管理工具安装即可，如清单 1 所示：</p><h5 id="清单-1-Mac-和-Linux-下安装-Git"><a href="#清单-1-Mac-和-Linux-下安装-Git" class="headerlink" title="清单 1. Mac 和 Linux 下安装 Git"></a>清单 1. Mac 和 Linux 下安装 Git</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`$ brew install git         # For Mac``$ apt-get install git      # For Ubuntu``# yum install git          # For RedHat EL, CentOS`</span><br></pre></td></tr></table></figure><h2 id="使用-Git-克隆-GitHub-代码库"><a href="#使用-Git-克隆-GitHub-代码库" class="headerlink" title="使用 Git 克隆 GitHub 代码库"></a>使用 Git 克隆 GitHub 代码库</h2><p>安装 Git 成功之后，我们就可以使用 Git 克隆 GitHub 上的代码库，本节仍然以我的代码库<a href="https://github.com/caozhi/repo-for-developerworks" target="_blank" rel="noopener"> repo-for-developerworks </a>为例。</p><p>GitHub 提供了两种克隆方式：HTTPS 和 SSH。我们可以点击仓库页面上的 <strong>Clone or download</strong> 按钮来查看用于克隆的链接，同时可以点击浮动框右上角的 <strong>Use SSH/Use HTTPS</strong> 换我们想要克隆的 link，如图 2 和 图 3 所示。注意，这里只是切换查看不同的链接，而不是设置代码库不同的链接方式。</p><p>由此我们可以获得两个 URL：</p><ul><li>HTTPS 链接：<code>https://github.com/caozhi/repo-for-developerworks.git</code></li><li>SSH 链接：<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:caozhi/repo-for-developerworks.git`</li></ul><h3 id="使用-HTTPS-进行克隆"><a href="#使用-HTTPS-进行克隆" class="headerlink" title="使用 HTTPS 进行克隆"></a>使用 HTTPS 进行克隆</h3><p>由于代码库是开放的，因此使用 HTTPS 方式克隆时，无需 GitHub 用户名密码，如清单 2 所示：</p><h5 id="清单-2-使用-HTTPS-进行克隆"><a href="#清单-2-使用-HTTPS-进行克隆" class="headerlink" title="清单 2. 使用 HTTPS 进行克隆"></a>清单 2. 使用 HTTPS 进行克隆</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`caozhi@ clone$ git clone https://github.com/caozhi/repo-for-developerworks.git``Cloning into &apos;repo-for-developerworks&apos;...``remote: Counting objects: 14, done.``remote: Compressing objects: 100% (9/9), done.``remote: Total 14 (delta 3), reused 5 (delta 1), pack-reused 0``Unpacking objects: 100% (14/14), done.`</span><br></pre></td></tr></table></figure><p>顺便提一下，进行 pull 和 fetch 操作时也无需用户名密码认证。因为 GitHub 的机制允许随意免费下载任何公开的代码库，如若要 push 代码需经过认证或者经过作者同意才可。当要进行 push 时，会出现提示要求输入用户名密码，如清单 3 所示：</p><h5 id="清单-3-HTTPS-方式下-push-代码"><a href="#清单-3-HTTPS-方式下-push-代码" class="headerlink" title="清单 3. HTTPS 方式下 push 代码"></a>清单 3. HTTPS 方式下 push 代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`caozhi@ repo-for-developerworks$ echo change &gt;&gt; README.md   ## make some modification``caozhi@ repo-for-developerworks$ git add .``caozhi@ repo-for-developerworks$ git commit -m &quot;changes&quot;``[master d774ecf] changes`` ``1 file changed, 1 insertion(+)``caozhi@ repo-for-developerworks$ git push``Username for &apos;https://github.com&apos;: caozhi0321@gmail.com    ## Enter GitHub account name``Password for &apos;https://caozhi0321@gmail.com@github.com&apos;:   ## Enter Password``Counting objects: 6, done.``Delta compression using up to 8 threads.``Compressing objects: 100% (4/4), done.``Writing objects: 100% (6/6), 528 bytes | 528.00 KiB/s, done.``Total 6 (delta 2), reused 0 (delta 0)``remote: Resolving deltas: 100% (2/2), completed with 1 local object.``To https://github.com/caozhi/repo-for-developerworks.git``   ``075c130..d774ecf  master -&gt; master`</span><br></pre></td></tr></table></figure><h3 id="使用-SSH-进行克隆"><a href="#使用-SSH-进行克隆" class="headerlink" title="使用 SSH 进行克隆"></a>使用 SSH 进行克隆</h3><p>使用 SSH 方式进行克隆，需要一步额外的配置 SSH-KEY 的操作。首先需要本地生成一个 SSH Key。我们可以借助 ssh-keygen 工具生成一对 RSA 的秘钥：私钥<code>id_rsa</code> 和公钥 <code>id_rsa.pub</code>。生成的秘钥文件会默认放在 home 目录下的 <code>.ssh</code> 目录下。</p><p>先将 <code>id_rsa.pub</code> 公钥文件的内容复制到剪贴板，如图 5 所示，使用 <code>cat id_rsa.pub</code> 命令可以查看公钥内容，随后将该公钥导入到 GitHub 里的账户之下。</p><p>在 GitHub 页面右上角的头像里点击展开一个下拉菜单，点击 <strong>Settings</strong> 可以打开个设置页面。</p><p>打开 <strong>SSH and GPG keys</strong> 的配置页面，点击右上角的 <strong>New SSH key</strong> 按钮。</p><p>在打开的页面中先设置一个您想导入的公钥的名称，再将前面复制的公钥内容粘贴到大文本框中，点击 <strong>Add SSH key</strong> 即可。</p><p>页面自动跳转回 <strong>SSH and GPG keys</strong> 设置页面，您可以看到在我的账号下成功新增了一个 SSH Key。</p><p>此时我们可以使用 SSH 的方式进行代码克隆，还可以使用 <code>ssh -T</code> 命令检测是否配置成功, 如清单 4 和 5 所示：</p><h5 id="清单-4-使用-SSH-方式克隆"><a href="#清单-4-使用-SSH-方式克隆" class="headerlink" title="清单 4. 使用 SSH 方式克隆"></a>清单 4. 使用 SSH 方式克隆</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`caozhi@ $ git clone git@github.com:caozhi/repo-for-developerworks.git``Cloning into &apos;repo-for-developerworks&apos;...``remote: Counting objects: 20, done.``remote: Compressing objects: 100% (12/12), done.``remote: Total 20 (delta 5), reused 10 (delta 2), pack-reused 0``Receiving objects: 100% (20/20), done.``Resolving deltas: 100% (5/5), done.`</span><br></pre></td></tr></table></figure><h5 id="清单-5-检测-SSH-是否配置成功"><a href="#清单-5-检测-SSH-是否配置成功" class="headerlink" title="清单 5. 检测 SSH 是否配置成功"></a>清单 5. 检测 SSH 是否配置成功</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`caozhi@bogon:~$ ssh -T git@github.com``Hi caozhi! You&apos;ve successfully authenticated, but GitHub does not provide shell access.`</span><br></pre></td></tr></table></figure><p>使用 SSH 的方式进行克隆，将使得我们本地与 GitHub 之间建立了信任连接，也就意味着之后所有需要进行用户认证的地方都不再需要显式地用户名密码认证。例如 <code>git push</code> 会直接通过 SSH 进行认证。经验表明，使用 SSH 的另一个好处是在网络环境较差的情况下，其稳定性要高于 HTTPS 连接。</p><p>至此，我们成功地使用 Git 命令行方式克隆了代码库，之后就可以进行正常的日常开发。</p><h2 id="使用-Git-克隆远程仓库"><a href="#使用-Git-克隆远程仓库" class="headerlink" title="使用 Git 克隆远程仓库"></a>使用 Git 克隆远程仓库</h2><p>当一个开发者刚进入某一项目，一般来说他所要做的第一件事是克隆远程仓库到本地，以进行本地开发工作。远程仓库可以是来自于 GitHub 或者 GitLab 等代码托管服务，也可以是项目组自己所搭设的 Git 服务器。无论是哪种远程仓库，都可以使用 <code>git clone</code> 命令 <code>git clone &lt;repository&gt; [local_path]</code> 将其从远端克隆到本地。命令中间的 <code>&lt;repository&gt;</code> 根据远端仓库提供的连接方式不同，其形式可能不同，例如：</p><ul><li>GitHub 的 HTTPS 连接：<br><code>https://github.com/caozhi/repo-for-developerworks.git</code></li><li>GitHub 的 SSH 连接：<br><a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:caozhi/repo-for-developerworks.git`</li><li>自建仓库的 SSH 连接：<br><a href="mailto:`git_user@192.168.0.1" target="_blank" rel="noopener">`git_user@192.168.0.1</a>:/usr/local/repo-for-developerworks.git`</li></ul><p>其中前两种 GitHub 的连接方式，其仓库的连接字符串可以在 GitHub 的对应仓库页面中找到，如前<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-git-and-github-2/index.html#1%E5%9B%BE2%E6%9F%A5%E7%9C%8BHTTPS%E5%85%8B%E9%9A%86%E9%93%BE%E6%8E%A5outline" target="_blank" rel="noopener">图 2</a> 和<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-git-and-github-2/index.html#1%E5%9B%BE3%E6%9F%A5%E7%9C%8BSSH%E5%85%8B%E9%9A%86%E9%93%BE%E6%8E%A5outline" target="_blank" rel="noopener">图 3</a>所示。</p><p>第三种自建仓库的 URL 一般需要提供远端服务器上的账号、host 和路径。以上面例子中的连接字符串 <a href="mailto:`git_user@192.168.0.1" target="_blank" rel="noopener">`git_user@192.168.0.1</a>:/usr/local/repo-for-developerworks.git` 为例：</p><ul><li><code>git_user</code> 是服务器上对代码库目录有访问权限的账号。</li><li><code>192.168.0.1</code> 是远端服务器的 IP，也可以是主机名或者 URL。</li><li><code>/usr/local/repo-for-developerworks.git</code> 是服务器上代码库的根目录。</li></ul><p><code>git clone</code> 命令中的 <code>local_path</code> 指定了本地想要存放代码库的地址。该参数是可选参数，如果不指定该参数就会在本地新建一个以远程仓库名为命名的目录，然后以该目录为代码库根目录。图 10 展示了在空目录 <code>clone_demo</code> 中执行不带 <code>local_path</code> 参数的 clone 命令：</p><p>从截图可以看到，<code>git clone</code> 命令在 <code>clone_demo</code> 目录中创建了一个 <code>repo-for-developerworks</code> 的代码库目录。</p><p>从截图可以看到，<code>git clone</code> 命令在 <code>clone_demo</code> 目录中新建了一个我们指定的<code>local_dev-repo</code> 目录，并将其作为本地代码库的根目录。</p><p>我们知道一般操作系统将一个英文句点表示当前目录，因此从截图可以看出，当 <code>local_path</code> 指定为当前目录时，<code>git clone</code> 命令会直接将当前目录作为本地代码库的根目录。</p><p>当然 Git 还提供其它的连接方式如 File、FTP。感兴趣的读者可以自己使用 Git 搭一个 Git 服务器尝试使用 File 和 FTP 方式进行连接。</p><p>默认情况下，<code>git clone</code> 会将远端代码库全部克隆到本地。Git 还支持只克隆特定分支到本地。我们可以使用 <code>git clone -b **branchname** --single-branch git@URL local_path</code> 命令。</p><h2 id="Git-的基本配置"><a href="#Git-的基本配置" class="headerlink" title="Git 的基本配置"></a>Git 的基本配置</h2><p>在克隆了代码库之后，我们一般仍需要对 Git 做一些基本的配置才能使用 Git 进行日常工作。Git 配置的作用域主要有三种：System、Global 和 Local，分别对应的配置文件地址为：</p><ul><li>System：<code>/etc/gitconfig</code>。系统级别有效。</li><li>Global：home 目录下的 <code>~/.gitconfig</code> 文件。用户级别有效。</li><li>Local：代码库目录的 <code>.git/config</code> 文件。代码库级别有效。</li></ul><p>另外我们也可以使用 <code>git config --system -l</code>，<code>git config --global -l</code>，<code>git config --local -l</code> 命令分别列出三个作用域下的配置。跟 Linux 操作系统的环境变量配置类似，Git 在执行命令中会首先查看 local 配置，如果没有找到所需配置会再查看 global 配置，最后再查看 system 配置。</p><p>在使用 <code>git config</code> 命令进行配置的时候，也可以使用 <code>git config --system</code>，<code>git config --global</code>，<code>git config --local</code> 三种不同的选项来修改不同作用域的配置。</p><p>下面介绍一些重要或有用的 Git 配置。</p><h3 id="配置-user-信息"><a href="#配置-user-信息" class="headerlink" title="配置 user 信息"></a>配置 user 信息</h3><p>配置 user 信息在 Git 中是十分重要的一个步骤, username 和 email 不能为空，它们将会被记录在每一条该 user 的 commit 信息中。</p><p>我们可以配置 <code>user.name</code> 和 <code>user.email</code> 的值来配置 user 信息，如清单 6 所示:</p><h5 id="清单-6-配置-user-name-和-user-email"><a href="#清单-6-配置-user-name-和-user-email" class="headerlink" title="清单 6. 配置 user.name 和 user.email"></a>清单 6. 配置 user.name 和 user.email</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`git config --global user.name &quot;caozhi&quot;``git config --global user.email &quot;caozhi0321@gmail.com&quot;`</span><br></pre></td></tr></table></figure><p>也可以将上述命令中的 –global改成 –local来修改只对代码库作用域有效的配置。</p><h3 id="配置命令的别名"><a href="#配置命令的别名" class="headerlink" title="配置命令的别名"></a>配置命令的别名</h3><p>Git 提供了很多有用的命令，我们可以将一些比较常用的命令设置上别名，提高工作效率。例如我们可以将 <code>git log --abbrev-commit</code> 设置一个别名 <code>lg</code>，使得查看 log 时只需要显示 commit id 的短名称，如: <code>git config --global alias.lg &quot;log --abbrev-commit&quot;</code></p><p>设置成功后就可以使用 <code>git lg</code> 来查看 commit 日志。</p><p>当然还可以设置一些其它的别名，如清单 7 所示:</p><h5 id="清单-7-配置-st-和-cm-别"><a href="#清单-7-配置-st-和-cm-别" class="headerlink" title="清单 7. 配置 st 和 cm 别"></a>清单 7. 配置 st 和 cm 别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`git config --global alias.st &quot;status&quot;``git config --global alias.cm &quot;commit&quot;`</span><br></pre></td></tr></table></figure><p>别名可以根据自己的喜好和习惯去设置。将常用的命令设为短别名将大大提高工作效率。</p><h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><p>配置成功后可以使用 <code>git config --global -l</code> 命令查看配置。</p><h3 id="使用-Config-文件进行配置"><a href="#使用-Config-文件进行配置" class="headerlink" title="使用 Config 文件进行配置"></a>使用 Config 文件进行配置</h3><p>除了使用命令之外，也可以直接编辑 config 文件进行相关配置。</p><h2 id="设置-Git-忽略提交规则"><a href="#设置-Git-忽略提交规则" class="headerlink" title="设置 Git 忽略提交规则"></a>设置 Git 忽略提交规则</h2><p>在进行完代码库克隆和简单的配置之后，接下来我们可以根据项目需要配置一些文件忽略规则。跟大多数的代码库管理工具一样，Git 也可以对不需要被代码库所管理的文件或文件类型进行配置，使得提交代码时，这些文件不会被提交到代码库中。Git 是通过忽略清单<code>.gitignore</code> 文件进行配置的。</p><p>通常我们会考虑将如下类型的文件添加到忽略清单中:</p><ul><li>编译过程的中间文件，例如 <code>*.class</code> 文件、<code>*.o</code> 文件、<code>*.obj</code> 文件等。</li><li>外部依赖的包或者工程编译的包，例如 jar 包、lib 包、dll 包或 war 包等。在有的项目实践中，可能会将这类依赖包也放到代码库中进行管理，通常这不是一个很好的策略，因为这样会显著地增加代码库的大小，降低开发者的工作效率。比较合理的方式是通过构建工具的依赖管理功能来管理这些依赖包，例如 Maven、Gradle 等。</li><li>编译过程中，通过某种机制自动生成的代码。某些项目中，可能会使用脚本或者 <code>xsd schema</code> 文件来生成代码；这类代码只需要将用于自动生成的脚本或者 schema 文件管理起来即可。</li><li>项目的配置文件。同一项目组的不同开发者可能有不同的项目配置，或者配置中包含敏感信息，例如账号密码等，这类配置文件也应该放到 ignore 清单里。</li><li>某些 IDE 的工程配置文件，例如 Eclipse 的 <code>setting</code> 和 <code>project</code> 文件、Idea 的<code>.idea</code> 目录等。</li><li>一些自动生成的系统文件，例如 Windows 的 <code>Thumbs.db</code> 或者 MacOS 的<code>.DS_Store</code> 文件等。</li><li>项目或者 IDE 的日志文件。</li></ul><p><code>.gitignore</code> 文件每行表示一个匹配模式（<code>#</code> 开头的行或者空行除外，<code>#</code> 用于注释）。它使用 glob 模式来进行匹配，glob 模式是一种简化的正则表达式，常用于来进行路径的模式匹配。我们可以在代码库的根目录或者任意子目录添加<code>.gitignore</code> 文件，特定目录下的<code>.gitignore</code> 文件使得忽略规则只在该目录及其子目录下有效。表 1 列出了常用的一些匹配模式的写法：</p><h5 id="表-1-常用匹配模式"><a href="#表-1-常用匹配模式" class="headerlink" title="表 1. 常用匹配模式"></a>表 1. 常用匹配模式</h5><table><thead><tr><th><strong>模式</strong></th><th><strong>含义</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>完整路径</td><td>忽略完整路径所定义的文件</td><td><code>dev/dev.conf</code></td></tr><tr><td>/path</td><td>以 / 开头，只匹配当前目录下路径为 path 的文件</td><td><code>/a.java /a.cpp</code></td></tr><tr><td>path</td><td>不以 / 开头，匹配当前目录及其子目录下所有文件</td><td><code>*.o web.xml</code></td></tr><tr><td>path/</td><td>以 / 结尾，用以只匹配目录；path 目录及其子目录和文件会被忽略；如果 path 是个文件，则不会被忽略</td><td><code>.settings/</code></td></tr><tr><td>带 * 号的模式</td><td>置于文件中，用于匹配所有满足规则的文件</td><td><code>*.zip *.jar</code></td></tr><tr><td>带 ** 的模式</td><td>置于路径中，用于匹配满足 ** 前后的所有路径</td><td><code>Dev/**/dev.conf**/*.jar</code></td></tr><tr><td>!path</td><td>在 ignore 文件中如果前面已经定义了某个模式，但是又有一些特殊文件我们不想被忽略，我们可以用 ! 来匹配</td><td><code>*.jar ##</code> 忽略所有 jar 包 <code>!server.jar ##</code>希望 <code>server.jar</code>仍被跟踪</td></tr></tbody></table><p>注意：</p><ul><li><p>当某个文件已经被提交到代码库中被 Git 所管理起来之后，将该文件再添加进 <code>.gitignore</code> 文件是无效的，对该文件进行修改时，执行 <code>git status</code> 操作之后仍然会提示该文件已被修改。针对已经提交代码库的文件我们又想忽略其修改的场景，将会在本系列第四篇文章中介绍。</p></li><li><p>每个目录下都可以放单独的 <code>.gitignore</code> 文件以控制子目录的忽略规则。</p></li><li><p>即使已经在忽略列表里，当我们确实想要提交一些符合忽略规则的文件时，仍可以使用 <code>git -f add</code> 加具体的文件路径的方式将这些文件提交到库中。</p></li></ul><ul><li>GitHub 有一个十分详细的针对数十种项目及语言的 <code>.gitignore</code> 文件列表模板，可以在 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 找到它。</li></ul><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>为使用 Git 和 GitHub 进行日常开发做准备，本文详细通过一些列演示向读者讲解了如何采用 SSH 和 HTTPS 两种方式从 GitHub 克隆代码库，如何进行本地 Git 开发环境的基础配置，如何配置 <code>.gitignore</code> 文件等。相信您在阅读完本文之后将有能力自己初始化一套本地的 Git 环境。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在本系列的&lt;a href=&quot;https://www.ibm.com/developerworks/cn/opensource/os-cn-g
      
    
    </summary>
    
      <category term="DevOps" scheme="http://blog.ozairs.com/categories/DevOps/"/>
    
    
      <category term="git" scheme="http://blog.ozairs.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Azure上的Terraform文档</title>
    <link href="http://blog.ozairs.com/DevOps/Azure%E4%B8%8A%E7%9A%84Terraform%E6%96%87%E6%A1%A3/"/>
    <id>http://blog.ozairs.com/DevOps/Azure上的Terraform文档/</id>
    <published>2019-03-13T03:48:43.000Z</published>
    <updated>2019-03-13T03:53:37.553Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Terraform 在 Azure 上可靠地版本化和创建基础结构。 使用我们的快速入门和教程了解如何创建资源、使用 Azure Terraform 模块和维护包含代码的基础结构。</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>配置 Terraform 并使用它在 Azure 中创建 Linux VM。</p><p><a href="https://docs.microsoft.com/azure/virtual-machines/linux/terraform-install-configure" target="_blank" rel="noopener"><img src="https://docs.microsoft.com/azure/media/index/azure_dev-9.svg" alt="img">安装和配置 Terraform</a></p><p><a href="https://docs.microsoft.com/azure/virtual-machines/linux/terraform-create-complete-vm" target="_blank" rel="noopener"><img src="https://docs.microsoft.com/azure/media/index/VirtualMachine.svg" alt="img">创建 Linux VM</a></p><h2 id="分步教程"><a href="#分步教程" class="headerlink" title="分步教程"></a>分步教程</h2><p>了解如何通过 Terraform 从代码创建 Azure 计算和网络基础结构。</p><ul><li><a href="https://docs.microsoft.com/zh-cn/azure/terraform/terraform-create-k8s-cluster-with-tf-and-aks" target="_blank" rel="noopener">使用 AKS 创建 Kubernetes 群集</a>。</li><li><a href="https://docs.microsoft.com/zh-cn/azure/terraform/terraform-create-k8s-cluster-with-aks-applicationgateway-ingress" target="_blank" rel="noopener">将 AKS 与作为入口控制器的应用程序网关配合使用来创建 Kubernetes 群集</a>。</li><li><a href="https://docs.microsoft.com/zh-cn/azure/terraform/terraform-vm-msi" target="_blank" rel="noopener">使用 Azure 市场映像创建启用了 MSI 身份验证的 Terraform VM</a>。</li><li><a href="https://docs.microsoft.com/zh-cn/azure/terraform/terraform-create-vm-cluster-module" target="_blank" rel="noopener">使用 Azure Terraform 模块创建负载均衡的 VM 群集</a>。</li><li><a href="https://docs.microsoft.com/zh-cn/azure/terraform/terraform-create-vm-cluster-with-infrastructure" target="_blank" rel="noopener">在 Azure Cloud Shell 中创建负载均衡的 VM 群集</a>。</li><li><a href="https://docs.microsoft.com/zh-cn/azure/terraform/terraform-create-vm-scaleset-network-disks-hcl" target="_blank" rel="noopener">为 VM 规模集配置网络和存储</a></li><li><a href="https://docs.microsoft.com/zh-cn/azure/terraform/terraform-create-vm-scaleset-network-disks-using-packer-hcl" target="_blank" rel="noopener">从 Packer 自定义映像预配 VM 规模集</a></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>常见部署任务的示例配置模板。</p><ul><li><a href="https://github.com/terraform-providers/terraform-provider-azurerm/tree/master/examples" target="_blank" rel="noopener">GitHub</a></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><h3 id="Azure-Terraform-模块"><a href="#Azure-Terraform-模块" class="headerlink" title="Azure Terraform 模块"></a>Azure Terraform 模块</h3><p><a href="https://registry.terraform.io/modules/Azure/database/azurerm" target="_blank" rel="noopener">用于数据库的 Azure RM</a></p><p><a href="https://registry.terraform.io/modules/Azure/loadbalancer" target="_blank" rel="noopener">用于负载均衡器的 Azure RM</a></p><p><a href="https://registry.terraform.io/modules/Azure/computegroup" target="_blank" rel="noopener">Azure RM 计算组</a></p><p><a href="https://registry.terraform.io/modules/Azure/network" target="_blank" rel="noopener">Azure RM 网络</a></p><p><a href="https://registry.terraform.io/modules/Azure/compute" target="_blank" rel="noopener">Azure RM 计算</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 Terraform 在 Azure 上可靠地版本化和创建基础结构。 使用我们的快速入门和教程了解如何创建资源、使用 Azure Terraform 模块和维护包含代码的基础结构。&lt;/p&gt;
&lt;h2 id=&quot;快速入门&quot;&gt;&lt;a href=&quot;#快速入门&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="DevOps" scheme="http://blog.ozairs.com/categories/DevOps/"/>
    
    
      <category term="Terraform" scheme="http://blog.ozairs.com/tags/Terraform/"/>
    
  </entry>
  
  <entry>
    <title>通过混沌式创新建立和增强应用程序价值</title>
    <link href="http://blog.ozairs.com/%E8%AF%84%E8%AE%BA/%E9%80%9A%E8%BF%87%E6%B7%B7%E6%B2%8C%E5%BC%8F%E5%88%9B%E6%96%B0%E5%BB%BA%E7%AB%8B%E5%92%8C%E5%A2%9E%E5%BC%BA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%BB%B7%E5%80%BC/"/>
    <id>http://blog.ozairs.com/评论/通过混沌式创新建立和增强应用程序价值/</id>
    <published>2019-03-12T21:43:19.000Z</published>
    <updated>2019-03-13T11:34:06.083Z</updated>
    
    <content type="html"><![CDATA[<p>应用程序现在是数字业务开发和交付其产品和服务的主要工具。此外，今天最知名的数字巨头（Facebook或Lyft）的估值飙升可归因于这些公司的应用程序组合。</p><p>简而言之，应用程序及其操作的数据是现代数字经济的货币。对于越来越多的公司来说，它们是一种资产负债表上的资产，这种资产可以带来巨大的价值创造。但也是一种可以被利用并带来可怕的价值破坏的资产。公司市值的单日跌幅最大 Facebook在2018年7月底的120亿美元下跌，占市值的19％ ，发生在该公司告诉投资者在剑桥分析公司丑闻导致用户增长放缓之后来自87m Facebook数据的数据被用来使外国势力干涉2016年美国总统选举。</p><p>虽然Facebook是数字原生的极端例子，但即使对于有抱负的数字公司来说，这一教训仍然适用。有效管理这个有价值但易受攻击的资源，一个组织的应用程序组合，必须超越IT的范围，扩展到整个C-Suite。随着应用程序的提升不仅仅是公司<em>如何</em>开展业务并越来越成为业务本身的基本要素，企业IT的角色也必须发展。在应用经济中，企业IT有两个必要条件：1）拥抱和实现混沌创新; 2）最大限度地降低企业风险。</p><h3 id="混乱的创新？"><a href="#混乱的创新？" class="headerlink" title="混乱的创新？"></a><strong>混乱的创新？</strong></h3><p>混乱长期以来被用作公司释放创新的工具。一些例子：</p><ul><li>英特尔的安迪格罗夫曾经告诉人们，他们需要“让混沌统治，然后再陷入混乱”。这种方法在组织内部创造了一种文化，使混乱得以蓬勃发展，允许人们在正常模式之外思考，花时间进行实验，并提出真正伟大的想法。</li><li>谷歌创始人拉里佩奇和谢尔盖布林在他们2004年的首次公开招股信中强调了混沌创新需求背后的想法。这封信清楚地表明，“除了他们的常规项目之外，我们还鼓励我们的员工将20％的时间花在他们认为最有利于Google的事情上。” 这种方法带来了许多创新，包括AdSense，Gmail以及其他一些结构良好和大写的创意。</li></ul><p>作为一名前管理顾问，我经常被问到这种思维方式是否适用于不仅仅是技术公司。MTV 最近调查了千禧一代的工作习惯，发现78％的人认为有一个“其他兴趣爱好可能很重要成为一个不同的职业。众所周知，各种类型的公司都明确容忍边工作边创业。</p><p>这些对混乱友好的公司了解这种开放性的好处。事实上，许多初创企业都是由在其他地方工作的同时创办公司的创始人孵化出来的，然后退出全职追求他们的激情。根据塔克商学院教授克里斯特里布尔（Chris Trimble）的说法，这些类型的政策让员工体验到了自由以及无法完全接受它的挫折：<strong>最好的混乱创新</strong>！</p><p>对于当前和有抱负的数字业务，当应用程序开发人员可以自由地构建和部署新应用程序而不受可用性，稳定性，安全性或合规性问题的影响时，混乱的创新会蓬勃发展。开发人员供不应求。作为应用经济中最稀缺的资源，开发商浪费的每一秒都会影响公司的价值创造率。认真建立和增强应用资本的公司非常需要能够节省开发人员时间，减少不必要的复杂性和专业知识的解决方案，并使他们专注于快速部署他们关心的代码，并且业务价值最高。</p><h3 id="F5如何帮助"><a href="#F5如何帮助" class="headerlink" title="F5如何帮助"></a><strong>F5如何帮助</strong></h3><p>F5是多云应用服务的领导者。我们的多云应用程序服务以多种方式增强和保护您的应用程序价值。以下是一些：</p><ul><li>改善应用程序的性能和最终用户体验 - 简而言之，我们世界一流的应用程序服务使您的应用程序更快。</li><li>通过提供现成的一流应用服务，提高开发人员的工作效率; 通过与CI / CD工具链的集成以及强大的自动化和编排解决方案; 通过简化政策附件和自助服务工具的工作流程; 并通过为应用程序本身提供可操作的见解。</li><li>改善您的企业安全/风险态势 - 提供易于连接的安全服务; 跨应用程序的一致策略管理，无论他们身在何处; 整个应用程序组合中的可视性和可视性。</li></ul><p>为何选择F5？为什么不是其他应用服务提供商 我们的价值主张很简单：</p><ul><li>F5拥有业内最广泛，最深入的应用服务组合</li><li>F5为任何供应商提供最灵活的消费和多云部署选项</li><li>F5通过世界一流的客户支持组织为其提供支持</li></ul><p>当F5成为企业级基础架构的核心部分时，它为业务提供了一定程度的保证，即其应用程序组合仍然可用，可靠且安全。</p><h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a><strong>概括</strong></h3><p>为了在数字经济中生存，每家公司都必须增强和保护他们的应用资本。该解决方案是一套一致的应用程序服务，可以应用于任何地方的任何应用程序。F5业界领先的多云应用服务可提高应用程序的性能和最终用户体验，提高开发人员的工作效率，并改善企业安全/风险状况。F5是增强和保护您的应用程序资本的最佳合作伙伴。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;应用程序现在是数字业务开发和交付其产品和服务的主要工具。此外，今天最知名的数字巨头（Facebook或Lyft）的估值飙升可归因于这些公司的应用程序组合。&lt;/p&gt;
&lt;p&gt;简而言之，应用程序及其操作的数据是现代数字经济的货币。对于越来越多的公司来说，它们是一种资产负债表上的资
      
    
    </summary>
    
      <category term="评论" scheme="http://blog.ozairs.com/categories/%E8%AF%84%E8%AE%BA/"/>
    
    
      <category term="F5" scheme="http://blog.ozairs.com/tags/F5/"/>
    
  </entry>
  
  <entry>
    <title>Ansible入门教程</title>
    <link href="http://blog.ozairs.com/DevOps/Ansible%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.ozairs.com/DevOps/Ansible入门教程/</id>
    <published>2019-03-12T10:44:39.000Z</published>
    <updated>2019-03-12T10:53:35.723Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/DevOps/Ansible入门教程/1.png" alt=""></p><p>关于Ansible的一个好处是，将bash脚本转换为可执行任务是非常容易的。我们可以编写自己的配置程序，但是Ansible更加干净，因为它可以自动在执行任务之前获取上下文。ansible任务是幂等的，没有大量额外的编码，ansible可以一次又一次地安全运，而bash命令这种幂等性。 </p><iframe allowtransparency="true" title="Wistia video player" allowfullscreen frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" src="https://fast.wistia.net/embed/iframe/qrqfj371b6" width="400" height="225"></iframe><p>Ansible使用“facts”来确保任务的幂等安全运行， 它是在运行任务之前收集的系统和环境信息。ansible使用这些facts来检查状态，看看是否需要改变某些东西以获得所需的结果。这使得ansible可以让服务器一次又一次地运行可复制的任务。</p><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><p>当然我们需要先安装Ansible。任务可以从任何可安装的机器上运行。</p><h3 id="1-1-Ubuntu"><a href="#1-1-Ubuntu" class="headerlink" title="1.1 Ubuntu"></a>1.1 Ubuntu</h3><p>在Ubuntu 16.04上安装Ansible的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y ansible1</span><br></pre></td></tr></table></figure><p>apt-get安装的ansible版本很低，建议使用pip方式安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install ansible1</span><br></pre></td></tr></table></figure><h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h1><p>ansible的默认配置文件路径为 /etc/ansible，然而，一个常见的用途是将其安装在一个virtualenv中，在这种情况下，我们一般不会使用这些默认文件。我们可以根据需要在本地目录中创建配置文件。</p><h2 id="2-1-管理服务器：Inventory文件"><a href="#2-1-管理服务器：Inventory文件" class="headerlink" title="2.1 管理服务器：Inventory文件"></a>2.1 管理服务器：Inventory文件</h2><p>您可以创建一个inventory文件，用于定义将要管理的服务器。这个文件可以命名为任何名字，但我们通常会命名为hosts或者项目的名称。<br>在hosts文件中，我们可以定义一些要管理的服务器。这里我们将定义我们可能要在“web”标签下管理的两个服务器。标签是任意的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[web]</span><br><span class="line">192.168.22.10</span><br><span class="line">192.168.22.11123</span><br></pre></td></tr></table></figure><p>现在已经够好了，如果需要，我们可以定义主机范围，多个组，可重用变量，并使用其他花哨的设置，包括创建动态的inventory。<br>当我们在本地机器运行ansible时，我们不需要关心inventory文件中的内容，我将告诉您在本地和远程服务器上运行ansible。现在，让我们将hosts文件设置为指向本地主机local和remote虚拟远程主机。<br>hosts文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[local]</span><br><span class="line">127.0.0.1</span><br><span class="line"></span><br><span class="line">[remote]</span><br><span class="line">192.168.1.212345</span><br></pre></td></tr></table></figure><p>与本地主机和远程服务器连接的命令。</p><h2 id="2-2-基础：运行命令"><a href="#2-2-基础：运行命令" class="headerlink" title="2.2 基础：运行命令"></a>2.2 基础：运行命令</h2><p>我们开始对服务器运行任务。ansible会假定你的服务器具有SSH访问权限，通常基于SSH-Key。因为Ansible使用SSH，所以它需要能够SSH连接到服务器。但是，ansible将尝试以正在运行的当前用户身份进行连接。如果我正在运行ansible的用户是ubuntu，它将尝试以ubuntu连接其他服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Run against localhost</span><br><span class="line">$ ansible -i ./hosts --connection=local local -m ping</span><br><span class="line"></span><br><span class="line"># Run against remote server</span><br><span class="line">$ ansible -i ./hosts remote -m ping</span><br><span class="line">127.0.0.1 | success &gt;&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;123456789</span><br></pre></td></tr></table></figure><p>如果你是在cygwin下运行，遇到了“Failed to connect to the host via ssh: mux_client_request_session: read from master failed”的错误，可以执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i ./hosts remote -v -m ping -u root --private-key=~/.ssh/id_rsa1</span><br></pre></td></tr></table></figure><p>使用–connection=local告诉ansible不尝试通过SSH运行命令，因为我们只是影响本地主机。但是，我们仍然需要一个hosts文件，告诉我们连接到哪里。<br>在任何情况下，我们可以看到从ansible得到的输出是一些JSON，它告诉我们Task（我们对ping模块的调用）是否进行了任何更改和结果。</p><p>命令说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-i ./hosts - 设置库存文件，命名为 hosts</span><br><span class="line">remote，local，all-使用这个标签的下定义的服务器hosts清单文件。“all”是针对文件中定义的每个服务器运行的特殊关键字</span><br><span class="line">-m ping- 使用“ping”模块，它只是运行ping命令并返回结果</span><br><span class="line">-c local| --connection=local - 在本地服务器上运行命令，而不是SSH</span><br><span class="line"></span><br><span class="line">一些常用命令：</span><br><span class="line">-i PATH --inventory=PATH 指定host文件的路径，默认是在/etc/ansible/hosts</span><br><span class="line">--private-key=PRIVATE_KEY_FILE_PATH 使用指定路径的秘钥建立认证连接</span><br><span class="line">-m DIRECTORY --module-path=DIRECTORY 指定module的目录来加载module，默认是/usr/share/ansible</span><br><span class="line">-c CONNECTION --connection=CONNECTION 指定建立连接的类型，一般有ssh ，local12345678910</span><br></pre></td></tr></table></figure><h3 id="2-2-1-模块（Modules）"><a href="#2-2-1-模块（Modules）" class="headerlink" title="2.2.1 模块（Modules）"></a>2.2.1 模块（Modules）</h3><p>ansible使用“模块”来完成大部分的任务。模块可以做安装软件，复制文件，使用模板等等。</p><h4 id="模块是使用Ansible-的方法"><a href="#模块是使用Ansible-的方法" class="headerlink" title="模块是使用Ansible 的方法"></a>模块是使用Ansible 的方法</h4><p>因为它们可以使用可用的上下文（“Facts”），以便确定要完成任务需要做什么操作。<br>如果我们没有模块，我们将运行任意的shell命令，我们也可以使用bash脚本。这是一个任意shell命令看起来像在Ansible（它使用的shell模块！）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Run against a local server</span><br><span class="line">ansible -i ./hosts local --connection=local -b --become-user=root \</span><br><span class="line">    -m shell -a &apos;apt-get install nginx&apos;</span><br><span class="line"></span><br><span class="line"># Run against a remote server</span><br><span class="line">ansible -i ./hosts remote -b --become-user=root all \</span><br><span class="line">    -m shell -a &apos;apt-get install nginx&apos;1234567</span><br></pre></td></tr></table></figure><p>这里，sudo apt-get install nginx命令将使用“shell”模块运行。<br>命令说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-b - “成为”，在运行命令时告诉可以成为另一个用户。</span><br><span class="line">--become-user=root - 以用户“root”运行以下命令（例如，使用命令使用“sudo”）。我们可以在此定义任何现有的用户。</span><br><span class="line">-a 用于将任何参数传递给定义的模块 -m123</span><br></pre></td></tr></table></figure><p>但是这并不是特别强大。尽管能够一次在所有服务器上运行这些命令，但是我们仍然只能完成任何bash脚本可能执行的操作。如果我们使用了更合适的模块，我们可以运行命令来保证结果。可靠的模块确保我们可以一次又一次地运行相同的任务，而不会影响最终结果。<br>要在Debian / Ubuntu服务器上安装软件，“apt”模块将运行相同的命令，但确保幂等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Run against a local server</span><br><span class="line">ansible -i ./hosts local --connection=local -b --become-user=root \</span><br><span class="line">    -m apt -a &apos;name=nginx state=installed update_cache=true&apos;</span><br><span class="line"></span><br><span class="line">127.0.0.1 | success &gt;&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Run against a remote server</span><br><span class="line">ansible -i ./hosts remote -b --become-user=root \</span><br><span class="line">    -m apt -a &apos;name=nginx state=installed update_cache=true&apos;</span><br><span class="line"></span><br><span class="line">127.0.0.1 | success &gt;&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or：</span><br><span class="line">ansible -i ./hosts remote -v -m apt -a &apos;name=nginx state=installed update_cache=true&apos; -u test -s -K --private-key=~/.ssh/id_rsa</span><br><span class="line">12345678910111213141516171819</span><br></pre></td></tr></table></figure><p>这将使用apt模块来更新存储库缓存并安装Nginx（如果没有安装）。<br>运行任务的结果是”changed”: false。这表明没有变化; 我已经使用该shell模块安装了Nginx 。好的是，我可以一遍又一遍地运行这个命令，而不用担心它会改变预期的结果 - Nginx已经安装，Ansible知道，并且不尝试重新安装它。<br>命令说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-i ./hosts - 设置inventory文件，命名为 hosts</span><br><span class="line">-b - “成”，告诉可以成为另一个用户来运行命令</span><br><span class="line">--become-user=root - 以用户“root”运行以下命令（例如，使用“sudo”命令）</span><br><span class="line">local| remote - 从库存文件中的本地或远程定义的主机上运行</span><br><span class="line">-m apt- 使用apt模块</span><br><span class="line">-a &apos;name=nginx state=installed update_cache=true&apos; - 提供apt模块的参数，包括软件包名称，所需的结束状态以及是否更新软件包存储库缓存</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line">-u USERNAME --user=USERNAME 指定移动端的执行用户</span><br><span class="line">-U SUDO_USERNAME --sudo-user=USERNAME</span><br><span class="line">-s --sudo -u指定用户的时候，使用sudo获得root权限</span><br><span class="line">-k --ask-pass  提示输入ssh的密码，而不是使用基于ssh的密钥认证</span><br><span class="line">-K --ask-sudo-pass 提示输入sudo密码，与--sudo一起使用12345678910111213</span><br></pre></td></tr></table></figure><p>我们可以通过这种特殊方式运行我们所需要的所有任务（通过模块），但是让我们来做这个更具管理性。我们将把这个任务移动到一个Playbook中，它可以运行和协调多个Tasks。</p><h2 id="2-3-剧本（Playbooks）"><a href="#2-3-剧本（Playbooks）" class="headerlink" title="2.3 剧本（Playbooks）"></a>2.3 剧本（Playbooks）</h2><p>Playbook可以运行多个任务，并提供一些更高级的功能。让我们将上述任务移到一本剧本中。在ansible中剧本（playbooks）和角色（roles）都使用Yaml文件定义。<br>创建文件nginx.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"># hosts could have been &quot;remote&quot; or &quot;all&quot; as well</span><br><span class="line">- hosts: local</span><br><span class="line">  connection: local</span><br><span class="line">  become: yes</span><br><span class="line">  become_user: root</span><br><span class="line">  tasks:</span><br><span class="line">   - name: Install Nginx</span><br><span class="line">     apt:</span><br><span class="line">       name: nginx</span><br><span class="line">       state: installed</span><br><span class="line">       update_cache: true123456789101112</span><br></pre></td></tr></table></figure><p>此任务与我们的ad-hoc命令完全相同，包括设置本地连接的使用。<br>这将使用inventory文件中[local]标签下的服务器hosts。<br>如果我们没有使用本地连接，我们会这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: remote</span><br><span class="line">  become: yes</span><br><span class="line">  become_user: root</span><br><span class="line">  tasks:</span><br><span class="line">   - name: Install Nginx</span><br><span class="line">     apt:</span><br><span class="line">       name: nginx</span><br><span class="line">       state: installed</span><br><span class="line">       update_cache: true12345678910</span><br></pre></td></tr></table></figure><p>这将使用inventory文件中[remote]标签下的服务器hosts。</p><p>在我们的Tasks文件中使用become并become_user再次使用Ansible来sudo以root用户身份运行命令，然后传递Playbook文件。</p><p>使用一个yaml playbook文件，我们需要使用这个ansible-playbook命令，现在就更容易运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -i ./hosts nginx.yml</span><br><span class="line"></span><br><span class="line">PLAY [local] ******************************************************************</span><br><span class="line"></span><br><span class="line">GATHERING FACTS ***************************************************************</span><br><span class="line">ok: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">TASK: [Install Nginx] *********************************************************</span><br><span class="line">ok: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ********************************************************************</span><br><span class="line">127.0.0.1                  : ok=2    changed=0    unreachable=0    failed=0123456789101112</span><br></pre></td></tr></table></figure><p>我们在运行过程中获得了一些有用的反馈，包括“可执行任务”运行及其结果。在这里我们看到所有运行都OK，但没有改变。我已经安装了Nginx</p><h3 id="2-3-1-处理程序（Handlers）"><a href="#2-3-1-处理程序（Handlers）" class="headerlink" title="2.3.1 处理程序（Handlers）"></a>2.3.1 处理程序（Handlers）</h3><p>处理程序与任务完全相同（它可以做task可以做的任何事），但只有当另一个任务调用它时才会运行。您可以将其视为事件系统的一部分; 处理程序将通过其侦听的事件调用进行操作。<br>这对于运行任务后可能需要的“辅助”操作非常有用，例如在配置更改后安装或重新加载服务后启动新服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"># Example shows using the local machine still</span><br><span class="line"># Remove &apos;connection&apos; and set hosts to &apos;remote&apos; for a remote connection</span><br><span class="line">- hosts: local</span><br><span class="line">  connection: local</span><br><span class="line">  become: yes</span><br><span class="line">  become_user: root</span><br><span class="line">  tasks:</span><br><span class="line">   - name: Install Nginx</span><br><span class="line">     apt:</span><br><span class="line">       name: nginx</span><br><span class="line">       state: installed</span><br><span class="line">       update_cache: true</span><br><span class="line">     notify:</span><br><span class="line">      - Start Nginx</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">   - name: Start Nginx</span><br><span class="line">     service:</span><br><span class="line">       name: nginx</span><br><span class="line">       state: started123456789101112131415161718192021</span><br></pre></td></tr></table></figure><p>这里我们添加一个notify指令到安装任务。这将在任务运行后通知名为“Start Nginx”的处理程序。</p><p>然后我们可以创建名为“Start Nginx”的处理程序。此处理程序是通知“Start Nginx”时调用的任务。<br>这个特定的处理程序使用服务模块，它可以启动，停止，重启，重新加载（等等）系统服务。在这种情况下，我们告诉Ansible，我们要启动Nginx。<br>让我们再次运行这本Playbook：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook -i ./hosts nginx.yml</span><br><span class="line"></span><br><span class="line">PLAY [local] ******************************************************************</span><br><span class="line"></span><br><span class="line">GATHERING FACTS ***************************************************************</span><br><span class="line">ok: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">TASK: [Install Nginx] *********************************************************</span><br><span class="line">ok: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">NOTIFIED: [nginx | Start Nginx] ***********************************************</span><br><span class="line">ok: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ********************************************************************</span><br><span class="line">127.0.0.1                  : ok=2    changed=0    unreachable=0    failed=0123456789101112131415</span><br></pre></td></tr></table></figure><p>我们得到类似的输出，但是这次Handler是运行的。<br>通知程序只在运行任务时运行。</p><h5 id="Note：如果我已经安装了Nginx，则安装Nginx任务将不会运行，通知程序也将不会被调用。"><a href="#Note：如果我已经安装了Nginx，则安装Nginx任务将不会运行，通知程序也将不会被调用。" class="headerlink" title="Note：如果我已经安装了Nginx，则安装Nginx任务将不会运行，通知程序也将不会被调用。"></a>Note：如果我已经安装了Nginx，则安装Nginx任务将不会运行，通知程序也将不会被调用。</h5><p>我们可以使用Playbook来运行多个任务，添加变量，定义其他设置，甚至包括其他的剧本。</p><h3 id="2-3-2-更多的任务（More-Tasks）"><a href="#2-3-2-更多的任务（More-Tasks）" class="headerlink" title="2.3.2 更多的任务（More Tasks）"></a>2.3.2 更多的任务（More Tasks）</h3><p>接下来，我们可以为此Playbook添加更多的任务，并探索其他一些功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"># Example shows using the local machine still</span><br><span class="line"># Remove &apos;connection&apos; and set hosts to &apos;remote&apos; for a remote connection</span><br><span class="line">- hosts: local</span><br><span class="line">  connection: local</span><br><span class="line">  become: yes</span><br><span class="line">  become_user: root</span><br><span class="line">  vars:</span><br><span class="line">   - docroot: /var/www/serversforhackers.com/public</span><br><span class="line">  tasks:</span><br><span class="line">   - name: Add Nginx Repository</span><br><span class="line">     apt_repository:</span><br><span class="line">       repo: ppa:nginx/stable</span><br><span class="line">       state: present</span><br><span class="line">     register: ppastable</span><br><span class="line"></span><br><span class="line">   - name: Install Nginx</span><br><span class="line">     apt:</span><br><span class="line">       pkg: nginx</span><br><span class="line">       state: installed</span><br><span class="line">       update_cache: true</span><br><span class="line">     when: ppastable|success</span><br><span class="line">     notify:</span><br><span class="line">      - Start Nginx</span><br><span class="line"></span><br><span class="line">   - name: Create Web Root</span><br><span class="line">     file:</span><br><span class="line">      path: &apos;&#123;&#123; docroot &#125;&#125;&apos;</span><br><span class="line">      mode: 775</span><br><span class="line">      state: directory</span><br><span class="line">      owner: www-data</span><br><span class="line">      group: www-data</span><br><span class="line">     notify:</span><br><span class="line">      - Reload Nginx</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">   - name: Start Nginx</span><br><span class="line">     service:</span><br><span class="line">       name: nginx</span><br><span class="line">       state: started</span><br><span class="line"></span><br><span class="line">    - name: Reload Nginx</span><br><span class="line">      service:</span><br><span class="line">        name: nginx</span><br><span class="line">        state: reloaded123456789101112131415161718192021222324252627282930313233343536373839404142434445</span><br></pre></td></tr></table></figure><p>现在有三个任务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Add Nginx Repository- 使用apt_repository模块添加Nginx稳定PPA以获取最新的稳定版本的Nginx 。</span><br><span class="line">Install Nginx - 使用Apt模块安装Nginx。</span><br><span class="line">Create Web Root - 最后创建一个Web根目录。123</span><br></pre></td></tr></table></figure><p>新的register和when指令，可以实现在某些事情发生后让ansible执行任务的功能。</p><h5 id="Note-您还可以注册模块操作的结果，并使用定义的变量根据注册（register）的变量值有条件（when）地执行操作。例如，注册通过shell模块运行命令的结果可以让您访问该命令的stdout。"><a href="#Note-您还可以注册模块操作的结果，并使用定义的变量根据注册（register）的变量值有条件（when）地执行操作。例如，注册通过shell模块运行命令的结果可以让您访问该命令的stdout。" class="headerlink" title="Note: 您还可以注册模块操作的结果，并使用定义的变量根据注册（register）的变量值有条件（when）地执行操作。例如，注册通过shell模块运行命令的结果可以让您访问该命令的stdout。"></a>Note: 您还可以注册模块操作的结果，并使用定义的变量根据注册（register）的变量值有条件（when）地执行操作。例如，注册通过shell模块运行命令的结果可以让您访问该命令的stdout。</h5><p>同时还使用了一个变量。docroot变量在定义vars部分。然后将其用作创建定义目录的文件模块的目标参数。</p><p>需要注意的是，path配置使用括号NaN，这是Jinja2的模板。为了使Ansible能够在括号内解析Jinja2模板变量，该行必须是单引号或双引号 - 例如，path: ‘’而不是path: 。不使用引号将导致错误。<br>这个playbook可以用通常的命令运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i ./hosts nginx.yml1</span><br></pre></td></tr></table></figure><p>所以，我们已经运行了一些ad-hoc命令，使用了可复制的模块，并将一些相关任务组织到一个手册中。</p><p>接下来，我们将通过将Playbook组织成一个角色进一步获得可靠性，这有助于我们组织相关项目，如文件和模板，同时还帮助我们组织更复杂的相关任务和操作。</p><h2 id="2-4-角色（roles）"><a href="#2-4-角色（roles）" class="headerlink" title="2.4 角色（roles）"></a>2.4 角色（roles）</h2><p>角色很适合组织多个相关任务并封装完成这些任务所需的数据。例如，安装Nginx可能涉及添加软件包存储库，安装软件包和设置配置。<br>此外，真实的配置通常需要额外的数据，如变量，文件，动态模板等等。这些工具可以与Playbook一起使用，但是我们可以通过将相关任务和数据组织成一个角色（role， 相关的结构）很快就能做得更好。<br>角色有一个这样的目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">roles</span><br><span class="line">  rolename</span><br><span class="line">   - files</span><br><span class="line">   - handlers</span><br><span class="line">   - meta</span><br><span class="line">   - templates</span><br><span class="line">   - tasks</span><br><span class="line">   - vars12345678</span><br></pre></td></tr></table></figure><p>在每个子目录中（eg： files，handlers等等），Ansible将自动搜索并读取叫做main.yml的yaml文件。<br>接下来我们将分解nginx.yml文件内容为不同的组件，并将每个组件放在相应的目录中，以创建一个更干净，更完整的配置工具集。</p><h3 id="2-4-1-创建角色（Creating-a-Role）"><a href="#2-4-1-创建角色（Creating-a-Role）" class="headerlink" title="2.4.1 创建角色（Creating a Role）"></a>2.4.1 创建角色（Creating a Role）</h3><p>我们可以使用ansible-galaxy命令来创建一个新角色。此工具可用于将角色保存到Ansible的公共注册表，但是我通常只是使用它来在本地创建role的基础目录结构。</p><p>我们来看看如何设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Head to our previously created directory</span><br><span class="line">cd ~/ansible-example</span><br><span class="line"></span><br><span class="line"># In case we left our virtualenv at some point </span><br><span class="line">source .venv/bin/activate</span><br><span class="line"></span><br><span class="line"># Create a roles directory</span><br><span class="line">mkdir roles</span><br><span class="line">cd roles</span><br><span class="line"></span><br><span class="line"># Bootstrap a new role named &quot;nginx&quot;</span><br><span class="line">ansible-galaxy init nginx123456789101112</span><br></pre></td></tr></table></figure><p>目录名称roles是一种惯例，在运行一个playbook时可以用来查找角色。该目录应该始终被命名roles，但并不强制。在roles目录中运行 ansible-galaxy init nginx 命令将创建新角色所需的目录和文件。</p><p>我们来看看我们新建的nginx角色的每个部分~/ansible-example/roles/nginx。</p><h3 id="2-4-2-文件（files）"><a href="#2-4-2-文件（files）" class="headerlink" title="2.4.2 文件（files）"></a>2.4.2 文件（files）</h3><p>首先，在files目录中，我们可以添加我们要复制到我们的服务器中的文件。对于nginx，我经常复制H5BP的Nginx组件配置。我只需从Github下载最新的信息，进行一些调整，并将它们放入files目录中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~/ansible-example</span><br><span class="line"> - roles</span><br><span class="line"> - - nginx</span><br><span class="line"> - - - files</span><br><span class="line"> - - - - h5bp12345</span><br></pre></td></tr></table></figure><p>我们稍后会看到，H5BP配置文件将通过复制模块添加到服务器。</p><h3 id="2-4-3-处理程序（handlers）"><a href="#2-4-3-处理程序（handlers）" class="headerlink" title="2.4.3 处理程序（handlers）"></a>2.4.3 处理程序（handlers）</h3><p>我们可以把曾经在nginx.yml 剧本中的定义的所有处理程序放入到handlers目录中。约定必须包含main.yml文件。</p><p>handlers/main.yml 内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Start Nginx</span><br><span class="line">  service:</span><br><span class="line">    name: nginx</span><br><span class="line">    state: started</span><br><span class="line"></span><br><span class="line">- name: Reload Nginx</span><br><span class="line">  service:</span><br><span class="line">    name: nginx</span><br><span class="line">    state: reloaded12345678910</span><br></pre></td></tr></table></figure><p>一旦handlers/main.yml中的处理程序定义好了，我们可以自由地从其他的yaml配置中引用它们。</p><h3 id="2-4-4-元（meta）"><a href="#2-4-4-元（meta）" class="headerlink" title="2.4.4 元（meta）"></a>2.4.4 元（meta）</h3><p>meta目录中的main.yml文件包含Role元数据，包含的依赖关系。如果这个角色依赖于另一个角色，我们可以在这里定义。例如，nginx角色取决于安装SSL证书的ssl角色。约定必须包含main.yml文件。<br>meta/main.yml 内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">dependencies:</span><br><span class="line">  - &#123; role: ssl &#125;123</span><br></pre></td></tr></table></figure><p>如果我调用了“nginx”角色，它将尝试首先运行“ssl”角色。<br>否则我们可以省略此文件，或将角色定义为没有依赖关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">dependencies: []12</span><br></pre></td></tr></table></figure><h3 id="2-4-5-模板（templates）"><a href="#2-4-5-模板（templates）" class="headerlink" title="2.4.5 模板（templates）"></a>2.4.5 模板（templates）</h3><p>基于Python的Jinja2模板引擎（和django的模板引擎很类似），模板文件可以包含模板变量。这里的文件应该以.j2为类型后缀（eg.uwsgi.j2），提倡但是不强制，也可以取其他的名字。类似于files，在templates目录中没有main.yml文件，只包含.j2后缀的模板文件。<br>这是一个Nginx服务器（“虚拟主机”）配置的例子。请注意，它使用了稍后在vars/main.yml文件中定义的一些变量。<br>我们的示例中的Nginx配置文件位于templates/serversforhackers.com.conf.j2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # Enforce the use of HTTPS</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    server_name &#123;&#123; domain &#125;&#125;;</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl default_server;</span><br><span class="line"></span><br><span class="line">    root /var/www/&#123;&#123; domain &#125;&#125;/public;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/&#123;&#123; domain &#125;&#125;.log;</span><br><span class="line">    error_log  /var/log/nginx/&#123;&#123; domain &#125;&#125;-error.log error;</span><br><span class="line"></span><br><span class="line">    server_name &#123;&#123; domain &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    include h5bp/basic.conf;</span><br><span class="line"></span><br><span class="line">    ssl_certificate           &#123;&#123; ssl_crt &#125;&#125;;</span><br><span class="line">    ssl_certificate_key       &#123;&#123; ssl_key &#125;&#125;;</span><br><span class="line">    include h5bp/directive-only/ssl.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /favicon.ico &#123; log_not_found off; access_log off; &#125;</span><br><span class="line">    location = /robots.txt  &#123; log_not_found off; access_log off; &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include snippets/fastcgi.conf;</span><br><span class="line">        fastcgi_pass unix:/var/run/php7.1-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;1234567891011121314151617181920212223242526272829303132333435363738</span><br></pre></td></tr></table></figure><p>这是一个相当标准的用于PHP应用程序的Nginx配置。这里有三个变量：</p><p>域<br>ssl_crt<br>ssl_key<br>这三个变量将在变量部分（vars）中定义。</p><h3 id="2-4-6-变量（vars）"><a href="#2-4-6-变量（vars）" class="headerlink" title="2.4.6 变量（vars）"></a>2.4.6 变量（vars）</h3><p>在使用任务集成所有事情之前，让我们来看看变量。该vars目录包含一个main.yml文件（如handlers和meta目录一样），在main.yml中我们可以列出将要使用的所有变量。<br>以下是该vars/main.yml文件的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">domain: serversforhackers.com</span><br><span class="line">ssl_key: /etc/ssl/sfh/sfh.key</span><br><span class="line">ssl_crt: /etc/ssl/sfh/sfh.crt1234</span><br></pre></td></tr></table></figure><p>我们可以在这个角色的其他地方使用这三个变量。我们在上面的模板中看到它们的使用，但是我们也可以在我们定义的任务中看到它们。</p><h5 id="Note-如果您有敏感信息添加到变量文件中，则可以使用ansible-vault加密文件，下面将对此进行说明。"><a href="#Note-如果您有敏感信息添加到变量文件中，则可以使用ansible-vault加密文件，下面将对此进行说明。" class="headerlink" title="Note:如果您有敏感信息添加到变量文件中，则可以使用ansible-vault加密文件，下面将对此进行说明。"></a>Note:如果您有敏感信息添加到变量文件中，则可以使用ansible-vault加密文件，下面将对此进行说明。</h5><h3 id="2-4-7-任务（tasks）"><a href="#2-4-7-任务（tasks）" class="headerlink" title="2.4.7 任务（tasks）"></a>2.4.7 任务（tasks）</h3><p>终于到了将一切都是放在一系列的任务中的时候了。<br>使用角色时运行的主文件是tasks/main.yml文件。看看我们的用例将会是什么样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Add Nginx Repository</span><br><span class="line">  apt_repository:</span><br><span class="line">    repo: ppa:nginx/stable</span><br><span class="line">    state: present</span><br><span class="line"></span><br><span class="line">- name: Install Nginx</span><br><span class="line">  apt:</span><br><span class="line">    pkg: nginx</span><br><span class="line">    state: installed</span><br><span class="line">    update_cache: true</span><br><span class="line">  notify:</span><br><span class="line">    - Start Nginx</span><br><span class="line"></span><br><span class="line">- name: Add H5BP Config</span><br><span class="line">  copy:</span><br><span class="line">    src: h5bp</span><br><span class="line">    dest: /etc/nginx</span><br><span class="line">    owner: root</span><br><span class="line">    group: root</span><br><span class="line"></span><br><span class="line">- name: Disable Default Site Configuration</span><br><span class="line">  file:</span><br><span class="line">    dest: /etc/nginx/sites-enabled/default</span><br><span class="line">    state: absent</span><br><span class="line"></span><br><span class="line"># `dest` in quotes as a variable is used!</span><br><span class="line">- name: Add SFH Site Config</span><br><span class="line">  register: sfhconfig</span><br><span class="line">  template:</span><br><span class="line">    src: serversforhackers.com.j2</span><br><span class="line">    dest: &apos;/etc/nginx/sites-available/&#123;&#123; domain &#125;&#125;.conf&apos; </span><br><span class="line">    owner: root</span><br><span class="line">    group: root</span><br><span class="line"></span><br><span class="line"># `src`/`dest` in quotes as a variable is used!</span><br><span class="line">- name: Enable SFH Site Config</span><br><span class="line">  file:</span><br><span class="line">    src: &apos;/etc/nginx/sites-available/&#123;&#123; domain &#125;&#125;.conf&apos;</span><br><span class="line">    dest: &apos;/etc/nginx/sites-enabled/&#123;&#123; domain &#125;&#125;.conf&apos;</span><br><span class="line">    state: link</span><br><span class="line"></span><br><span class="line"># `dest` in quotes as a variable is used!</span><br><span class="line">- name: Create Web root</span><br><span class="line">  file:</span><br><span class="line">    dest: &apos;/var/www/&#123;&#123; domain &#125;&#125;/public&apos;</span><br><span class="line">    mode: 775</span><br><span class="line">    state: directory</span><br><span class="line">    owner: www-data</span><br><span class="line">    group: www-data</span><br><span class="line">  notify:</span><br><span class="line">    - Reload Nginx</span><br><span class="line"></span><br><span class="line"># `dest` in quotes as a variable is used!</span><br><span class="line">- name: Web Root Permissions</span><br><span class="line">  file:</span><br><span class="line">   dest: &apos;/var/www/&#123;&#123; domain &#125;&#125;&apos;</span><br><span class="line">   mode: 775</span><br><span class="line">   state: directory</span><br><span class="line">   owner: www-data</span><br><span class="line">   group: www-data</span><br><span class="line">   recurse: yes</span><br><span class="line">  notify:</span><br><span class="line">    - Reload Nginx12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364</span><br></pre></td></tr></table></figure><p>这一系列任务使得Nginx能被完整的安装。任务按照出现的顺序完成以下工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 添加nginx / stable库</span><br><span class="line">2 安装并启动Nginx</span><br><span class="line">3 添加H5BP配置文件</span><br><span class="line">4 从sites-enabled目录中删除文件的符号链接来禁用默认的Nginx配置</span><br><span class="line">5 将serversforhackers.com.conf.j2虚拟主机模板复制到Nginx配置中，渲染模板</span><br><span class="line">6 通过将其符号链接到sites-enabled目录来启用Nginx服务器配置</span><br><span class="line">7 创建Web根目录</span><br><span class="line">8 更改项目根目录的权限（递归），该目录位于之前创建的Web根目录之上12345678</span><br></pre></td></tr></table></figure><p>有一些新的模块（和一些我们已经涵盖的新用途），包括复制，模板和文件模块。通过设置每个模块的参数，我们可以做一些<a href="https://www.baidu.com/s?wd=%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">有趣的事情</a>，例如确保文件“不存在”（如果存在则删除它们）的state: absent，或者通过创建一个文件作为符号链接的state: link。您应该检查每个模块的文档，以查看可以用它们完成哪些有趣和有用的事情。</p><h3 id="2-4-8-运行角色（Running-the-Role）"><a href="#2-4-8-运行角色（Running-the-Role）" class="headerlink" title="2.4.8 运行角色（Running the Role）"></a>2.4.8 运行角色（Running the Role）</h3><p>要对服务器运行一个或多个角色，我们将重新使用另一个playbook。该playbook与roles目录位于同一个目录中，同一层级。当我们用ansible-playbook命令运行的时候需要先cd进入到该目录中。<br>让我们创建一个“主”的yaml文件（被ansible-playbook命令执行的文件），该文件定义要使用的角色以及运行它们的主机：<br>文件~/ansible-example/server.yml位于与roles目录相同的目录中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"># run locally here, yadda yadda yadda</span><br><span class="line">- hosts: local</span><br><span class="line">  connection: local</span><br><span class="line">  roles:</span><br><span class="line">    - nginx123456</span><br></pre></td></tr></table></figure><p>所以，我们只是定义角色，而不是在本Playbook文件中定义所有的变量和任务。角色负责具体细节。</p><p>然后我们可以运行角色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i ./hosts server.yml1</span><br></pre></td></tr></table></figure><p>以下是运行Nginx角色的Playbook文件的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">PLAY [all] ********************************************************************</span><br><span class="line"></span><br><span class="line">GATHERING FACTS ***************************************************************</span><br><span class="line">ok: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">TASK: [nginx | Add Nginx Repository] ******************************************</span><br><span class="line">changed: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">TASK: [nginx | Install Nginx] *************************************************</span><br><span class="line">changed: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">TASK: [nginx | Add H5BP Config] ***********************************************</span><br><span class="line">changed: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">TASK: [nginx | Disable Default Site] ******************************************</span><br><span class="line">changed: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">TASK: [nginx | Add SFH Site Config] *******************************************</span><br><span class="line">changed: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">TASK: [nginx | Enable SFH Site Config] ****************************************</span><br><span class="line">changed: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">TASK: [nginx | Create Web root] ***********************************************</span><br><span class="line">changed: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">TASK: [nginx | Web Root Permissions] ******************************************</span><br><span class="line">ok: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">NOTIFIED: [nginx | Start Nginx] ***********************************************</span><br><span class="line">ok: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">NOTIFIED: [nginx | Reload Nginx] **********************************************</span><br><span class="line">changed: [127.0.0.1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ********************************************************************</span><br><span class="line">127.0.0.1                  : ok=8   changed=7   unreachable=0    failed=012345678910111213141516171819202122232425262728293031323334353637</span><br></pre></td></tr></table></figure><p>我们将所有各种组件放在一起，形成一致的角色，现在已经安装并配置了Nginx！</p><h2 id="2-5-事实-Facts"><a href="#2-5-事实-Facts" class="headerlink" title="2.5 事实(Facts)"></a>2.5 事实(Facts)</h2><p>请注意，运行剧本时的第一行总是“收集事实”。<br>在运行任何任务之前，Ansible将收集有关其配置的系统的信息。这些被称为事实，并且包括广泛的系统信息，如CPU核心数量，可用的ipv4和ipv6网络，挂载的磁盘，Linux发行版等等。</p><p>事实在“任务”或“模板”配置中通常很有用。例如，Nginx通常设置为使用与CPU内核一样多的工作处理器。知道这一点，您可以选择如下设置nginx.conf.j2文件的模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes &#123;&#123; ansible_processor_cores &#125;&#125;;</span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># And other configurations...12345</span><br></pre></td></tr></table></figure><p>或者如果你具有多个CPU的服务器，则可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes &#123;&#123; ansible_processor_cores * ansible_processor_count &#125;&#125;;</span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># And other configurations...12345</span><br></pre></td></tr></table></figure><p>所有的ansible facts全局变量都是以“anisble_”为前缀，并且可以在其他任何地方使用。<br>尝试对你的本地机器运行以下内容以查看可用的事实：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Run against a local server</span><br><span class="line"># Note that we say to use &quot;localhost&quot; instead of defining a hosts file here!</span><br><span class="line">ansible -m setup --connection=local localhost</span><br><span class="line"></span><br><span class="line"># Run against a remote server</span><br><span class="line">ansible -i ./hosts remote -m setup123456</span><br></pre></td></tr></table></figure><h2 id="2-6-加密（Vault）"><a href="#2-6-加密（Vault）" class="headerlink" title="2.6 加密（Vault）"></a>2.6 加密（Vault）</h2><p>我们经常需要将敏感数据存储在我们的模板，文件或变量文件中; 这样安全性有一定要求的情况是<a href="https://www.baidu.com/s?wd=%E4%B8%8D%E5%8F%AF%E9%81%BF%E5%85%8D&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">不可避免</a>的（当我们将这些敏感数据文件推送到远程Git仓库时，这是一个痛苦的事情）。Ansible有一个叫做Ansible Vault的解决方案。<br>Vault允许您加密任何Yaml文件，通常将其作用与变量文件，Vault不会加密文件和模板，只能使用Yaml文件。<br>在创建加密文件时，系统会询问您必须使用的密码，以便稍后在调用角色或Playbook时进行编辑。<br>将密码保存在安全的地方。</p><p>例如我们可以创建一个新的变量文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible-vault create vars/main.yml</span><br><span class="line">Vault Password:12</span><br></pre></td></tr></table></figure><p>输入加密密码后，该文件将在您的默认编辑器（通常是Vim或Nano）中打开。<br>默认使用的编辑器由EDITOR环境变量定义。默认值通常是Vim。如果您不是Vim用户，可以通过设置环境变量来快速更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EDITOR=nano ansible-vault edit vars/main.yml1</span><br></pre></td></tr></table></figure><p>在大多数情况下，我们将使用ansible-vault create|edit /path/to/file.yml。更多可用的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create - 创建一个新文件并进行加密</span><br><span class="line">decrypt - 从加密文件创建明文文件</span><br><span class="line">edit - 编辑已经存在的加密文件</span><br><span class="line">encrypt - 加密现有的纯文本文件</span><br><span class="line">rekey - 在加密文件中设置新密码12345</span><br></pre></td></tr></table></figure><p>如果你有一个现有的配置文件要加密，请使用 ansible-vault encrypt /path/to/file.yml。</p><h3 id="示例：-users角色"><a href="#示例：-users角色" class="headerlink" title="示例： users角色"></a>示例： users角色</h3><p>我们创建一个名为“users”的角色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/ansible-example/roles</span><br><span class="line">ansible-galaxy init users12</span><br></pre></td></tr></table></figure><p>创建新用户并设置密码时，我使用Vault 。在用户角色中，您可以设置带有用户密码和公钥的变量文件，以添加到用户的authorized_keys文件（从而提供SSH访问权限）。公共SSH密钥在技术上是安全的，一般公众可以看到 - 所有人都可以使用它来允许你访问自己的服务器。在没有配对私钥的情况下，公钥是不能获得系统访问权限的，我们没有将密钥加入此角色。<br>以下是可以使用Vault创建和加密的示例变量文件。在编辑它时，它是纯文本。</p><p>~/ansible-example/roles/users/vars/main.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin_password: $6$lpQ1DqjZQ25gq9YW$mHZAmGhFpPVVv0JCYUFaDovu8u5EqvQi.Ih</span><br><span class="line">deploy_password: $6$edOqVumZrYW9$d5zj1Ok/G80DrnckixhkQDpXl0fACDfNx2EHnC</span><br><span class="line">common_public_key: ssh-rsa ALongSSHPublicKeyHere123</span><br></pre></td></tr></table></figure><p>请注意，用户的密码也是散列的。您可以阅读Ansible有关生成加密密码的文档，用户模块需要设置用户密码。作为一个快速入门，它在Ubuntu上看起来像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># The whois package makes the mkpasswd</span><br><span class="line"># command available on Ubuntu</span><br><span class="line">$ sudo apt-get install -y whois</span><br><span class="line"></span><br><span class="line"># Create a password hash</span><br><span class="line">$ mkpasswd --method=SHA-512</span><br><span class="line">Password:1234567</span><br></pre></td></tr></table></figure><p>这将生成一个散列密码供你与user模块一起使用。</p><h5 id="Note：变量文件中的密码是散列的，但我仍然喜欢加密包含散列密码的yaml文件。这些文件通常包含未标记的数据，如API令牌或SSH私钥，使加密非常重要。"><a href="#Note：变量文件中的密码是散列的，但我仍然喜欢加密包含散列密码的yaml文件。这些文件通常包含未标记的数据，如API令牌或SSH私钥，使加密非常重要。" class="headerlink" title="Note：变量文件中的密码是散列的，但我仍然喜欢加密包含散列密码的yaml文件。这些文件通常包含未标记的数据，如API令牌或SSH私钥，使加密非常重要。"></a>Note：变量文件中的密码是散列的，但我仍然喜欢加密包含散列密码的yaml文件。这些文件通常包含未标记的数据，如API令牌或SSH私钥，使加密非常重要。</h5><p>一旦你设置了用户密码并将公钥添加到变量文件中，我们就可以加密此文件，然后在任务中使用这些加密变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-vault encrypt roles/users/vars/main.yml1</span><br></pre></td></tr></table></figure><p>然后我们可以编辑我们的任务文件，使用（加密）变量添加新用户：</p><p>这是文件~/ansible-example/roles/users/tasks/main.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Create Admin User</span><br><span class="line">  user:</span><br><span class="line">    name: admin</span><br><span class="line">    password: &apos;&#123;&#123; admin_password &#125;&#125;&apos;</span><br><span class="line">    groups: sudo</span><br><span class="line">    append: yes</span><br><span class="line">    shell: /bin/bash</span><br><span class="line"></span><br><span class="line">- name: Add Admin Authorized Key</span><br><span class="line">  authorized_key:</span><br><span class="line">    user: admin</span><br><span class="line">    key: &apos;&#123;&#123; common_public_key &#125;&#125;&apos;</span><br><span class="line">    state: present</span><br><span class="line"></span><br><span class="line">- name: Create Deploy User</span><br><span class="line">  user:</span><br><span class="line">    name: deploy</span><br><span class="line">    password: &apos;&#123;&#123; deploy_password &#125;&#125;&apos;</span><br><span class="line">    groups: www-data</span><br><span class="line">    append: yes</span><br><span class="line">    shell: /bin/bash</span><br><span class="line"></span><br><span class="line">- name: Add Deployer Authorized Key</span><br><span class="line">  authorized_key:</span><br><span class="line">    user: deploy</span><br><span class="line">    key: &apos;&#123;&#123; common_public_key &#125;&#125;&apos;</span><br><span class="line">    state: present12345678910111213141516171819202122232425262728</span><br></pre></td></tr></table></figure><p>这些任务使用该user模块来创建新用户，传递变量文件中设置的密码。<br>它还使用该authorized_key模块将SSH公钥作为SSH授权密钥添加到每个用户的服务器中。<br>加密变量的使用像在常规任务文件中使用一样。但是，为了运行此角色，我们需要告诉Ansible请求输入vault密码，以便它可以解密变量。<br>编辑我们的server.ymlPlaybook文件，调用user角色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"># Local connection here, yadda yadda yadda</span><br><span class="line">- hosts: local</span><br><span class="line">  connection: local</span><br><span class="line">  sudo: yes</span><br><span class="line">  roles:</span><br><span class="line">    - nginx</span><br><span class="line">    - user12345678</span><br></pre></td></tr></table></figure><p>要运行此Playbook，我们需要告知Ansible请求vault的密码，因为我们正在运行包含加密文件的角色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook --ask-vault-pass -i ./hosts server.yml1</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>本篇文章带着做了如下工作：</p><ol><li><p>安装了ansible</p></li><li><p>配置了ansible inventory文件（仅在不使用connection: local 时才需要）</p></li><li><p>同时在多个服务器上执行幂等的 ad-hoc命令</p></li><li><p>创建一个基本的Playbook来运行多个任务（tasks），并使用了处理程序（handlers）</p></li><li><p>将多个任务抽象为一个角色，以保持所有Nginx相关的操作在一个角色内</p></li></ol><ul><li>展示了如何设置依赖关系</li><li>展示了如何注册任务的“依赖”执行关系，当一个任务执行成功后再执行另一个任务</li><li>展示了如何在我们的任务中使用更多的模板，文件和变量</li></ul><ol start="6"><li><p>展示了如何整合使用ansible事实(facts)</p></li><li><p>展示了如何使用ansible的vault来增加我们的变量的安全性</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/DevOps/Ansible入门教程/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于Ansible的一个好处是，将bash脚本转换为可执行任务是非常容易的。我们可以编写自己的配置程序，但是Ansible更加干净，因为它可以自动在执行任务之前获取上下文
      
    
    </summary>
    
      <category term="DevOps" scheme="http://blog.ozairs.com/categories/DevOps/"/>
    
    
      <category term="Ansible" scheme="http://blog.ozairs.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>马克·扎克伯格：关于Facebook的事实</title>
    <link href="http://blog.ozairs.com/%E8%AF%84%E8%AE%BA/%E9%A9%AC%E5%85%8B%C2%B7%E6%89%8E%E5%85%8B%E4%BC%AF%E6%A0%BC%EF%BC%9A%E5%85%B3%E4%BA%8EFacebook%E7%9A%84%E4%BA%8B%E5%AE%9E/"/>
    <id>http://blog.ozairs.com/评论/马克·扎克伯格：关于Facebook的事实/</id>
    <published>2019-03-12T07:31:04.000Z</published>
    <updated>2019-03-12T07:35:37.837Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://quotes.wsj.com/FB" target="_blank" rel="noopener">Facebook</a> 下个月将满15岁。当我开始Facebook时，我并没有尝试建立一家全球性公司。我意识到你几乎可以找到互联网上的任何东西 - 音乐，书籍和信息 - 除了最重要的东西：人。所以我建立了一个人们可以用来连接和互相学习的服务。多年来，数十亿人发现这很有用，我们已经建立了更多的服务，世界各地的人们每天都喜欢和使用它们。</p><p>最近我听到很多关于我们商业模式的问题，所以我想解释一下我们如何运作的原则。</p><p><img src="/评论/马克·扎克伯格：关于Facebook的事实/1.jpg" alt=""></p><p>我相信每个人都应该有发言权并能够联系。如果我们致力于为每个人服务，那么我们需要一个每个人都能负担得起的服务。最好的方法是免费提供服务，广告使我们能够做到。</p><p>人们一直告诉我们，如果他们要看广告，他们希望它们具有相关性。这意味着我们需要了解他们的兴趣。因此，基于人们喜欢的页面，点击的内容以及其他信号，我们会创建类别 - 例如，喜欢有关园艺和西班牙生活的页面的人 - 然后向广告客户收取费用以向该类别展示广告。虽然在互联网出现之前广告已经存在，但在线广告可以实现更精确的定位，从而实现更具相关性的广告。</p><p>互联网还可以提供更大的透明度，并控制您所看到的广告，而不是电视，广播或印刷品。在Facebook上，您可以控制我们用来向您展示广告的信息，并且您可以阻止任何广告客户与您联系。您可以找到为什么看到广告并更改偏好以获取您感兴趣的广告。您还可以使用我们的透明度工具查看广告客户向其他人展示的每个广告。</p><p>不过，有些人担心这种模式的复杂性。在普通交易中，您向公司支付其提供的产品或服务。在这里，您可以免费获得我们的服务 - 我们会与广告客户分开工作，向您展示相关广告。这个模型可能会感觉不透明，我们都不信任我们不理解的系统。</p><p>有时这意味着人们认为我们做的事情是我们不做的。例如，我们不会出售人们的数据，即使经常报告我们这样做。事实上，向广告商出售人们的信息将违背我们的商业利益，因为这会降低我们对广告商的服务的独特价值。我们有强烈的动机来保护人们的信息不被其他任何人访问。</p><p>有人担心广告会导致我们与使用我们服务的人之间的利益错位。我经常被问到是否有动力增加Facebook的参与度，因为这会产生更多的广告房地产，即使这不符合人们的最佳利益。</p><p>我们非常注重帮助人们分享和联系更多，因为我们服务的目的是帮助人们与家人，朋友和社区保持联系。但从商业角度来看，重要的是他们的时间花得很好，或者他们不会长期使用我们的服务。Clickbait和其他垃圾可能在短期内推动参与，但我们故意展示这一点是愚蠢的，因为它不是人们想要的。</p><p>另一个问题是，我们是否会留下有害或分裂的内容，因为它会促进参与。我们没有。人们一直告诉我们他们不想看到这些内容。广告商不希望他们的品牌靠近它。坏内容仍然存在的唯一原因是我们用来审查它的人和人工智能系统并不完美 - 不是因为我们有动机忽视它。我们的系统仍在不断发展和完善。</p><p>最后，重要的问题是广告模式是否鼓励像我们这样的公司使用和存储比我们更多的信息。</p><p>毫无疑问，我们会收集一些广告信息，但这些信息对于安全和运营我们的服务通常也很重要。例如，公司经常将代码放在他们的应用程序和网站中，因此当一个人签出某个项目时，他们会发送提醒以完成购买。但是这种类型的信号对于检测欺诈或虚假账户也很重要。</p><p>我们让人们完全控制我们是否将这些信息用于广告，但我们不会让他们控制我们如何使用它来保护安全或运营我们的服务。当我们要求人们允许使用这些信息来改进他们的广告时，作为我们遵守欧盟通用数据保护法规的一部分，绝大多数人同意，因为他们更喜欢更相关的广告。</p><p>最后，我认为数据最重要的原则是透明度，选择和控制。我们需要明确我们使用信息的方式，人们需要明确选择如何使用信息。我们认为，通过互联网对这些原则进行编纂的监管对每个人都有好处。</p><p>要做到这一点很重要，因为这种商业模式有明显的好处。数十亿人获得免费服务，与他们关心的人保持联系并表达自己。小型企业 - 创造了全球大部分就业机会和经济增长 - 可以获得帮助他们茁壮成长的工具。Facebook上有超过9000万家小企业，它们构成了我们业务的很大一部分。大多数人买不起电视广告或广告牌，但现在他们可以使用大公司之前可以使用的工具。在一项全球调查中，Facebook上有一半的企业表示，自从他们加入以来，他们已经雇佣了更多的人。他们正在利用我们的服务创造数百万个就业机会。</p><p>对我们而言，技术始终是将权力交给尽可能多的人。如果你相信一个每个人都有机会利用自己的声音和平等的机会被人聆听的世界，任何人都可以从头开始创业，那么构建为每个人服务的技术都很重要。这就是我们每天都在建设的世界，我们的商业模式使其成为可能。</p><p><em>扎克伯格先生是Facebook的创始人兼首席执行官。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://quotes.wsj.com/FB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Facebook&lt;/a&gt; 下个月将满15岁。当我开始Facebook时，我并没有尝试建立一家全球性公司。我意识到你几乎可以找到互联网上的任何
      
    
    </summary>
    
      <category term="评论" scheme="http://blog.ozairs.com/categories/%E8%AF%84%E8%AE%BA/"/>
    
    
      <category term="Facebook" scheme="http://blog.ozairs.com/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>跨平台配置工具Terraform常用命令</title>
    <link href="http://blog.ozairs.com/DevOps/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7Terraform%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.ozairs.com/DevOps/跨平台配置工具Terraform常用命令/</id>
    <published>2019-03-11T08:57:13.000Z</published>
    <updated>2019-03-11T09:07:31.479Z</updated>
    
    <content type="html"><![CDATA[<p>Terraform是一个 IT 基础架构自动化编排工具，它的口号是 “Write, Plan, and create Infrastructure as Code”, 基础架构即代码。具体的说就是可以用代码来管理维护 IT 资源，比如针对 AWS，我们可以用它创建，修改，删除 S3 Bucket, Lambda, EC2 实例，Kinesis， VPC 等各种资源。并且在真正运行之前可以看到执行计划(即干运行-dryrun)。由于状态保存到文件中，因此能够离线方式查看资源情况 – 当然，前提是不要在 Terraform 之外对资源进行修改。</p><p><img src="/DevOps/跨平台配置工具Terraform常用命令/1.png" alt=""></p><p>Terraform 配置的状态除了能够保存在本地文件中，也可以保存到 <a href="https://www.terraform.io/docs/backends/types/consul.html" target="_blank" rel="noopener">Consul</a>, <a href="https://www.terraform.io/docs/backends/types/s3.html" target="_blank" rel="noopener">S3</a>, azure, http, swift 等处。</p><p>Terraform 是一个高度可扩展的工具，通过 Provider 来支持新的基础架构，AWS 不过为目前官方内建 68 个 <a href="https://www.terraform.io/docs/providers/index.html" target="_blank" rel="noopener">Providers</a> 中的一个。其他能用 Terraform 的地方有 Alicloud(阿里云, 实名制备案才能用), Google Cloud, Heroku, Kubernetes, Microsoft Azure, MySQL, RabbitMQ, Docker 等等。愿意的话可以写自己的 Provider, 如搞个 Kafka 的话，用来管理 Topic 等的创建，维护工作。</p><p>Terraform 之前我们对 AWS 的操作用的是 awscli, 或 <a href="https://serverless.com/framework/" target="_blank" rel="noopener">Serverless</a>。awscli 什么都能做，但它是无状态的，必须明确用不同的命令来创建，修改和删除。Serverless 不是用来管理基础架构的，用它创建  Lambda 时创建资源都是很麻烦的事。AWS 提供的 CloudFormation 才是与 Terraform 较类似的工具，但是看到用法就头疼。</p><p>下面从最简单例子开始，看看怎么用 Terraform 创建，删改，修改 S3 Bucket。本地系统为 Mac OS。</p><h3 id="1-Terraform-安装"><a href="#1-Terraform-安装" class="headerlink" title="1. Terraform 安装"></a>1. Terraform 安装</h3><blockquote><p>brew install terraform</p></blockquote><p>安装后 shell 命令就是 <code>terraform</code>, 常用的是 terraform init, terraform plan, terraform apply</p><h3 id="2-创建配置文件"><a href="#2-创建配置文件" class="headerlink" title="2. 创建配置文件"></a>2. 创建配置文件</h3><p>像 git 一样，每个 Terraform 项目需要自己单独的目录空间，所以我们创建一个 terraform-learning 目录</p><blockquote><p>mkdir terraform-learning<br>cd terraform-learning</p></blockquote><p>该目录下的所有  <code>*.tf</code> 文件都会被 Terraform 加载，在初始化 Terraform 工作空间之前必须至少要有一个 <code>*.tf</code> 文件。我们这里建立文件 <code>main.tf</code>, 内容如下</p><p><a href="https://yanbin.blog/wp-content/uploads/2017/08/terraform-simple-1.png" target="_blank" rel="noopener"><img src="https://yanbin.blog/wp-content/uploads/2017/08/terraform-simple-1.png" alt="img"></a></p><p>Terraform 配置的语法是该公司 HashiCorp 独创的 <a href="https://github.com/hashicorp/hcl" target="_blank" rel="noopener">HCL</a>(HashiCorp configuration language), 它可以兼容 JSON 格式。</p><p>上面 tf 文件在 Vim 中的语法加亮是安装的 <code>hashivim/vim-terraform</code> 插件。</p><p>我们写好了 <code>*.tf</code> 文件后可以调用 <code>terraform fmt</code> 对配置文件进行格式化，它比较喜欢被 Java 弃用的等号对齐的格式。</p><h3 id="3-配置文件介绍"><a href="#3-配置文件介绍" class="headerlink" title="3. 配置文件介绍"></a>3. 配置文件介绍</h3><p>从正式跨入 terraform 命令正题之前先来大概的介绍一下上面那个 <code>main.tf</code> 文件。</p><p><strong>1) provider “aws” 部分</strong>，它指定选用什么 provider, 以及验证信息。aws 既允许指定 <code>access_key</code> 和 <code>secret_key</code></p><blockquote><p>provider “aws” {<br>    region           = “us-east-1”<br>    access_key  = “your-access-key-here”<br>    secret_key   = “your-secret-key-here”<br>}</p></blockquote><p>也能够指定证书文件中的 profile</p><blockquote><p>provider “aws” {<br>    region                                  = “us-east-1”<br>    shared_credentials_file  = “~/.aws/credentials”   //不指定的话，默认值是 “~/.aws/credentials”<br>    profile                                  = “yanbin”                        //不指定的话，默认值是 “default”<br>}</p></blockquote><p>如果是使用 shared_credentials_file 中的 profile, 请确定您以预先生成好的 credentials 文件及有效的 profile。</p><p>更多关于 AWS Provider 的配置请参考 <a href="https://www.terraform.io/docs/providers/aws/index.html" target="_blank" rel="noopener">https://www.terraform.io/docs/providers/aws/index.html</a></p><p><strong>2) resource “aws_s3_bucket” “s3_bucket” 部分</strong></p><p>这只是我们今天举的一个小例子，点击链接 <a href="https://www.terraform.io/docs/providers/aws/r/s3_bucket.html" target="_blank" rel="noopener">aws_s3_bucket</a> 查看 S3 Bucket 所有的配置项。Terraform 能够管理的所有 AWS 资源也能从前面那个链接中看到。</p><p>如果 bucket <code>yanbin-test-bucket</code> 不存在的话，运行 <code>terraform apply</code> 将会创建它，否则试图更新该 bucket。此例子只指定了 bucket 的 acl 和 tag 信息。<code>terraform destroy</code> 用来删除已存在的  bucket。</p><p>注意：terraform 配置文件中只指定要管理的资源对象，并不关心操作资源的行为–创建，修改，删除操作。操作行为与 Terraform 的状态有关系，无则创建，有则修改，更名会拆分为除旧立新两个操作，<code>terraform destroy</code> 用于显式删除资源。后面实例操作时会讲到。</p><p>注：<code>resource &quot;aws_s3_bucket&quot; &quot;s3_bucket&quot; {</code> 中，resource 后第一个是 type, 即资源名，第二个参是 name。<del>其实 “s3_bucket” 在这里没什么用，只是一个描述或助记符而已</del>。(2017-08-28): 更正一下，在作为变量引用的时候就要用到它，例如在后面要为 Lambda 创建一个 S3 Event 的 Trigger, 就要写成 <code>event_source_arn = &quot;${aws_s3_bucket.s3_bucket.arn}&quot;</code>, 引用时不需要知道实际的名称。</p><h3 id="4-初始化工作目录"><a href="#4-初始化工作目录" class="headerlink" title="4. 初始化工作目录"></a>4. 初始化工作目录</h3><p>在初始化 Terraform 工作目录之前， 其他命令如 apply, plan 多是不可用的，提示需要初始化工作目录，命令是</p><p>terraform init</p><p>它要做的事情像是 git init 加上 npm install，执行完了 <code>terraform init</code> 之后会在当前目录中生成 <code>.terraform</code> 目录，并依照 <code>*.tf</code> 文件中的配置下载相应的插件。</p><h3 id="5-执行-Terraform-管理命令"><a href="#5-执行-Terraform-管理命令" class="headerlink" title="5. 执行 Terraform 管理命令"></a>5. 执行 Terraform 管理命令</h3><p>有了前面的准备之后，终于可以开始运行 Terraform 的管理命令了。Terraform 在正式执行之前提供了预览执行计划的机会，让我们清楚的了解将要做什么</p><p>terraform plan</p><p>由此计划还能知道关于 aws_s3_bucket 有些什么配置项，比如配置中可以加上 <code>acceleration_status = &quot;Enabled&quot;</code></p><p>terraform apply</p><p>这样便在 AWS 上创建了一个 S3 bucket “yanbin-test-bucket”, 同时会在当前目录中生成一个<a href="https://www.terraform.io/docs/state/index.html" target="_blank" rel="noopener">状态</a>文件 <code>terraform.tfstate</code>, 它是一个标准的 JSON 文件。这个文件对 Terraform 来说很重要，它会影响 <code>terraform plan</code> 的决策，虽然不会影响到实际的执行效果。我们可以把它存到远端，如 S3 或 Consul。<code>terraform state [list|mv|pull|push|rm|show]</code> 用来操作状态文件。</p><p>此时什么也不改，再次执行 <code>terraform plan</code>, 会显示没什么要做的</p><blockquote><p>aws_s3_bucket.s3_bucket: Refreshing state… (ID: yanbin-test-bucket)<br>No changes. Infrastructure is up-to-date.</p></blockquote><p>如果对 <code>main.tf</code> 作点小改，改个 tag 属性，再次 <code>terraform plan</code></p><blockquote><p>~ aws_s3_bucket.s3_bucket<br>tags.Name: “Created by Terraform” =&gt; “sCreated by Terraform”</p><p>Plan: 0 to add, 1 to change, 0 to destroy.</p></blockquote><p>为什么说 <code>terraform plan</code> 是基于状态文件 <code>terraform.tfstate</code> 作出的呢？我们可以删除这个状态文件，然后执行 <code>terraform plan</code> 看看</p><blockquote><p>+ aws_s3_bucket.s3_bucket<br>    …..<br>    bucket: “yanbin-test-bucket”<br>    ……<br>    tags.Environment: “QA”<br>    ……</p><p>Plan: 1 to add, 0 to change, 0 to destroy.</p></blockquote><p>Terraform 由于缺乏 <code>terraform.tfstate</code> 对比，所以认为是要添加一个 bucket, 但是实际执行 <code>terraform apply</code> 时，连接到远端 AWS, 发现该 bucket 已存在就只是进行更新。<code>terraform apply</code> 总能给出正确的操作结果。同理如果状态文件中说有那个 bucket, <code>terraform plan</code> 会说是更新，但 AWS 没有那个  bucket，实际执行 <code>terraform apply</code> 也会进行添加的。</p><h4 id="资源更名"><a href="#资源更名" class="headerlink" title="资源更名"></a>资源更名</h4><p>如果把 <code>main.tf</code> 中的</p><blockquote><p>bucket = “yanbin-test-bucket”</p></blockquote><p>改成</p><blockquote><p>bucket = “yanbin-test-bucket-rename”</p></blockquote><p>即欲为 bucket 更名，用 <code>terraform plan</code> 看下计划</p><p>实际上 <code>terraform apply</code> 也是先删除旧的，再创建新的。Terraform 像 git 一样用不同颜色和  +/- 号来显示变动操作</p><p>最后是 <code>terraform destroy</code> 命令，把 <code>*.tf</code> 文件中配置的所有资源从 AWS 上清理掉。</p><h3 id="关于-Terraform-工作目录中文件命名"><a href="#关于-Terraform-工作目录中文件命名" class="headerlink" title="关于 Terraform 工作目录中文件命名"></a>关于 Terraform 工作目录中文件命名</h3><p>Terraform 运行时会读取工作目录中所有的 <code>*.tf</code>, <code>*.tfvars</code> 文件，所以我们不必把所有的东西都写在单个文件中去，应按职责分列在不同的文件中，例如：</p><blockquote><p>provider.tf                – provider 配置<br>terraform.tfvars      – 配置 provider 要用到的变量<br>varable.tf                  – 通用变量<br>resource.tf                – 资源定义<br>data.tf                        – 包文件定义<br>output.tf                    – 输出</p></blockquote><p>以此篇最简单的入门出发，以后可以深入了解 Lambda, Lambda 触发器，及 API Gateway, EC2 实例怎么用 Terraform 来管理，也知晓了资源的可用属性应该到哪里去查。</p><p>一个小提示：在执行像 <code>terraform plan</code> 或 <code>terraform apply</code> 等命令的时候，可以按下 <code>ctrl + c</code> 让控制台输出详细的日志信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Terraform是一个 IT 基础架构自动化编排工具，它的口号是 “Write, Plan, and create Infrastructure as Code”, 基础架构即代码。具体的说就是可以用代码来管理维护 IT 资源，比如针对 AWS，我们可以用它创建，修改，删
      
    
    </summary>
    
      <category term="DevOps" scheme="http://blog.ozairs.com/categories/DevOps/"/>
    
    
      <category term="Terraform" scheme="http://blog.ozairs.com/tags/Terraform/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes之kubectl常用命令</title>
    <link href="http://blog.ozairs.com/DevOps/Kubernetes%E4%B9%8Bkubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.ozairs.com/DevOps/Kubernetes之kubectl常用命令/</id>
    <published>2019-03-10T06:03:57.000Z</published>
    <updated>2019-03-10T06:07:37.242Z</updated>
    
    <content type="html"><![CDATA[<p>这篇主要介绍一下kubernetes相关的命令，供初接触kubernetes的参考。</p><p><img src="/DevOps/Kubernetes之kubectl常用命令/1.png" alt=""></p><p>kubernetes通过kube-apiserver作为整个集群管理的入口。Apiserver是整个集群的主管理节点，用户通过Apiserver配置和组织集群，同时集群中各个节点同etcd存储的交互也是通过Apiserver进行交互。Apiserver实现了一套RESTfull的接口，用户可以直接使用API同Apiserver交互。另外官方还提供了一个客户端kubectl随工具集打包，用于可直接通过kubectl以命令行的方式同集群交互。</p><p>由于博主水平有限，本文主要介绍一些博主在日常中经常使用到的命令，另外最近正式release的kubernetes 1.2中新加入的的一些feature，由于博主也还没有深入研究，所以不会太多涉及。</p><ol><li>Help<br>类似于所有的命令行工具工具，kubectl也可以直接执行<kubectl>或<kubectl help=""> | <kubectl --help="">可获得命令的帮助信息。如下图所示，kubectl使用方式为：<br>Usage：<br> kubectl [flags]<br> kubectl [commond]<br>另外所有的命令选项都可以通过执行 –help获得特定命令的帮助信息。</kubectl></kubectl></kubectl></li></ol><ol start="2"><li>get<br>get命令用于获取集群的一个或一些resource信息。使用–help查看详细信息。kubectl的帮助信息、示例相当详细，而且简单易懂。建议大家习惯使用帮助信息。kubectl可以列出集群所有resource的详细。resource包括集群节点、运行的pod，ReplicationController，service等。<br>Usage:<br>kubectl get [(-o|–output=)json|yaml|wide|go-template=…|go-template-file=…|jsonpath=…|jsonpath-file=…] (TYPE [NAME | -l label] | TYPE/NAME …) [flags] [flags]<br>1）例如获取pod信息，可以直接使用”kubectl get po“获取当前运行的所有pods的信息，或使用”kubectl get po -o wide“获取pod运行在哪个节点上的信息。注:集群中可以创建多个namespace，未显示的指定namespace的情况下，所有操作都是针对default namespace。如下图所示列出了default 和kube-system的pods：</li></ol><p>2）获取namespace信息</p><h1 id="kubectl-get-namespace"><a href="#kubectl-get-namespace" class="headerlink" title="kubectl get namespace"></a>kubectl get namespace</h1><p>3）类似可以使用”kubectl get rc”, “kubectl get svc”, “kubectl get nodes”等获取其他resource信息。<br>4）获取一些更具体的信息，可以通过使用选项“-o”。如：<br>（1）kubectl get po <podname> -o yaml 以yawl格式输出pod的详细信息。</podname></p><p>（2）kubectl get po <podname> -o json 以jison格式输出pod的详细信息。</podname></p><p>（3）另外还可以使用”-o=custom-columns=“定义直接获取指定内容的值。如前面使用json和ymal格式的输出中，metadata.labels.app的值可以使用如下命令获取。<br>kubectl get po rc-nginx-2-btv4j -o=custom-columns=LABELS:.metadata.labels.app<br>其中LABELS为显示的列标题，”.metadata.labels.app”为查询的域名 </p><p>（4）其他资源也可以使用类似的方式。</p><ol start="3"><li>describe<br>describe类似于get，同样用于获取resource的相关信息。不同的是，get获得的是更详细的resource个性的详细信息，describe获得的是resource集群相关的信息。describe命令同get类似，但是describe不支持-o选项，对于同一类型resource，describe输出的信息格式，内容域相同。<br>  注：如果发现是查询某个resource的信息，使用get命令能够获取更加详尽的信息。但是如果想要查询某个resource的状态，如某个pod并不是在running状态，这时需要获取更详尽的状态信息时，就应该使用describe命令。<br>kubectl describe po rc-nginx-2-btv4j</li><li>create<br>kubectl命令用于根据文件或输入创建集群resource。如果已经定义了相应resource的yaml或son文件，直接kubectl create -f filename即可创建文件内定义的resource。也可以直接只用子命令[namespace/secret/configmap/serviceaccount]等直接创建相应的resource。从追踪和维护的角度出发，建议使用json或yaml的方式定义资源。<br>  如，前面get中获取的两个nginx pod的replication controller文件内容如下。文件名为：rc-nginx.yaml<br>apiVersion: v1<br>kind: ReplicationController<br>metadata:<br>  name: rc-nginx-2<br>spec:<br>  replicas: 2<br>  template:<br> metadata:<br>   labels:<pre><code>app: nginx-2</code></pre> spec:<br>   containers:<ul><li>name: nginx-2<br>image: xingwangc.docker.rg/nginx<br>ports:<ul><li>containerPort: 80<br>直接使用create则可以基于rc-nginx.yaml文件创建出ReplicationController（rc），rc会创建两个副本：<br>kubectl create -f rc-nginx.yaml<br>创建后，使用“kubectl get rc”可以看到一个名为rc-nginx-2的ReplicationController将被创建，同时“kubectl get po”的结果中会多出两个前缀为“rc-nginx-2-”的pod。关于kubernetes集群中resource，pod， ReplicationController…等后续会新开博文详细介绍。</li></ul></li></ul></li><li>replace<br>replace命令用于对已有资源进行更新、替换。如前面create中创建的nginx，当我们需要更新resource的一些属性的时候，如果修改副本数量，增加、修改label，更改image版本，修改端口等。都可以直接修改原yaml文件，然后执行replace命令。<br>  注：名字不能被更更新。另外，如果是更新label，原有标签的pod将会与更新label后的rc断开联系，有新label的rc将会创建指定副本数的新的pod，但是默认并不会删除原来的pod。所以此时如果使用get po将会发现pod数翻倍，进一步check会发现原来的pod已经不会被新rc控制，此处只介绍命令不详谈此问题，好奇者可自行实验。<br>kubectl replace -f rc-nginx.yaml </li><li>patch<br>如果一个容器已经在运行，这时需要对一些容器属性进行修改，又不想删除容器，或不方便通过replace的方式进行更新。kubernetes还提供了一种在容器运行时，直接对容器进行修改的方式，就是patch命令。<br>  如前面创建pod的label是app=nginx-2，如果在运行过程中，需要把其label改为app=nginx-3，这patch命令如下：<br>kubectl patch pod rc-nginx-2-kpiqt -p ‘{“metadata”:{“labels”:{“app”:”nginx-3”}}}’ </li><li>edit<br>  edit提供了另一种更新resource源的操作，通过edit能够灵活的在一个common的resource基础上，发展出更过的significant resource。例如，使用edit直接更新前面创建的pod的命令为：<br>  kubectl edit po rc-nginx-btv4j<br>  上面命令的效果等效于：<br>  kubectl get po rc-nginx-btv4j -o yaml &gt;&gt; /tmp/nginx-tmp.yaml<br>  vim /tmp/nginx-tmp.yaml<br>  /<em>do some changes here </em>/<br>  kubectl replace -f /tmp/nginx-tmp.yaml </li><li>Delete<br>  根据resource名或label删除resource。<br>  kubectl delete -f rc-nginx.yaml<br>  kubectl delete po rc-nginx-btv4j<br>  kubectl delete po -lapp=nginx-2 </li><li><p>apply<br>  apply命令提供了比patch，edit等更严格的更新resource的方式。通过apply，用户可以将resource的configuration使用source control的方式维护在版本库中。每次有更新时，将配置文件push到server，然后使用kubectl apply将更新应用到resource。kubernetes会在引用更新前将当前配置文件中的配置同已经应用的配置做比较，并只更新更改的部分，而不会主动更改任何用户未指定的部分。<br>  apply命令的使用方式同replace相同，不同的是，apply不会删除原有resource，然后创建新的。apply直接在原有resource的基础上进行更新。同时kubectl apply还会resource中添加一条注释，标记当前的apply。类似于git操作。 </p></li><li><p>logs<br>logs命令用于显示pod运行中，容器内程序输出到标准输出的内容。跟docker的logs命令类似。如果要获得tail -f 的方式，也可以使用-f选项。<br>kubectl logs rc-nginx-2-kpiqt </p></li><li>rolling-update<br> rolling-update是一个非常重要的命令，对于已经部署并且正在运行的业务，rolling-update提供了不中断业务的更新方式。rolling-update每次起一个新的pod，等新pod完全起来后删除一个旧的pod，然后再起一个新的pod替换旧的pod，直到替换掉所有的pod。<br> rolling-update需要确保新的版本有不同的name，Version和label，否则会报错 。<br> kubectl rolling-update rc-nginx-2 -f rc-nginx.yaml<br> 如果在升级过程中，发现有问题还可以中途停止update，并回滚到前面版本<br> kubectl rolling-update rc-nginx-2 —rollback<br> rolling-update还有很多其他选项提供丰富的功能，如—update-period指定间隔周期，使用时可以使用-h查看help信息 </li><li>scale<br> scale用于程序在负载加重或缩小时副本进行扩容或缩小，如前面创建的nginx有两个副本，可以轻松的使用scale命令对副本数进行扩展或缩小。<br> 扩展副本数到4：<br> kubectl scale rc rc-nginx-3 —replicas=4<br> 重新缩减副本数到2：<br> kubectl scale rc rc-nginx-3 —replicas=2 </li><li>autoscale<br> scale虽然能够很方便的对副本数进行扩展或缩小，但是仍然需要人工介入，不能实时自动的根据系统负载对副本数进行扩、缩。autoscale命令提供了自动根据pod负载对其副本进行扩缩的功能。<br> autoscale命令会给一个rc指定一个副本数的范围，在实际运行中根据pod中运行的程序的负载自动在指定的范围内对pod进行扩容或缩容。如前面创建的nginx，可以用如下命令指定副本范围在1~4<br> kubectl autoscale rc rc-nginx-3 —min=1 —max=4 </li><li><p>cordon, drain, uncordon<br> 这三个命令是正式release的1.2新加入的命令，三个命令一起介绍，是因为三个命令配合使用可以实现节点的维护。在1.2之前，因为没有相应的命令支持，如果要维护一个节点，只能stop该节点上的kubelet将该节点退出集群，是集群不在将新的pod调度到该节点上。如果该节点上本生就没有pod在运行，则不会对业务有任何影响。如果该节点上有pod正在运行，kubelet停止后，master会发现该节点不可达，而将该节点标记为notReady状态，不会将新的节点调度到该节点上。同时，会在其他节点上创建新的pod替换该节点上的pod。这种方式虽然能够保证集群的健壮性，但是任然有些暴力，如果业务只有一个副本，而且该副本正好运行在被维护节点上的话，可能仍然会造成业务的短暂中断。<br> 1.2中新加入的这3个命令可以保证维护节点时，平滑的将被维护节点上的业务迁移到其他节点上，保证业务不受影响。如下图所示是一个整个的节点维护的流程（为了方便demo增加了一些查看节点信息的操作）：1）首先查看当前集群所有节点状态，可以看到共四个节点都处于ready状态；2）查看当前nginx两个副本分别运行在d-node1和k-node2两个节点上；3）使用cordon命令将d-node1标记为不可调度；4）再使用kubectl get nodes查看节点状态，发现d-node1虽然还处于Ready状态，但是同时还被禁能了调度，这意味着新的pod将不会被调度到d-node1上。4）再查看nginx状态，没有任何变化，两个副本仍运行在d-node1和k-node2上；5）执行drain命令，将运行在d-node1上运行的pod平滑的赶到其他节点上；6）再查看nginx的状态发现，d-node1上的副本已经被迁移到k-node1上；这时候就可以对d-node1进行一些节点维护的操作，如升级内核，升级Docker等；7）节点维护完后，使用uncordon命令解锁d-node1，使其重新变得可调度；8）检查节点状态，发现d-node1重新变回Ready状态。 </p></li><li><p>attach<br> attach命令类似于docker的attach命令，可以直接查看容器中以daemon形式运行的进程的输出，效果类似于logs -f，退出查看使用ctrl-c。如果一个pod中有多个容器，要查看具体的某个容器的的输出，需要在pod名后使用-c containers name指定运行的容器。如下示例的命令为查看kube-system namespace中的kube-dns-v9-rcfuk pod中的skydns容器的输出。<br>  kubectl attach kube-dns-v9-rcfuk -c skydns —namespace=kube-system </p></li><li>exec<br> exec命令同样类似于docker的exec命令，为在一个已经运行的容器中执行一条shell命令，如果一个pod容器中，有多个容器，需要使用-c选项指定容器。 </li><li>port-forward<br> 转发一个本地端口到容器端口，博主一般都是使用yaml的方式编排容器，所以基本不使用此命令。 </li><li>proxy<br> 博主只尝试过使用nginx作为kubernetes多master HA方式的代理，没有使用过此命令为kubernetes api server运行过proxy </li><li>run<br> 类似于docker的run命令，直接运行一个image。 </li><li>label<br> 为kubernetes集群的resource打标签，如前面实例中提到的为rc打标签对rc分组。还可以对nodes打标签，这样在编排容器时，可以为容器指定nodeSelector将容器调度到指定lable的机器上，如如果集群中有IO密集型，计算密集型的机器分组，可以将不同的机器打上不同标签，然后将不同特征的容器调度到不同分组上。<br> 在1.2之前的版本中，使用kubectl get nodes则可以列出所有节点的信息，包括节点标签，1.2版本中不再列出节点的标签信息，如果需要查看节点被打了哪些标签，需要使用describe查看节点的信息。 </li><li>其他<br>其他还有如cluster-info信息可以查看当前集群的一些信息，Version查看集群版本信息等，还有一些集群配置相关的命令等。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇主要介绍一下kubernetes相关的命令，供初接触kubernetes的参考。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/DevOps/Kubernetes之kubectl常用命令/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;kubernetes通过kube-apiserv
      
    
    </summary>
    
      <category term="DevOps" scheme="http://blog.ozairs.com/categories/DevOps/"/>
    
    
      <category term="Kubernetes" scheme="http://blog.ozairs.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>停止、删除所有的docker容器和镜像</title>
    <link href="http://blog.ozairs.com/DevOps/%E5%81%9C%E6%AD%A2%E3%80%81%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E7%9A%84docker%E5%AE%B9%E5%99%A8%E5%92%8C%E9%95%9C%E5%83%8F/"/>
    <id>http://blog.ozairs.com/DevOps/停止、删除所有的docker容器和镜像/</id>
    <published>2019-03-09T23:48:08.000Z</published>
    <updated>2019-03-09T23:51:57.312Z</updated>
    
    <content type="html"><![CDATA[<p>这些命令总是记不住，或者说不用心去记，所以记录在本文中，以便将来查询。</p><p><img src="/DevOps/停止、删除所有的docker容器和镜像/1.png" alt=""></p><h2 id="列出所有的容器-ID"><a href="#列出所有的容器-ID" class="headerlink" title="列出所有的容器 ID"></a>列出所有的容器 ID</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><h2 id="停止所有的容器"><a href="#停止所有的容器" class="headerlink" title="停止所有的容器"></a>停止所有的容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure><h2 id="删除所有的容器"><a href="#删除所有的容器" class="headerlink" title="删除所有的容器"></a>删除所有的容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h2 id="删除所有的镜像"><a href="#删除所有的镜像" class="headerlink" title="删除所有的镜像"></a>删除所有的镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp mycontainer:/opt/file.txt /opt/local/</span><br><span class="line">docker cp /opt/local/file.txt mycontainer:/opt/</span><br></pre></td></tr></table></figure><p><strong>更新</strong>: @snakeliwei 的提醒， 现在的docker有了专门清理资源(container、image、网络)的命令。 docker 1.13 中增加了 <code>docker system prune</code>的命令，针对container、image可以使用<code>docker container prune</code>、<code>docker image prune</code>命令。</p><ul><li><code>docker image prune --force --all</code>或者docker image prune -f -a` : 删除所有不使用的镜像</li><li><code>docker container prune -f</code>: 删除所有停止的容器</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这些命令总是记不住，或者说不用心去记，所以记录在本文中，以便将来查询。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/DevOps/停止、删除所有的docker容器和镜像/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;列出所有的容器-ID&quot;&gt;&lt;a href=&quot;#列出所有的容器
      
    
    </summary>
    
      <category term="DevOps" scheme="http://blog.ozairs.com/categories/DevOps/"/>
    
    
      <category term="Docker" scheme="http://blog.ozairs.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析</title>
    <link href="http://blog.ozairs.com/%E7%94%B5%E5%BD%B1/%E7%A7%91%E6%81%A9%E5%85%84%E5%BC%9F%E7%94%B5%E5%BD%B1%EF%BC%9A%E3%80%8A%E5%B7%B4%E6%96%AF%E7%89%B9%C2%B7%E6%96%AF%E5%85%8B%E9%B2%81%E6%A0%BC%E6%96%AF%E7%9A%84%E6%AD%8C%E8%B0%A3%E3%80%8B%E8%B5%8F%E6%9E%90/"/>
    <id>http://blog.ozairs.com/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/</id>
    <published>2019-03-08T22:47:51.000Z</published>
    <updated>2019-03-08T23:43:35.090Z</updated>
    
    <content type="html"><![CDATA[<p>如果要选当代文学性最强的一个（对）美国导演，我首推科恩兄弟（兄：乔尔·科恩Joel Coen；弟：伊桑·科恩Ethan Coen）：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/1.jpg" alt=""></p><p>从处女作《血迷宫》（Blood Simple）开始，科恩兄弟的影片就带有十分强烈的后现代性和黑色幽默，剧情环环相扣、步步为营，诸多巧合汇集在一起的“滚雪球式”故事让人们记住了这对锋芒毕露的电影人。  </p><p> 在《巴顿·芬克》（Barton Fink）中兄弟俩将自己的存在主义观点和意识流手法融入作品中，讲述一位剧作家的创作焦虑，隐晦复杂的戏中戏文本嵌套，现实世界与意识世界的交叠让人们看清了科恩兄弟思想的深邃。这部作品也为兄弟俩带来了第一座金棕榈。</p><p> 后来斩获奥斯卡最佳影片的《老无所依》其片名（No Country ForOld Man）来自叶芝的长诗《驶向拜占庭》。这部影片被称作是“西部片的终结”：凶手逃了，赃款散了，警察老了，是一次完完全全的反类型。影片原作来自“海明威与福克纳的唯一继承者”科马克·麦卡锡（Cormac McCarthy），科恩兄弟将他笔下那个蛮荒苍凉的西部世界完美地复刻了下来。</p><p> 如今，科恩兄弟已经成为美国家喻户晓的导演，他们作品序列中的元素也日渐丰富，包括歌舞（《醉乡民谣》《凯撒万岁》等）、宗教元素（《逃狱三王》《老妇杀手》等）以及各种类型片都有涉猎。但始终贯彻的一点是他们对生活无常的透彻洞悉。</p><p>今年亮相于威尼斯电影节的新作《巴斯特·斯克鲁格斯的歌谣》（The Ballads of Buster Scruggs）由网飞Netflix出品，将六个独立的短篇故事合为一部长片，斩获了威尼斯最佳原创剧本。六个故事均是发生在18-19世纪的美国西部，神秘莫测而又无法无天的西部世界正是科恩兄弟故事展开的最佳舞台。  </p><p> 六个故事影调鲜明，从各个层次各个视角展现西部世界。别具一格的表演风格，精准的剪辑节奏，以及熟悉的世事无常的突转。每一个故事都充满了科恩兄弟的奇思妙想，每一个故事都是充满着黑色幽默的寓言故事。  </p><p>在接下来的文章里，我将和大家谈谈自己对这六个故事的个人理解，所以真的真的会剧透，建议大家先去看原片啦！  </p><p>一、《巴斯特·斯克鲁格斯的歌谣》The Ballad of Buster Scruggs</p><p> <img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/2.jpg" alt=""></p><p>You see’em, you play’em. 看了牌就得玩。<br> 故事简介：身着一袭白衣的通缉犯牛仔巴斯特·斯克鲁格斯是声名远扬的神枪手，他虽然是不法之徒却贯彻着自己的原则，绝不惹是生非，但也绝不忍气吞声。他一人一马地流浪，一路上免不了发生些流血事件。最后他遇到了另一个神枪手，死在了他的枪口下。</p><p> 在故事的开头，巴斯特有一段这样的独白：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/3.jpg" alt=""></p><p>这是巴斯特的信条，他相信“愿赌服输”，为自己无力改变的事情而动肝火是很没有必要的。之后他在一间酒吧里，他坐上了一个虚位以待的牌局，可放下的牌实在不好，在看了之后巴斯特反悔了。这是他“不愿意赌的局”。但其余的人告诉他：“看了牌就得玩。”有个人甚至拿枪威胁他（这违反店内需要寄存武器的规定）。没有赢的把握，巴斯特宁愿退出，他说：</p><p> <img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/4.jpg" alt=""></p><p>拿枪指着他的人（名叫乔Joe）却不以为然，倚仗着武器的淫威逼迫巴斯特。但最终他被巴斯特的天秀操作撂倒了。死者的弟弟叫嚣着要巴斯特出来决斗，但也很快被巴斯特精湛的射技干掉。  </p><p>接下来登场的牛仔也要求决斗，巴斯特欣然接受，在他看来不过是又多一个手下败将而已：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/5.jpg" alt=""></p><p>但这一次被撂倒的却是他自己。巴斯特死后的灵魂与牛仔合唱了一曲 When The Cowboy Trades His Spurs For Wings（《当牛仔的马刺换作翅膀》）。</p><p>这个故事是在用“牌局”和“决斗”做讽刺：人们往往在自以为胜券在握时遭遇失败，就如同手持武器的乔和十分自地信迈向决斗地点的巴斯特。在很多时候这种“牌局”是没有选择权的，你能做的唯有选择豁达地释然，一如开头巴斯特的独白。在踏上这条路的时候，巴斯特已然做好了觉悟。</p><p> 有意思的是科恩兄弟用两个构图完全一致的镜头，暗示了这种际遇的传递：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/6.jpg" alt=""></p><p>这个身着一袭黑衣的牛仔，也会遇到下一个比他更快的神枪手。</p><p> 这个故事糅合了最多的科恩元素，情节突转、类型片戏仿（牛仔决斗）、黑色幽默、宗教情怀和歌舞桥段，于是这个短篇可以总领整部影片，相信兄弟俩也拍得很过瘾。</p><p>二、《阿尔戈多内斯附近》Near Algodones</p><p>故事简介：一个走投无路的牛仔决定抢劫银行，但却失败了被拘捕。在即将被处以绞刑的时候，一群印第安人土著截杀了执法者；牛仔被路过的牧牛人所救，但那个牧牛人实际上是个盗牛贼，牛仔被诬陷并被送到镇上处死。</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/7.jpg" alt=""></p><p> 这个故事的架构就十分简单了，是典型的“塞翁失马”模式，用一次次的突转来表现旦夕祸福、造化弄人。在最后的绞刑架上，牛仔对旁边泣不成声的人说：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/8.jpg" alt=""></p><p>在死之前，牛仔还和看台下的一个姑娘对上眼了。这实在是很残忍的事，在你准备接受死亡的命运之后，你又产生了对生的渴求，实在是死不瞑目的折磨。但好歹，处刑的人用麻袋帮你合上了眼睛。</p><p>三、《饭票》（Meal Ticket）</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/9.jpg" alt=""></p><p>The quality of mercy is not strained, it droppeth like gentle rainfrom heaven.<br> 慈悲不是出于勉强，它就像甘霖一样从天上降下尘世。<br> 故事简介：一个男人依靠着一个没有四肢的残疾演说家卖艺维生。但越来越菲薄的收入令他不再信任这位少年，尤其在他看到一只“会算数的鸡”吸引了一大群人的目光之后，他决定替换掉自己的“演员”。</p><p>这是整部影片中文学性最为集中的一篇，尤其反映在残疾演说家的台词里，引用了雪莱的《奥斯曼狄斯》、《圣经·创世纪》该隐与约伯的故事、林肯的葛底斯堡演说，其间穿插着莎士比亚的商籁诗句和《暴风雨》台词。这样的演说注定是令人费解的拼凑文本，但演说家生动俄演绎还是让不少听众产生了敬畏之心。</p><p>故事在愈发酷冽的蓝色影调里发展着，男人和少年的关系在不断地发生微妙的转变。最终他抛弃了少年，而收获了一只“天才阉鸡”。</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/10.jpg" alt=""></p><p>这个短篇开头的引语出自莎翁的《威尼斯商人》，这或许是唯利是图的商人们的自我开脱之词，在这里则是少年内心的真实写照，也是对那个男人的穷形尽相。有趣的是篇名“饭票”的讽刺意味，男人与少年实际上是相依为命，互相提供所需，彼此都是对方的“饭票”。他买下了那只鸡，却不明白“算数”是如何做到的，迎接他的必将是一个饥寒交迫的寒冬。</p><p>四、《黄金谷》（All GoldCanyon）</p><p>这儿是峡谷的碧绿心脏，布局呆板的峭壁一到这里，豁然开朗，一改粗犷的格调，形成一个隐蔽的小天地，洋溢着甜蜜、丰满、柔和的情趣。这儿的一切都在安息，甚至狭窄的小溪也收住了汹涌的奔腾，渐渐变成了恬静的池塘。一头绛红的、角上丫杈很多的公鹿，低垂着头，半闭着眼睛，站在深及膝盖的水里，正在打盹儿。<br>故事简介：淘金老人来到一片风景绝好的土地，希望能够找到属于自己的金矿。就在他辛劳了无数个日夜后终于寻到矿脉之时，他被人从背后用枪袭击了……</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/11.jpg" alt=""></p><p>这个故事并非科恩兄弟原创，而是改编自美国著名短篇小说家杰克·伦敦（Jack London）的同名作品，影片中出现的句子也是原作的引文。</p><p>杰克·伦敦用生动隽永的文笔展示了他自己的生态观：“飘动的声音和飘忽的颜色，似乎共同编织出一片精美、无形的轻纱，而它就是这里的精神。这是和平的精神，没有死亡，只有安然跳动的生命，安谧却不死寂，……这里的精神是具有生命气息的和平精神，一切都陶醉在繁荣的安逸与满足中，丝毫不受远方战争传闻的搅扰。”  </p><p>但是淘金者的到来打破了这一切，他开掘土地、钓捕银鱼、还偷走了一颗鸟蛋，他惊扰了这里的生灵，随即将那一片“轻纱”撕破了。没有战争搅扰的大自然，也就迎来了淘金者和偷袭者之间的争斗。我们会很自然地生发联想，这就是人类亘古以来就有的习性：争抢资源，引发战争，破坏自然；在我们尚未脱离对自然秩序的崇拜的时代，我们会敬畏、会感恩，而当我们逐渐把握了自然规律并想改造自然之后，我们就成为了自然精神的入侵者和破坏者。</p><p>在这个故事中，偷袭者是妄图不劳而获的人，但最终被淘金老人反杀；而当老人离开这里的时候，慷慨馈赠他金矿的自然只是重归了和平却没有报复他。看着那一地满目疮痍的矿洞，我们需要警醒：不是不报，时候未到。</p><p>从技法上而言，淘金老人与偷袭者之间的争斗既是故事的一部分，又与整个故事产生了相互映照：即老人是弱势的、被劫掠的，类似于大自然；偷袭者是强势的、施暴的，类似于破坏自然者。因此这个故事这看上去只是一个“绿水青山就是金山银山”的口号宣传片，其内在层次还是十分丰富的，这便是科恩兄弟故事的魅力所在。</p><p>五、《受惊的女子》The Gal Who Got Rattled</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/12.jpg" alt=""></p><p> Mr.Arthur had no idea about what he would say to Billy Knapp.<br>亚瑟先生不知道该如何向比利·奈普开口。<br>故事简介：隆格巴小姐为了一个潜在的结婚对象将要随车队搬迁至俄勒冈。在途中她的哥哥感染霍乱去世，隆格巴小姐决定继续前进，马车领队比利·奈普则趁机向她表达结婚意向。但隆格巴小姐为了她的狗与大部队走散，在印第安人的袭击中饮弹自尽。</p><p>这个短篇中隆格巴小姐一直处于“受惊”的不安状态，这种状态既是瞬时的“受惊吓”，比如当她以为自己的狗被一枪打死之后她放下捂住耳朵的手，随即又被接连的两声枪响吓到：</p><p>更是一种无所适从的彷徨，比如本来该由她哥哥来撮合她和未婚夫的婚事，在她哥哥死后就没有人帮她介绍了，而她又举目无亲，不知该去往未知的俄勒冈还是该回到无依无靠的故地。</p><p>但真正让这个短篇得名的是隆格巴小姐最后的举动。她和另一个领队亚瑟先生受到了印第安人的包围，亚瑟给了她一把手枪并告诫她，必要的时候就用这把枪自尽，被印第安人逮到是绝对的生不如死。就在亚瑟先生费尽千辛万苦击退了印第安人之后，他却发现隆格巴小姐已经自杀了。所以这才是真正“got rattled”的时候。</p><p>亚瑟先生很是悔恨，如果他没有向隆格巴小姐交代那些话，或许她就不会死了。所以当他回到车队的时候，“不知道该如何向比利·奈普开口”。  其实自杀这一枪是隆格巴小姐的性格与处境使然，她本人是唯唯诺诺、谨小慎微的人，而又独自面对了亲人的离去，不知道生活该如何继续下去。在这种精神上的高压之下，她的弦最终被印第安人切断了。</p><p>有趣的是，如果我们再往回倒一点，如果隆格巴小姐没有去找她的那只狗就不会和大部队走散了，如果比利·奈普当时把那只狗打死就好了。这就是科恩兄弟的编剧惯例了：用看似微不足道的细节买下伏笔，事件与事件的相互关联最终导向了无可挽回的结局，也就是“节外生枝”与“滚雪球”。</p><p> 隆格巴小姐的扮演者佐伊·卡赞（Zoe Kazan）奉献了十分精湛的表演，将科恩影片中独有的悲哀与滑稽的混合表现得十分自然而又不失夸张的喜感：</p><p>Is it？<br>这个短篇的文字技巧是“开头与结尾的移位”，开篇的引文部分其实是故事的结尾，而故事的结尾暗示着无数情节的开始：亚瑟先生将怎么去措辞，比利·奈普将对此产生什么反应等等。故事的主线是隆格巴小姐的受惊自尽，支线则是比利·奈普对她的求婚，主线结束之后，支线留作结尾形成了“复调式”的故事体式，大大拓宽了文本的阅读空间。</p><p>六、《遗体》The Mortal Remains</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/13.jpg" alt=""></p><p> Whether or not he heard, the coachman did not slow.<br>不论他是否听见，马车夫都不会慢下来。<br> 故事简介：五个身份不同的陌生人：一个法国男人，一个皮草猎人，一个贵妇人，一胖一瘦两个赏金猎人（他们要将通缉犯的遗体运往镇上的警署）；一同乘马车前往一个共同的目的地。期间贵妇突发了哮喘，法国男人让马车夫停车，但他充耳不闻。马车夫一直前进着，直到一处旅馆门口停下。</p><p>这个故事架构非常简单，但却异常精彩，它表现了科恩兄弟极高的文学造诣，通篇只有两个场景：马车内和目的地，但却有十分充足的戏剧张力。故事中的对白非常冗杂，意涵丰富，值得细读，在这里主要是想集中讨论这个故事的两种解读：（1）这个故事是实指，就是五个人一同前往一个共同的目的地，他们身份明确，目的地也明确（片中说是摩根堡），马车夫不愿意停下来可能只是出于某种意愿。他们最后下榻到同一处旅馆。  （2）这个故事是虚指，象征的是人走向死亡的全过程。两个赏金猎人相当于是摆渡人，而这永远不会慢下来的马车就是永远不会停留的“时间”。最后停留的终点就是“死亡”。</p><p>对第二种解读的佐证能够很轻易地在片中找到，比如两个赏金猎人自称“死神”“灵魂的收割者”，在他们眼中只有两种人：“活人”与“死人”；故事发生的整个时间段是从日薄西山到彻底的冷夜；旅馆大门的雕刻装饰是天使与恶魔（公羊头代表撒旦）等等。但是这些证据都可以有非象征性的解读，故事耐人寻味的含蓄正在于此。</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/14.jpg" alt=""></p><p>片中比较重要的一段话是赏金猎人所讲的“夜归人”（The Midnight Caller）故事，这是一个家喻户晓从小听到大的故事，但每每听我们都还是会被吸引：</p><p><img src="/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/15.jpg" alt=""></p><p>这段话的妙处在于文本意涵的层层嵌套：最里面是这个“夜归人”故事；在这之外是听故事的人，他们喜欢这个故事既与自己相关又与自己无关；在这之外是这个现象的叙述者：赏金猎人，叙述的对象是对面的几个乘客，让他们联想自己是否有相同的经验；最后是银幕外的我们，当我们在听这整个故事的时候，我们是否也产生了相同的想法？</p><p>我们再来看这个故事的标题：遗体，英文原名是the mortal remains，即凡人的遗留物。当片中的人物意识到自己的处境不对的时候，我们也就该意识到这个“遗体”指代的自然不是两位赏金猎人运送的遗体，而是这三位乘客——</p><p>再扩大一点，是每一个人：没有人会永垂不朽，所有人都是暂时活动着的“遗体”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果要选当代文学性最强的一个（对）美国导演，我首推科恩兄弟（兄：乔尔·科恩Joel Coen；弟：伊桑·科恩Ethan Coen）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/电影/科恩兄弟电影：《巴斯特·斯克鲁格斯的歌谣》赏析/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;从处女
      
    
    </summary>
    
      <category term="电影" scheme="http://blog.ozairs.com/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影" scheme="http://blog.ozairs.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>世界上十大图书馆之一——维多利亚州立图书馆</title>
    <link href="http://blog.ozairs.com/%E6%97%85%E8%A1%8C/%E4%B8%96%E7%95%8C%E4%B8%8A%E5%8D%81%E5%A4%A7%E5%9B%BE%E4%B9%A6%E9%A6%86%E4%B9%8B%E4%B8%80%E2%80%94%E2%80%94%E7%BB%B4%E5%A4%9A%E5%88%A9%E4%BA%9A%E5%B7%9E%E7%AB%8B%E5%9B%BE%E4%B9%A6%E9%A6%86/"/>
    <id>http://blog.ozairs.com/旅行/世界上十大图书馆之一——维多利亚州立图书馆/</id>
    <published>2019-03-08T04:01:41.000Z</published>
    <updated>2019-03-08T23:50:45.407Z</updated>
    
    <content type="html"><![CDATA[<p>维多利亚州立图书馆State Library of Victoria位于墨尔本的市中心，地理位置绝佳，就在热闹的Melbourne Central车站正对面。</p><p>在图￼书馆前方大草皮上是大家歇息的好去处，只要有太阳的时候，墨尔本人是绝对不会错过在这里晒日光浴的任何机会。</p><p><img src="/旅行/世界上十大图书馆之一——维多利亚州立图书馆/1.jpg" alt=""></p><p>距离图书馆入口处不远的地方，有大西洋棋让大家切磋一下棋艺。</p><p><img src="/旅行/世界上十大图书馆之一——维多利亚州立图书馆/2.jpg" alt=""></p><p>而在Swanston St and La Trobe St交叉口的人行道上，有个像是图书馆沉到地底的公共艺术。</p><p><img src="/旅行/世界上十大图书馆之一——维多利亚州立图书馆/3.jpg" alt=""></p><p>图书馆前方有不少铜像，正前方的雕像是大法官Redmond Barry。</p><p><img src="/旅行/世界上十大图书馆之一——维多利亚州立图书馆/4.jpg" alt=""></p><p>这座图书馆成立于1854年，与墨尔本大学同年完工。州立图书馆为当地建筑师Joseph Reed设计，在之前的文章介绍过，这位设计师还包办设计了墨尔本其它著名的建筑物。像是皇家展览馆、墨尔本市政厅、圣米迦勒联合教会等等</p><p>在1856年维多利亚州立图书馆正式对外开放，经过了一个半世纪的发展，藏书体系越来越完善，目前该馆有超过两百多万的图书，以及一百多万件的地图、手稿、报册、图册等文献，馆藏范围种类繁多，史料价值高，完整的保存着维多利亚的文化。</p><p>图书馆内部有宽敞的展览大厅、画廊、简报厅、会议室、书报区，还有一个放置电玩的多媒体休闲室，馆方也充分的利用这些场地举办论坛、表演、讲座等活动。</p><p><img src="/旅行/世界上十大图书馆之一——维多利亚州立图书馆/5.jpg" alt=""></p><p>除了丰富的藏书外，馆内还有陈列油画、雕像等艺术品，是一个集学习、哲学、科学及艺术的殿堂，在此不仅仅为学生、作家和爱思考的人提供一个便利的资源中心，它也是维多利亚州人文历史的主要记载地。</p><p>大部分游客都是为了馆内的圆顶阅览室而来，这部分于1913年开放，其八角空间可容纳一万本书及五百位以上的阅览者。</p><p><img src="/旅行/世界上十大图书馆之一——维多利亚州立图书馆/6.jpg" alt=""></p><p>阅览室上方的圆顶，采用自然透光的设计，1913年由三位建筑师Bates、Peebles、Smarts的设计，仿效英国图书馆The British Library和华盛顿国会图书馆Library of Congress的圆顶。</p><p><img src="/旅行/世界上十大图书馆之一——维多利亚州立图书馆/7.jpg" alt=""></p><p>楼梯旁还保留着早期的旋转楼梯，但现今已不再使用。</p><p>在图书馆的顶楼还有一幅三公尺高的莎士比亚之窗Shakespeare window，是澳大利亚第一幅人物像彩色玻璃拼花窗Stained glass window。</p><p><img src="/旅行/世界上十大图书馆之一——维多利亚州立图书馆/8.jpg" alt=""></p><p>墨尔本能有个这么美的图书馆实在太幸运了，若是有机会来到墨尔本的话一定要来这走走。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;维多利亚州立图书馆State Library of Victoria位于墨尔本的市中心，地理位置绝佳，就在热闹的Melbourne Central车站正对面。&lt;/p&gt;
&lt;p&gt;在图￼书馆前方大草皮上是大家歇息的好去处，只要有太阳的时候，墨尔本人是绝对不会错过在这里晒日光浴的任
      
    
    </summary>
    
      <category term="旅行" scheme="http://blog.ozairs.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
      <category term="澳洲" scheme="http://blog.ozairs.com/tags/%E6%BE%B3%E6%B4%B2/"/>
    
  </entry>
  
  <entry>
    <title>墨尔本斯巴达挑战赛侧记</title>
    <link href="http://blog.ozairs.com/uncategorized/%E5%A2%A8%E5%B0%94%E6%9C%AC%E6%96%AF%E5%B7%B4%E8%BE%BE%E6%8C%91%E6%88%98%E8%B5%9B%E4%BE%A7%E8%AE%B0/"/>
    <id>http://blog.ozairs.com/uncategorized/墨尔本斯巴达挑战赛侧记/</id>
    <published>2019-03-02T10:54:01.000Z</published>
    <updated>2019-03-02T11:33:31.534Z</updated>
    
    <content type="html"><![CDATA[<p>今年是墨尔本斯巴达越野挑战赛正赛的日子，虽然墨尔本的气温仍然居高不下，但是依然无法抵挡大批粉丝对于这项赛事的热情。今年的比赛得到了凯西市政府的大力支持，作为东道主，我也有幸作为志愿者参加了这项一年一度的重要赛事。</p><p><img src="/uncategorized/墨尔本斯巴达挑战赛侧记/0.pic.jpg" alt="Tooradin Estate停车场"></p><p>【赛事的主旨】</p><p>今年的墨尔本斯巴达挑战赛，是首次在凯西市举办，在Tooradin Estate的一个史诗般的新场地中，选手们有机会穿越泥泞，跳过火，征服障碍。</p><p>斯巴达挑战的宗旨，就是要让选手们组成一个团队或独自行进，并找出像斯巴达一样参加比赛意味着什么通过挑战赛，选手们将会看到自己征服障碍，如奥林巴斯，长矛，大力神升降机，戒指等等！</p><p>【赛事的类型】</p><p>1、5公里竞速赛</p><p>这是斯巴达挑战赛最短的距离，选手们需要翻越20-23 障碍。比赛适合各级运动员使用; 从斯巴达的第一次选手到经验丰富的选手。</p><p><img src="/uncategorized/墨尔本斯巴达挑战赛侧记/2.pic.jpg" alt="5km竞速赛-1"></p><p>2、斯巴达超级赛，13公里，24-29 障碍</p><p>这是斯巴达挑战赛中距离赛事。由于比竞速赛的距离更长，障碍更多，超级赛将测试您的耐力，毅力和勇气。这个13公里的超级大道包含超过25个特色斯巴达障碍物，通过更加坚固和更加崎岖的地形。</p><p><img src="/uncategorized/墨尔本斯巴达挑战赛侧记/3.pic.jpg" alt="13km竞速赛"></p><p>3、2合1挑战赛</p><p>在同一天同时参加超级赛和竞速赛，并节省一些现金。通过获得竞速赛和超级赛奖牌，你将成为Spartan Trifecta的三分之二！</p><p>4、儿童挑战赛</p><p>斯巴达挑战赛都是为了让自己变得泥泞而且充满乐趣！赛事的使命是鼓励孩子们出去，活跃，享受自己。这就是为什么我们的斯巴达儿童比赛鼓励年轻的斯巴达人在非竞争，安全和支持的环境中拥有一大堆泥泞的乐趣来征服他们的目标！孩子们会跑步，平衡，走路，爬行，爬上充满乐趣的障碍课程，帮助他们了解成为斯巴达人的感受！比赛经过专门设计，适合所有年龄段和健身水平的孩子。</p><p><img src="/uncategorized/墨尔本斯巴达挑战赛侧记/4.pic.jpg" alt="儿童挑战赛"></p><p>斯巴达儿童挑战赛是1-2公里纯净的泥泞快乐。所有障碍都是成人障碍物的微型版本，并包含巨大的充气滑梯等附加功能，让孩子在参赛过程中，享受赛事带来的最大快乐。</p><p>孩子们可以进入两个不同的类别。有3到8岁的Spartan Juniors（完成1节课程）和9-13岁（完成2圈）的Big Kids类别。</p><p>成年人可以选择跟随课程并帮助他们的孩子。父母也可以选择与孩子或观众一起跑步。</p><p>【参赛观感】</p><p>今天虽然又是一个炎热的酷暑，特别是挑战赛的过程中，选手们要走草地，过泥塘，翻越各种障碍，可以说比赛是对身体机能的一次极限挑战，也是对于意志品质的一次终极考验。只有克服了身体和意志的障碍，才能成为一名真正的斯巴达勇士。</p><p>很荣幸今天能作为志愿者，参加斯巴达挑战赛正赛。作为斯巴达竞赛的志愿者，虽然牺牲了周末的时间，但是能有机会感受到斯巴达赛及选手们冲天的参赛热情，并且能够参与到比赛中，让选手和和观众们拥有史诗般的体验，也算是一种难得而又珍贵的体验了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年是墨尔本斯巴达越野挑战赛正赛的日子，虽然墨尔本的气温仍然居高不下，但是依然无法抵挡大批粉丝对于这项赛事的热情。今年的比赛得到了凯西市政府的大力支持，作为东道主，我也有幸作为志愿者参加了这项一年一度的重要赛事。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uncategorize
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://blog.ozairs.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于自己你需要知道的10件事</title>
    <link href="http://blog.ozairs.com/uncategorized/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%B7%B1%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B-1/"/>
    <id>http://blog.ozairs.com/uncategorized/关于自己你需要知道的10件事-1/</id>
    <published>2019-03-01T10:42:42.000Z</published>
    <updated>2019-03-01T10:45:18.793Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uncategorized/关于自己你需要知道的10件事-1/1.jpeg" alt=""></p><p>我最近在INC发现了这篇文章，并且非常喜欢文中提到的挑战自己的方式，你是否问过自己以下这些棘手的问题。</p><p>无论我们的年龄，在生命的每个阶段，我们都应该花点时间进行评估，进行自我评估。我们应该知道我们是谁，理解我们想要什么。我们应该问自己一些棘手的问题，清楚地看到自己，并在必要时进行调整。这并不能保证成功，但它可以保证您对自己的生活方式感到满意。以下是我们应该始终能够对自己说的一些事情：</p><p>\1.  <strong>我</strong>遵从我内心的声音。即使有更轻松的选择，我也相信自己内心的声音能够引导我。我做了正确的事情，我忠于自己。</p><p>\2. <strong>我</strong>总是很积极。我把每一种情况视为祝福或教训。我一直保持着希望和乐观的态度。</p><p>\3. <strong>我很负责</strong>。我已经获得了信任，并对自己负责。我没有找借口，也没有责备别人。我是演出的明星，我很尊重我。</p><p>4.<strong>我很感激</strong>。我很感激我的生命。每个开门和关门，我都很感激。我很感激未来的希望。</p><p>\5. <strong>我选择原谅</strong>。我已经原谅了任何冤枉我的人。我原谅，因为我永远无法完全理解他们的处境，因为抱怨只会让我失望。</p><p>\6. <strong>我不留遗憾</strong>。好的，坏的，或者其他的，我永远不会后悔任何机会，即使结果很糟糕。我一直爱着，微笑，并尽我所能地生活，我永远不会后悔。</p><p>\7.  <strong>我对自己诚实</strong>。我能够看着镜子里的脸，告诉他们真相。我是谁，我想成为谁，我喜欢什么，想要改变什么，我在哪里以及我想去哪里。这就是梦想成为现实的方式。</p><p>\8. <strong>我为自己感到骄傲</strong>。我为自己的成就感到自豪。大多数情况下，我为我这个人感到骄傲。最后，我会因为善良，诚实，勤奋，奉献和公平的人而被人们铭记。</p><p>\9. <strong>我不是一个轻言放弃的人</strong>。我不说，’我做不到’。我从不放弃，我从不放弃。我全力以赴。</p><p>\10. <strong>我还没</strong>完。只要我有气息，我就会继续生活，笑，给予，并尝试。如果只是一个裂缝，总会有一扇门打开。</p><p>俗话说“我们必须先学会爱自己”。给自己一个休息时间。改变你的想法，试着去做到最好。</p><p>【The Original Article】I recently came across this article in INC and loved the way it challenged you to consider whether you had asked yourself the tough questions.</p><p>Regardless of our age, at each stage of life, we should take a moment to take stock, to do a self-evaluation. We should know who we are and understand what we want. We should ask ourselves the tough questions, see ourselves clearly, and make adjustments if necessary. This doesn’t guarantee success but it guarantees that you will feel good about how you are living your life. Here are some things we should always be able to say about ourselves:</p><p>\1.          <strong>I have followed my heart</strong>. I have trusted my inner voice to lead me even when there were easier roads. I have done the ‘right’ thing. I have been true to myself.</p><p>\2.          <strong>I have looked for the positive</strong>. I have treated every situation as a blessing or a lesson. I have kept hope and optimism on the forefront.</p><p>\3.          <strong>I am responsible</strong>. I have taken credit and held myself accountable. I’ve made no excuses, nor blamed another. I am the star of my show, and I own up to me.</p><p>\4.          <strong>I am grateful</strong>. I am grateful for the life I’ve been given. I’m grateful for every opened and closed door. I am grateful for the hope of more to come.</p><p>\5.          <strong>I have forgiven</strong>. I have forgiven any and everyone who has wronged me. I forgive because I can never fully understand their situation and because holding a grudge only holds me back.</p><p>\6.          <strong>I have no regrets</strong>. Good, bad, or otherwise, I will never regret any opportunity, even if it turned out badly. I have loved, laughed, and lived to the best of my ability, and I will never be sorry.</p><p>\7.          <strong>I am honest with myself</strong>. I am able to look at the face in the mirror and tell them the truth. Who I am and who I want to be, what I love and what I want to change, where I am and where I want to go. This is how dreams become reality.</p><p>\8.          <strong>I am proud of myself</strong>. I am proud of my accomplishments. Mostly, I am proud of the person I am. In the end, I will be remembered for the kind, honest, hard-working, giving, and fair person that I am.</p><p>\9.          <strong>I am not a quitter</strong>. I do not say, ‘I can’t’. I never give up, and I never give in. I give my all to every endeavour.</p><p>\10.       <strong>I am not finished</strong>. As long as I have breath, I will continue to live and laugh and give, and try. There is always a door that is open if only just a crack.</p><p>As the old saying goes, “we must first love ourselves”. Give yourself a break. Change what you, and be the best you can be.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/uncategorized/关于自己你需要知道的10件事-1/1.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我最近在INC发现了这篇文章，并且非常喜欢文中提到的挑战自己的方式，你是否问过自己以下这些棘手的问题。&lt;/p&gt;
&lt;p&gt;无论我们的年龄，在生命的每
      
    
    </summary>
    
    
      <category term="励志" scheme="http://blog.ozairs.com/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>澳洲日记：班吉尔广场（Bunji Place)一览</title>
    <link href="http://blog.ozairs.com/%E6%97%85%E8%A1%8C/%E6%BE%B3%E6%B4%B2%E6%97%A5%E8%AE%B0%EF%BC%9A%E7%8F%AD%E5%90%89%E5%B0%94%E5%B9%BF%E5%9C%BA%EF%BC%88Bunji-Place-%E4%B8%80%E8%A7%88/"/>
    <id>http://blog.ozairs.com/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/</id>
    <published>2019-02-23T23:19:33.000Z</published>
    <updated>2019-03-08T23:51:02.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="班吉尔广场（Bunjil-Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。"><a href="#班吉尔广场（Bunjil-Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。" class="headerlink" title="班吉尔广场（Bunjil Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。"></a>班吉尔广场（Bunjil Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。</h3><h3 id="2017年10月29日，班吉尔广场正式对外开放。2019年2月14日，我第一次遇见班吉尔广场，趁着清晨游客较少的时段，比较仔细地欣赏了一番，感触颇多。"><a href="#2017年10月29日，班吉尔广场正式对外开放。2019年2月14日，我第一次遇见班吉尔广场，趁着清晨游客较少的时段，比较仔细地欣赏了一番，感触颇多。" class="headerlink" title="2017年10月29日，班吉尔广场正式对外开放。2019年2月14日，我第一次遇见班吉尔广场，趁着清晨游客较少的时段，比较仔细地欣赏了一番，感触颇多。"></a>2017年10月29日，班吉尔广场正式对外开放。2019年2月14日，我第一次遇见班吉尔广场，趁着清晨游客较少的时段，比较仔细地欣赏了一番，感触颇多。</h3><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323c00001bbbb14e01d10dde0.jpg-mobile.png" alt=""></p><h3 id="班吉尔广场的正面，“远看”似乎并不十分“起眼”，——这是澳洲很多公共建筑的共同特征，需要“近观”，才能发现它的“宏伟”与“壮丽”。"><a href="#班吉尔广场的正面，“远看”似乎并不十分“起眼”，——这是澳洲很多公共建筑的共同特征，需要“近观”，才能发现它的“宏伟”与“壮丽”。" class="headerlink" title="班吉尔广场的正面，“远看”似乎并不十分“起眼”，——这是澳洲很多公共建筑的共同特征，需要“近观”，才能发现它的“宏伟”与“壮丽”。"></a>班吉尔广场的正面，“远看”似乎并不十分“起眼”，——这是澳洲很多公共建筑的共同特征，需要“近观”，才能发现它的“宏伟”与“壮丽”。</h3><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323c00001b8791d021f2358b0.jpg-mobile.png" alt=""></p><h3 id="班吉尔广场的背面，比较内敛、含蓄的蓝灰色，闪烁着淡淡的蓝宝石般的光辉。"><a href="#班吉尔广场的背面，比较内敛、含蓄的蓝灰色，闪烁着淡淡的蓝宝石般的光辉。" class="headerlink" title="班吉尔广场的背面，比较内敛、含蓄的蓝灰色，闪烁着淡淡的蓝宝石般的光辉。"></a>班吉尔广场的背面，比较内敛、含蓄的蓝灰色，闪烁着淡淡的蓝宝石般的光辉。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323c000016af815ace3f013e9.jpg-mobile.png" alt=""></p><h3 id="班吉尔广场的正门，12米高大的透明玻璃幕墙，显示出一种坦诚开放、包容的姿态，欢迎来自四面八方的人们；向两翼竭力伸展的网状木质构架，给人一种展翅欲飞、努力向上的振奋。"><a href="#班吉尔广场的正门，12米高大的透明玻璃幕墙，显示出一种坦诚开放、包容的姿态，欢迎来自四面八方的人们；向两翼竭力伸展的网状木质构架，给人一种展翅欲飞、努力向上的振奋。" class="headerlink" title="班吉尔广场的正门，12米高大的透明玻璃幕墙，显示出一种坦诚开放、包容的姿态，欢迎来自四面八方的人们；向两翼竭力伸展的网状木质构架，给人一种展翅欲飞、努力向上的振奋。"></a>班吉尔广场的正门，12米高大的透明玻璃幕墙，显示出一种坦诚开放、包容的姿态，欢迎来自四面八方的人们；向两翼竭力伸展的网状木质构架，给人一种展翅欲飞、努力向上的振奋。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323c00001c96c11fd729a28a0.jpg-mobile.png" alt=""></p><h3 id="事实上，班吉尔广场之所以称为“Bunjil”，就是因为它的造型像征着澳洲土著的神鹰“Bunjil”，“Bunjil”被认为是澳洲土著的祖先之一，其原型是澳洲体型最大的猛禽“楔形尾鹰”。"><a href="#事实上，班吉尔广场之所以称为“Bunjil”，就是因为它的造型像征着澳洲土著的神鹰“Bunjil”，“Bunjil”被认为是澳洲土著的祖先之一，其原型是澳洲体型最大的猛禽“楔形尾鹰”。" class="headerlink" title="事实上，班吉尔广场之所以称为“Bunjil”，就是因为它的造型像征着澳洲土著的神鹰“Bunjil”，“Bunjil”被认为是澳洲土著的祖先之一，其原型是澳洲体型最大的猛禽“楔形尾鹰”。"></a>事实上，班吉尔广场之所以称为“Bunjil”，就是因为它的造型像征着澳洲土著的神鹰“Bunjil”，“Bunjil”被认为是澳洲土著的祖先之一，其原型是澳洲体型最大的猛禽“楔形尾鹰”。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c44738be000001ccd451a012101dbc.jpg-mobile.png" alt=""></p><h3 id="从正门高大的玻璃幕墙内，向外观看班吉尔广场的露天剧场，气势宏大，视野开阔，赏心悦目。"><a href="#从正门高大的玻璃幕墙内，向外观看班吉尔广场的露天剧场，气势宏大，视野开阔，赏心悦目。" class="headerlink" title="从正门高大的玻璃幕墙内，向外观看班吉尔广场的露天剧场，气势宏大，视野开阔，赏心悦目。"></a>从正门高大的玻璃幕墙内，向外观看班吉尔广场的露天剧场，气势宏大，视野开阔，赏心悦目。</h3><h3 id="班吉尔广场室内共三层，这是贯通一二三层的主大厅，两根巨大的网状艺术支柱支撑起整座屋顶，——如果说“Bunjil-Place”象征着一只展翅欲飞的“神鹰”，那么这两根巨大的支柱就是“神鹰”的双腿。大厅底层有访客中心接待处、图书馆接待处与入口、剧院售票处与入口、表演中心接待处与入口，以及通向二三楼的旋转式楼梯，场面宏大，手机只能拍出其中很一小部分。"><a href="#班吉尔广场室内共三层，这是贯通一二三层的主大厅，两根巨大的网状艺术支柱支撑起整座屋顶，——如果说“Bunjil-Place”象征着一只展翅欲飞的“神鹰”，那么这两根巨大的支柱就是“神鹰”的双腿。大厅底层有访客中心接待处、图书馆接待处与入口、剧院售票处与入口、表演中心接待处与入口，以及通向二三楼的旋转式楼梯，场面宏大，手机只能拍出其中很一小部分。" class="headerlink" title="班吉尔广场室内共三层，这是贯通一二三层的主大厅，两根巨大的网状艺术支柱支撑起整座屋顶，——如果说“Bunjil Place”象征着一只展翅欲飞的“神鹰”，那么这两根巨大的支柱就是“神鹰”的双腿。大厅底层有访客中心接待处、图书馆接待处与入口、剧院售票处与入口、表演中心接待处与入口，以及通向二三楼的旋转式楼梯，场面宏大，手机只能拍出其中很一小部分。"></a>班吉尔广场室内共三层，这是贯通一二三层的主大厅，两根巨大的网状艺术支柱支撑起整座屋顶，——如果说“Bunjil Place”象征着一只展翅欲飞的“神鹰”，那么这两根巨大的支柱就是“神鹰”的双腿。大厅底层有访客中心接待处、图书馆接待处与入口、剧院售票处与入口、表演中心接待处与入口，以及通向二三楼的旋转式楼梯，场面宏大，手机只能拍出其中很一小部分。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d00001413d79c011003470.jpg-mobile.png" alt=""></p><h3 id="从另一个角度看班吉尔广场主大厅的内部，画面左边是两根网状艺术支柱之一，右边是剧院售票处与入口，正前方是访客中心接待处（太远了，看不太清楚）。时间是2月14日星期天早上九点半，班吉尔广场刚刚开门，游客不多。"><a href="#从另一个角度看班吉尔广场主大厅的内部，画面左边是两根网状艺术支柱之一，右边是剧院售票处与入口，正前方是访客中心接待处（太远了，看不太清楚）。时间是2月14日星期天早上九点半，班吉尔广场刚刚开门，游客不多。" class="headerlink" title="从另一个角度看班吉尔广场主大厅的内部，画面左边是两根网状艺术支柱之一，右边是剧院售票处与入口，正前方是访客中心接待处（太远了，看不太清楚）。时间是2月14日星期天早上九点半，班吉尔广场刚刚开门，游客不多。"></a>从另一个角度看班吉尔广场主大厅的内部，画面左边是两根网状艺术支柱之一，右边是剧院售票处与入口，正前方是访客中心接待处（太远了，看不太清楚）。时间是2月14日星期天早上九点半，班吉尔广场刚刚开门，游客不多。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d0000113231e13d30e1c46.jpg-mobile.png" alt=""></p><h3 id="班吉尔广场主大厅天花板仰视，全部网状木质结构，朴实、明快、简谐、对称。"><a href="#班吉尔广场主大厅天花板仰视，全部网状木质结构，朴实、明快、简谐、对称。" class="headerlink" title="班吉尔广场主大厅天花板仰视，全部网状木质结构，朴实、明快、简谐、对称。"></a>班吉尔广场主大厅天花板仰视，全部网状木质结构，朴实、明快、简谐、对称。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d00001a51d172bc510fc00.jpg-mobile.png" alt=""></p><h3 id="位于班吉尔广场底层，具有800个观众席的现代风格剧场，据说音响效果达到世界一流水准。"><a href="#位于班吉尔广场底层，具有800个观众席的现代风格剧场，据说音响效果达到世界一流水准。" class="headerlink" title="位于班吉尔广场底层，具有800个观众席的现代风格剧场，据说音响效果达到世界一流水准。"></a>位于班吉尔广场底层，具有800个观众席的现代风格剧场，据说音响效果达到世界一流水准。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4457d23500001d55210d810e0195c.jpg-mobile.png" alt=""></p><h3 id="墨尔本号称“艺术之都”，戏院、剧场特多，班吉尔广场剧院似乎主要面对的是儿童与青少年观众，11月19日星期天上演的是儿童剧《舞蹈学校（School-of-Dance）》。"><a href="#墨尔本号称“艺术之都”，戏院、剧场特多，班吉尔广场剧院似乎主要面对的是儿童与青少年观众，11月19日星期天上演的是儿童剧《舞蹈学校（School-of-Dance）》。" class="headerlink" title="墨尔本号称“艺术之都”，戏院、剧场特多，班吉尔广场剧院似乎主要面对的是儿童与青少年观众，11月19日星期天上演的是儿童剧《舞蹈学校（School of Dance）》。"></a>墨尔本号称“艺术之都”，戏院、剧场特多，班吉尔广场剧院似乎主要面对的是儿童与青少年观众，11月19日星期天上演的是儿童剧《舞蹈学校（School of Dance）》。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c44581b6200001efb51370191030d0.jpg-mobile.png" alt=""></p><h3 id="班吉尔广场还有一个艺术画廊，这也是“艺术之都”墨尔本的特色，几乎可以肯定地说，在墨尔本，凡有博物馆、图书馆的地方必有艺术画廊，美术馆就更不必待言了。"><a href="#班吉尔广场还有一个艺术画廊，这也是“艺术之都”墨尔本的特色，几乎可以肯定地说，在墨尔本，凡有博物馆、图书馆的地方必有艺术画廊，美术馆就更不必待言了。" class="headerlink" title="班吉尔广场还有一个艺术画廊，这也是“艺术之都”墨尔本的特色，几乎可以肯定地说，在墨尔本，凡有博物馆、图书馆的地方必有艺术画廊，美术馆就更不必待言了。"></a>班吉尔广场还有一个艺术画廊，这也是“艺术之都”墨尔本的特色，几乎可以肯定地说，在墨尔本，凡有博物馆、图书馆的地方必有艺术画廊，美术馆就更不必待言了。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d00001dd7c3ed01ec4c180.jpg-mobile.png" alt=""></p><h3 id="艺术画廊举行的“班吉尔广场建筑艺术”的画展。"><a href="#艺术画廊举行的“班吉尔广场建筑艺术”的画展。" class="headerlink" title="艺术画廊举行的“班吉尔广场建筑艺术”的画展。"></a>艺术画廊举行的“班吉尔广场建筑艺术”的画展。</h3><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d0000156d01d39f73729c0.jpg-mobile.png" alt=""></p><h3 id="凯西市图书馆入口处的接待大厅。"><a href="#凯西市图书馆入口处的接待大厅。" class="headerlink" title="凯西市图书馆入口处的接待大厅。"></a>凯西市图书馆入口处的接待大厅。</h3><h3 id="班吉尔广场的主要功能之一就是公共图书馆，大约三分之一的空间（包括一二三层）为凯西市图书馆所有，占地面积是旧凯西市图书馆的两倍还多，凯西市图书馆也因此更名为“班吉尔图书馆”。"><a href="#班吉尔广场的主要功能之一就是公共图书馆，大约三分之一的空间（包括一二三层）为凯西市图书馆所有，占地面积是旧凯西市图书馆的两倍还多，凯西市图书馆也因此更名为“班吉尔图书馆”。" class="headerlink" title="班吉尔广场的主要功能之一就是公共图书馆，大约三分之一的空间（包括一二三层）为凯西市图书馆所有，占地面积是旧凯西市图书馆的两倍还多，凯西市图书馆也因此更名为“班吉尔图书馆”。"></a>班吉尔广场的主要功能之一就是公共图书馆，大约三分之一的空间（包括一二三层）为凯西市图书馆所有，占地面积是旧凯西市图书馆的两倍还多，凯西市图书馆也因此更名为“班吉尔图书馆”。</h3><h3 id="澳洲具有众多的大大小小的图书馆，所有的公共图书馆均免费向公众开放，是澳洲的文化特色之一；澳洲人重视阅读、喜爱阅读，从“班吉尔图书馆”可见一斑。"><a href="#澳洲具有众多的大大小小的图书馆，所有的公共图书馆均免费向公众开放，是澳洲的文化特色之一；澳洲人重视阅读、喜爱阅读，从“班吉尔图书馆”可见一斑。" class="headerlink" title="澳洲具有众多的大大小小的图书馆，所有的公共图书馆均免费向公众开放，是澳洲的文化特色之一；澳洲人重视阅读、喜爱阅读，从“班吉尔图书馆”可见一斑。"></a>澳洲具有众多的大大小小的图书馆，所有的公共图书馆均免费向公众开放，是澳洲的文化特色之一；澳洲人重视阅读、喜爱阅读，从“班吉尔图书馆”可见一斑。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d000017120702b76ab1790.jpg-mobile.png" alt=""></p><h3 id="从图书馆二楼俯瞰一楼接待大厅。"><a href="#从图书馆二楼俯瞰一楼接待大厅。" class="headerlink" title="从图书馆二楼俯瞰一楼接待大厅。"></a>从图书馆二楼俯瞰一楼接待大厅。</h3><p>### </p><h3 id="图书馆一楼除了接待大厅，还开辟了若干不同类型的小型阅览室。"><a href="#图书馆一楼除了接待大厅，还开辟了若干不同类型的小型阅览室。" class="headerlink" title="图书馆一楼除了接待大厅，还开辟了若干不同类型的小型阅览室。"></a>图书馆一楼除了接待大厅，还开辟了若干不同类型的小型阅览室。</h3><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d0000148711e721eb317ef.jpg-mobile.png" alt=""></p><h3 id="图书馆二楼大厅，包括一个开放式的多功能演讲厅，以及一排排摆满各种书籍的书架、一个个桌椅齐全、采光优良的阅览室。见微知著，图书馆内的书架都不高，书籍触手可及，也体现了图书馆处处为读者着想的理念。"><a href="#图书馆二楼大厅，包括一个开放式的多功能演讲厅，以及一排排摆满各种书籍的书架、一个个桌椅齐全、采光优良的阅览室。见微知著，图书馆内的书架都不高，书籍触手可及，也体现了图书馆处处为读者着想的理念。" class="headerlink" title="图书馆二楼大厅，包括一个开放式的多功能演讲厅，以及一排排摆满各种书籍的书架、一个个桌椅齐全、采光优良的阅览室。见微知著，图书馆内的书架都不高，书籍触手可及，也体现了图书馆处处为读者着想的理念。"></a>图书馆二楼大厅，包括一个开放式的多功能演讲厅，以及一排排摆满各种书籍的书架、一个个桌椅齐全、采光优良的阅览室。见微知著，图书馆内的书架都不高，书籍触手可及，也体现了图书馆处处为读者着想的理念。</h3><h3 id="图书馆二楼的多功能演讲厅，座位的设计十分有趣，与通往三楼的楼梯浑然一体，左侧有一个两米来宽的人行通道，才是真正的楼梯。"><a href="#图书馆二楼的多功能演讲厅，座位的设计十分有趣，与通往三楼的楼梯浑然一体，左侧有一个两米来宽的人行通道，才是真正的楼梯。" class="headerlink" title="图书馆二楼的多功能演讲厅，座位的设计十分有趣，与通往三楼的楼梯浑然一体，左侧有一个两米来宽的人行通道，才是真正的楼梯。"></a>图书馆二楼的多功能演讲厅，座位的设计十分有趣，与通往三楼的楼梯浑然一体，左侧有一个两米来宽的人行通道，才是真正的楼梯。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d00001bb3914fc11889bd0.jpg-mobile.png" alt=""></p><h3 id="从图书馆三楼俯瞰二楼阅览室，各部分既相互连通又相对独立，加上明亮温馨的柔光，给读者营造出安静舒适的阅读空间。"><a href="#从图书馆三楼俯瞰二楼阅览室，各部分既相互连通又相对独立，加上明亮温馨的柔光，给读者营造出安静舒适的阅读空间。" class="headerlink" title="从图书馆三楼俯瞰二楼阅览室，各部分既相互连通又相对独立，加上明亮温馨的柔光，给读者营造出安静舒适的阅读空间。"></a>从图书馆三楼俯瞰二楼阅览室，各部分既相互连通又相对独立，加上明亮温馨的柔光，给读者营造出安静舒适的阅读空间。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d000016c3319e76256db50.jpg-mobile.png" alt=""></p><h3 id="图书馆三楼的阅览室，空间的划分又有自己不同的特色，但总体上仍保持了各部分既相互连通又相对独立的风格，读者能够快速穿梭游走其间，查找图书资料十分方便，同时又保证了阅览室内潜心阅读的人尽可能不受干扰。身临其境，不知不觉就会被无形中“如饥似渴”的阅读氛围所感染。"><a href="#图书馆三楼的阅览室，空间的划分又有自己不同的特色，但总体上仍保持了各部分既相互连通又相对独立的风格，读者能够快速穿梭游走其间，查找图书资料十分方便，同时又保证了阅览室内潜心阅读的人尽可能不受干扰。身临其境，不知不觉就会被无形中“如饥似渴”的阅读氛围所感染。" class="headerlink" title="图书馆三楼的阅览室，空间的划分又有自己不同的特色，但总体上仍保持了各部分既相互连通又相对独立的风格，读者能够快速穿梭游走其间，查找图书资料十分方便，同时又保证了阅览室内潜心阅读的人尽可能不受干扰。身临其境，不知不觉就会被无形中“如饥似渴”的阅读氛围所感染。"></a>图书馆三楼的阅览室，空间的划分又有自己不同的特色，但总体上仍保持了各部分既相互连通又相对独立的风格，读者能够快速穿梭游走其间，查找图书资料十分方便，同时又保证了阅览室内潜心阅读的人尽可能不受干扰。身临其境，不知不觉就会被无形中“如饥似渴”的阅读氛围所感染。</h3><p>### </p><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d0000145d616a07e6bdbf0.jpg-mobile.png" alt=""></p><h3 id="从图书馆二楼阅览室眺望班吉尔广场外部环境，草地青青、绿树环绕，原有的水上运动中心（游泳馆）、儿童游乐场与新建的班吉尔广场浑然一体，对面的WestField购物中心则与班吉尔广场遥遥相望。"><a href="#从图书馆二楼阅览室眺望班吉尔广场外部环境，草地青青、绿树环绕，原有的水上运动中心（游泳馆）、儿童游乐场与新建的班吉尔广场浑然一体，对面的WestField购物中心则与班吉尔广场遥遥相望。" class="headerlink" title="从图书馆二楼阅览室眺望班吉尔广场外部环境，草地青青、绿树环绕，原有的水上运动中心（游泳馆）、儿童游乐场与新建的班吉尔广场浑然一体，对面的WestField购物中心则与班吉尔广场遥遥相望。"></a>从图书馆二楼阅览室眺望班吉尔广场外部环境，草地青青、绿树环绕，原有的水上运动中心（游泳馆）、儿童游乐场与新建的班吉尔广场浑然一体，对面的WestField购物中心则与班吉尔广场遥遥相望。</h3><p>### </p><h3 id="本文一开头便说“班吉尔广场”是大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。但中国大陆的“文化宫”，“文化”二字名不符实，说是“文化”实则“娱乐”，称之为“娱乐宫”更加贴切，而且商业气息越来越浓。澳洲墨尔本的这座“班吉尔广场”，堪称真正意义上的“文化宫”，集图书、戏剧、音乐、美术于一身，为凯西市市民提供了一个文化与娱乐活动的场所；无论外观还是内涵，“班吉尔广场”处处都体现出了浓厚的“文化”精神。"><a href="#本文一开头便说“班吉尔广场”是大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。但中国大陆的“文化宫”，“文化”二字名不符实，说是“文化”实则“娱乐”，称之为“娱乐宫”更加贴切，而且商业气息越来越浓。澳洲墨尔本的这座“班吉尔广场”，堪称真正意义上的“文化宫”，集图书、戏剧、音乐、美术于一身，为凯西市市民提供了一个文化与娱乐活动的场所；无论外观还是内涵，“班吉尔广场”处处都体现出了浓厚的“文化”精神。" class="headerlink" title="本文一开头便说“班吉尔广场”是大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。但中国大陆的“文化宫”，“文化”二字名不符实，说是“文化”实则“娱乐”，称之为“娱乐宫”更加贴切，而且商业气息越来越浓。澳洲墨尔本的这座“班吉尔广场”，堪称真正意义上的“文化宫”，集图书、戏剧、音乐、美术于一身，为凯西市市民提供了一个文化与娱乐活动的场所；无论外观还是内涵，“班吉尔广场”处处都体现出了浓厚的“文化”精神。"></a>本文一开头便说“班吉尔广场”是大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。但中国大陆的“文化宫”，“文化”二字名不符实，说是“文化”实则“娱乐”，称之为“娱乐宫”更加贴切，而且商业气息越来越浓。澳洲墨尔本的这座“班吉尔广场”，堪称真正意义上的“文化宫”，集图书、戏剧、音乐、美术于一身，为凯西市市民提供了一个文化与娱乐活动的场所；无论外观还是内涵，“班吉尔广场”处处都体现出了浓厚的“文化”精神。</h3><p><img src="/旅行/澳洲日记：班吉尔广场（Bunji-Place-一览/c7c4455323d00001bdbd1e8117001b5c.jpg-mobile.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;班吉尔广场（Bunjil-Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫”。&quot;&gt;&lt;a href=&quot;#班吉尔广场（Bunjil-Place）位于东墨尔本的凯西市，是一处新建的大型公共文化娱乐建筑，类似于中国大陆的“文化宫
      
    
    </summary>
    
      <category term="旅行" scheme="http://blog.ozairs.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
      <category term="澳洲" scheme="http://blog.ozairs.com/tags/%E6%BE%B3%E6%B4%B2/"/>
    
  </entry>
  
  <entry>
    <title>Why do I need a cover letter</title>
    <link href="http://blog.ozairs.com/uncategorized/Why-do-I-need-a-cover-letter/"/>
    <id>http://blog.ozairs.com/uncategorized/Why-do-I-need-a-cover-letter/</id>
    <published>2019-02-23T12:03:18.000Z</published>
    <updated>2019-02-23T12:04:19.345Z</updated>
    
    <content type="html"><![CDATA[<p>If you have ever read one of the job ads I’ve posted, you would have seen my request for a cover letter. After reading some of the responses to that request, I’m sure the initial thought might have been, “Why the do I need a cover letter?”</p><p>There’s no doubt I have read a bucket load of cover letters. Those that I have read which are poor far outweigh those that are good. It’s like comparing the sheer size of Jupiter to the Forest Moon of Endor; small and non-existent. Many of you, I am sure, wonder why you should bother at all. I tend to agree if the purpose of your cover letter is to be general and vague. Believe it or not, there have been times when I have called a candidate on the strength of their cover letter, alone.</p><p>So, what makes one cover letter stand out over another in my opinion?</p><p>Before I get to that, I want to share an experience in my career that has led to my opinion and writing this blog post. Before establishing my recruitment business, I worked in IT as a BDM for over a decade. In that time, I worked on countless proposals for my customers. It was always a collaborative process. My job was to get the frame of the document and the requirements clear. I would engage experts to provide the technical content of our solution. I would speak to relevant internal teams and third parties around our commercial model. Once I had all the information I needed, there was only one thing left to do. I needed to write my executive summary.</p><p>I read a great book many years ago called Persuasive Business Proposals – Writing to Win More Customers, Clients, and Contracts by Tom Sant. On page 138, the chapter headed Executive Summary, the first line sets the theme of that chapter; <em>The executive summary is the single most important part of your proposal.</em> This line and the entire chapter changed how I wrote proposals forever. It resulted in me progressing to more shortlists and winning more deals. I even had a customer once ask me to write an executive summary to explain a proposal I hadn’t even written.</p><p>The very premise of an executive summary in a business proposal got me thinking how similar one is, or should be, to a cover letter. If you are selling yourself to an employer, should you treat your resume as a business proposal? If so, why are you not introducing your solution (you) to the hiring manager’s problem with an effective executive summary? Tom goes on to say; <em>the executive summary is the only part that’s likely to be read by everybody involved in making the decision. In fact, it’s the only part of your proposal that some decision makers will read at all.</em> Now, I know in a recruitment process that’s unlikely to happen. Your resume will get read at some point, but there are some significant parallels to draw here.</p><p>If a stakeholder can progress a proposal based on an executive summary, your cover letter can make a big impact too.</p><p>I remember the old way I used to write a proposal and the way my customer would read them. I’d articulate my understanding of the problem and the outcome they were aiming to achieve. I’d relate their situation to the broader market. Our solution would then follow and the technical justification to support my claim. All important stuff. There would be pages and pages of diagrams, tables, jargon and blah blah blah. They’d read page after page until they found one of the most important things they were looking for to see if the discussion was worth continuing. The price. It was one of the most critical pieces of the puzzle, and yet I had it hidden in the shadows of my document. It’s no wonder people read my proposals like a Herald Sun reading sports enthusiast, from back to front.</p><p>The first time I put my pricing in the executive summary was a real test of nerves. I was shitting myself. “What if they reject us before even looking at our solution?” However, that didn’t happen. The most important information was at the front. Our understanding of the problem, the key themes of our solution to address it and the price. The rest of the business proposal became the supporting documentation. What I found was it gave us more air time with our customer than we had before. It demonstrated a level of confidence in our solution. I found that more customers wanted to get me in to discuss the detail of the solution.</p><p>A cover letter that addresses your customer, in the same way, will show the same confidence. It will demonstrate that you understand the role and why, in short, you are the right person for the job.</p><p>An executive summary always exists as a part of the business proposal document. You want to make sure it’s the first thing your customer reads. I think cover letters should be the same. Not a separate document, but the first page of your resume. If you have two documents, your cover letter is less likely to be read after the resume has been opened first.</p><p>Usually, recruiters will only attach one document with a candidate in their databases. For future roles, it’s beneficial to have everything in the same document. A cover letter in the resume will offer another page of content to where keywords can be found.  </p><p>Over my time, I have read countless cover letters that read like the narrative of a novel. Usually, they are one or two pages, densely populated with words. At first glance, they seem like a fair investment of time to read. However, for a cover letter, such a style doesn’t address the time-poor nature of your reader.</p><p>Make your cover letter one page, the first thing someone sees. Be specific. Use dot points and have them well spaced (one and a half spaces works well for me) so they are easy to read. When you find a job advertisement you want to apply for, focus on the requirements section. Ask yourself, “what are the three critical things I think these guys are looking for?” Those lines will be explicit in the skill or experience they’re after. This is what you should prioritise and address in your cover letter. Don’t bother with the general requirements as you’ll only respond with general statements. These are the requirements like ‘excellent communication skills’ or ‘works well in a team.’ These things you can demonstrate in an interview. A good cover letter cuts specific words or phrases out of the advertisement. They do this, so it couldn’t be any clearer what they are trying to address. It’s a risk leaving it to chance that your audience will be able to interpret your resume in the way you want. This is where you should help them out. Point directly to the experience or skill. Say, “there, that’s where I did it!” And point to it from your cover letter.</p><p>Being able to highlight what you think is important will help a recruiter find what they are looking for. However, if anything, it will help you qualify if, in fact, you are right for the job.</p><p>The role of a recruitment consultant is not easy. Many of us are working on ten, twenty, even more positions at a given time. If you consider putting forward three or four candidates per role, that’s a lot to manage. We coordinate client briefings, write advertisements and drive proactive campaigns. We accept applications, conduct phone screenings and send out rejection emails. We organise interviews, build shortlists, lock in candidates to meet with clients. We help with salary negotiations, references and sending out offers. And all the time, keep our bosses off our backs maintaining weekly KPI’s. It ain’t easy, and we’re often left feeling like a panting sheepdog at the end of each day. We receive hundreds of applications per role. With limited minutes in the day, the trick, as a recruiter, is to find what you need as quickly as possible. You want to find what you need, pick up the phone and progress the candidate to the next stage. It’s like a game of Crash Bandicoot; every requirement you meet grants you another few seconds of reading time. However, offer a passage of boring fluff, and you go backwards. And if you do make it to the end of the level, that’s when you get the call from a recruiter. They are ringing to have an in-depth discussion with you about your application.</p><p>There is no doubt that applying for a job through an advertisement is one of the hardest things to do. How do you stand out through words on a page? With so many lousy cover letters out there, I believe this is where you can answer that question. In the process, you will save the recruiter time trying to find what they’re looking for in your resume.</p><p>If you think of it like this: the executive summary, your cover letter, is the map to the island of your resume. Be bold and tell a hiring manager exactly where to find what they are looking for. Tell them why you are right for the job, and maybe, you’ll be that next candidate who stands out from the crowd.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have ever read one of the job ads I’ve posted, you would have seen my request for a cover letter. After reading some of the respon
      
    
    </summary>
    
    
      <category term="求职" scheme="http://blog.ozairs.com/tags/%E6%B1%82%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>Are Australia’s ‘secondary’ cities still a bargain, or have they run their race?</title>
    <link href="http://blog.ozairs.com/uncategorized/Are-Australia%E2%80%99s-%E2%80%98secondary%E2%80%99-cities-still-a-bargain-or-have-they-run-their-race/"/>
    <id>http://blog.ozairs.com/uncategorized/Are-Australia’s-‘secondary’-cities-still-a-bargain-or-have-they-run-their-race/</id>
    <published>2019-02-21T00:21:58.000Z</published>
    <updated>2019-02-21T00:39:45.031Z</updated>
    
    <content type="html"><![CDATA[<p>Australia’s capital cities may be coming off the boil, but what of their metropolitan siblings?</p><p>Secondary cities such as Geelong, Newcastle and Launceston have been on a run,  proving more affordable options for buyers after prices shot up in the closest major capital city. But with prices in some capitals declining – most notably in Sydney and Melbourne – some secondary cities now don’t look quite as good value as they did a year or two ago.</p><p><img src="/uncategorized/Are-Australia’s-‘secondary’-cities-still-a-bargain-or-have-they-run-their-race/Newcastle_NSW_iStock-993478226_asty9r.jpg" alt=""></p><p>The outlook for prices in major regional cities Newcastle, Wollongong, Gold Coast, Sunshine Coast, Geelong and Launceston is analysed below.</p><h4 id="Secondary-cities-boomed-after-major-cities-became-too-expensive"><a href="#Secondary-cities-boomed-after-major-cities-became-too-expensive" class="headerlink" title="Secondary cities boomed after major cities became too expensive"></a>Secondary cities boomed after major cities became too expensive</h4><p>When capital city prices become too expensive for first-home buyers and investors, aspiring capital city home buyers often look to nearby regional cities as a cheaper alternative. These secondary cities are often close enough to a major capital that people can commute to the capital city for work.</p><p>Price growth in major cities and secondary cities generally track pretty closely together, but sometimes with a delay of around a year. For some cities, the major city in some city-pairs can lead turning points in the price growth of the secondary city.</p><p>Sydneysiders consider Newcastle and Wollongong, Melburnians often look to Geelong, and Launceston, Tasmania’s second-largest city, is considered after Hobart. In Queensland, the typical house in Brisbane is cheaper than in the Gold Coast and the Sunshine Coast, but these coastal cities are both within commuting distance to Brisbane and are obvious alternatives to Queensland’s capital.</p><p>Property prices in Wollongong, Newcastle and Geelong began rising a year or two after Sydney and Melbourne property prices began taking off around 2013. Launceston house prices have increased significantly since 2017, a couple of years after Hobart’s price boom started in 2015. While price growth has been more subdued up north, Sunshine Coast and Gold Coast house prices have increased by more than those in Brisbane.</p><table><thead><tr><th>Notes: Capital city house prices are Australian Property Monitor city regions and are a stratified median price. Secondary cities are ABS Significant Urban Areas and are a raw median price.</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>Most secondary cities have experienced stronger house price growth than their nearest capital city</strong>Median house price, December quarter</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td><strong>2015</strong></td><td><strong>2016</strong></td><td><strong>2017</strong></td><td><strong>2018</strong></td><td><strong>Per cent change,**</strong>2015-2018**</td></tr><tr><td><strong>Sydney</strong></td><td><strong>$1,015,559</strong></td><td><strong>$1,131,882</strong></td><td><strong>$1,180,024</strong></td><td><strong>$1,062,619</strong></td><td><strong>5%</strong></td></tr><tr><td>Wollongong</td><td>$585,000</td><td>$665,000</td><td>$718,000</td><td>$705,000</td><td>21%</td></tr><tr><td>Newcastle</td><td>$453,000</td><td>$495,000</td><td>$535,000</td><td>$558,000</td><td>23%</td></tr><tr><td><strong>Melbourne</strong></td><td><strong>$718,853</strong></td><td><strong>$811,393</strong></td><td><strong>$909,463</strong></td><td><strong>$833,321</strong></td><td><strong>16%</strong></td></tr><tr><td>Geelong</td><td>$435,000</td><td>$465,000</td><td>$518,000</td><td>$557,500</td><td>28%</td></tr><tr><td><strong>Hobart</strong></td><td><strong>$347,841</strong></td><td><strong>$377,316</strong></td><td><strong>$440,970</strong></td><td><strong>$479,685</strong></td><td><strong>38%</strong></td></tr><tr><td>Launceston</td><td>$285,000</td><td>$285,000</td><td>$310,000</td><td>$344,000</td><td>21%</td></tr><tr><td><strong>Brisbane</strong></td><td><strong>$517,843</strong></td><td><strong>$546,984</strong></td><td><strong>$566,602</strong></td><td><strong>$566,058</strong></td><td><strong>9%</strong></td></tr><tr><td>Gold Coast</td><td>$545,000</td><td>$590,000</td><td>$620,000</td><td>$622,500</td><td>14%</td></tr><tr><td>Sunshine Coast</td><td>$540,000</td><td>$560,000</td><td>$615,000</td><td>$620,000</td><td>15%</td></tr></tbody></table><h4 id="What’s-in-store-for-secondary-cities-house-prices"><a href="#What’s-in-store-for-secondary-cities-house-prices" class="headerlink" title="What’s in store for secondary cities house prices?"></a>What’s in store for secondary cities house prices?</h4><p>Several indicators are used to predict price growth in secondary cities in the coming years.</p><p>The first method is <a href="http://petewargent.blogspot.com/2016/02/sydneybrisbane-house-price-ratio.html" target="_blank" rel="noopener">comparing</a> the ratio of the median price in a capital city with the secondary city’s median house price. The higher the capital city/secondary city price ratio, the more expensive the capital is compared to the secondary city (for example, a ratio of 2 indicates a typical house in the capital city is twice as expensive as the secondary city).</p><p>If a capital city/secondary city price ratio is below average, then this may indicate the secondary city is overvalued, suggesting the secondary city may see weaker price growth in the near future (and vice versa).</p><p>Buyer interest in an area – using changes in the number of views per listing from Domain’s website and apps, a leading indicator of future price growth – is also analysed. The economic outlook and job prospects in secondary cities, including the interconnectedness of the secondary city with the closest capital city, are also considered.</p><h5 id="Sydney-Wollongong"><a href="#Sydney-Wollongong" class="headerlink" title="Sydney-Wollongong"></a><strong>Sydney-Wollongong</strong></h5><p>While Wollongong’s economy is performing well, its prices are likely to stagnate or fall in the year ahead. The main reason is that the Sydney/Wollongong price ratio has fallen just below the 2010-2018 average and is back close to the level over the 2003-2013 period, where the median house price in Sydney prices was approximately 50 per cent higher than in Wollongong (see graph below). This fall in the price ratio was due to Sydney house prices falling by more than Wollongong house prices over the past two years.</p><p>While prices are likely to remain fairly stagnant over the next one to two years, Wollongong’s improving job market and growing links to Sydney should provide support to Wollongong property prices in the medium term.</p><p>Wollongong has seen <a href="https://www.rba.gov.au/speeches/2018/sp-so-2018-07-05.html" target="_blank" rel="noopener">strong jobs growth</a> in the past couple of years, with the unemployment rate for the Wollongong LGA falling from almost 7 per cent in 2016 to 4.5 per cent in 2018.</p><p>Wollongong is also a growing commuter town: in 2016, more than 21,000 people commuted from Wollongong to Sydney for work (the second largest regional city to capital city commuting pair, behind the Gold Coast to Brisbane). Wollongong and Illawarra residents may also benefit from the construction of the Badgerys Creek airport, which will be just over an hour’s drive from Wollongong, although construction is not expected to finish until 2026.</p><iframe scrolling="no" frameborder="0" allowfullscreen src="https://e.infogram.com/8caeb600-6ed2-4920-b7de-e5441e97c474?src=embed#async_embed" title="Newcastle and Wollongong" style="box-sizing: inherit; margin: 0px; padding: 0px; border: none; font: inherit; vertical-align: baseline; width: 549px; height: 1213px;"></iframe><h5 id="Sydney-Newcastle"><a href="#Sydney-Newcastle" class="headerlink" title="Sydney-Newcastle"></a><strong>Sydney-Newcastle</strong></h5><p>Newcastle is likely to see weak price growth or modest price falls in the next year or two. The Sydney/Newcastle price ratio has fallen below the 2010-2018 average as prices have grown slowly in Newcastle over the past year, but fell by 10 per cent in Sydney. This indicates Newcastle houses may be becoming overvalued compared to Sydney.</p><p>Buyer interest in Newcastle also appears to be waning. Domain’s views-per-listing measure for Newcastle fell by 2 per cent over 2018 as there were fewer buyers or they began looking elsewhere.</p><p>Another reason property price growth in Newcastle might be subdued is that there is no clear jobs boom on the horizon in the region. Newcastle’s unemployment rate has hovered around 6 per cent over the past couple of years, which is above Sydney’s unemployment rate of 4 per cent.</p><h5 id="Melbourne-Geelong"><a href="#Melbourne-Geelong" class="headerlink" title="Melbourne-Geelong"></a><strong>Melbourne-Geelong</strong></h5><p>The Melbourne/Geelong house price ratio fell significantly over 2018 as house prices <a href="https://www.domain.com.au/news/geelong-is-no-longer-the-states-hottest-real-estate-market-report-finds/" target="_blank" rel="noopener">increased in Geelong</a> and fell in Melbourne. The Melbourne/Geelong price ratio now sits at 1.5, meaning a typical house in Melbourne is 50 per cent more expensive than a typical Geelong house. The ratio is now below the 2010-2018 average.</p><p>With Melbourne house prices <a href="https://www.domain.com.au/news/domains-property-price-forecasts/" target="_blank" rel="noopener">forecast to continue falling</a> in 2019, Geelong’s relative affordability will decline further, so this may also see prices in Geelong stagnate or fall modestly. The Geelong market is already losing momentum, with house price growth slowing in Geelong over 2018 and Domain’s views-per-listing measure for Geelong falling at the end of 2018.</p><p>While the analysis of the Melbourne/Geelong price ratio suggests Geelong prices may fall, there are some promising signs for Geelong’s economy. Some sectors are seeing jobs growth, particularly <a href="https://www.smh.com.au/politics/federal/public-service-shrinks-to-smallest-size-in-12-years-20181019-p50ao7.html" target="_blank" rel="noopener">government</a> <a href="https://www.theage.com.au/national/victoria/one-council-area-s-growth-beats-three-biggest-regional-cities-combined-20180426-p4zbw8.html" target="_blank" rel="noopener">jobs</a>, and the city is on the <a href="https://www.abc.net.au/news/2018-11-22/victorian-manufacturing-jobs-rebound-into-high-tech-industy/10520342" target="_blank" rel="noopener">rebound</a> after the end of car manufacturing in 2016. Geelong’s unemployment rate has hovered around 6 per cent since 2016, but a very low unemployment rate in Melbourne of 4 per cent (down from 6 per cent over the past year) may help push Geelong’s unemployment rate lower.</p><p>Geelong is increasingly interconnected with Melbourne, which should see the Geelong property market become further tied to the Melbourne market. There are a number of transport infrastructure projects planned, or underway, that should improve travel times between Geelong and Melbourne, including the West Gate tunnel project and <a href="https://www.theage.com.au/national/victoria/geelong-to-melbourne-in-45-minutes-under-labor-s-regional-rail-plan-20181016-p509uu.html" target="_blank" rel="noopener">planned improvements</a> to the Geelong-Melbourne rail service. </p><p>These projects – combined with strong population growth and lots of homebuilding in Geelong and surrounding towns – mean the number of commuters from Geelong to Melbourne will likely increase from the 15,000 commuters in 2016.</p><iframe scrolling="no" frameborder="0" allowfullscreen src="https://e.infogram.com/a0fa6920-2802-432f-a65e-7ec8f978a273?src=embed#async_embed" title="Geelong and Launceston" style="box-sizing: inherit; margin: 0px; padding: 0px; border: none; font: inherit; vertical-align: baseline; width: 549px; height: 1189px;"></iframe><h5 id="Hobart-Launceston"><a href="#Hobart-Launceston" class="headerlink" title="Hobart-Launceston"></a><strong>Hobart-Launceston</strong></h5><p>An above-average Hobart/Launceston price ratio, increasing buyer interest and brighter economic prospects all indicate that Launceston may see further price growth over the next one to two years.</p><p>Price growth in Launceston, Tasmania’s <a href="https://blog.id.com.au/2018/population/population-trends/the-50-largest-cities-and-towns-in-australia-by-population-2018-update/" target="_blank" rel="noopener">second-largest city</a>, is closely correlated with price growth in Hobart. As Hobart’s prices boomed over the past few years – house prices have increased by more than 40 per cent since early 2015 – Launceston has become relatively cheaper. The Hobart/Launceston price ratio has increased, with a typical house in Hobart now 40 per cent more expensive than a typical Launceston house, up from a 20 per cent difference a few years ago. </p><p>But Launceston prices have also grown strongly since 2017, resulting in the price ratio stabilising, with the relative affordability of Launceston likely to encourage some investors and migrants to buy in Launceston instead of Hobart.</p><p>There is also growing buyer interest in Launceston. Views per listing in Launceston increased by about 40 per cent over 2018.</p><p>Launceston’s economic prospects are also improving. Unemployment recently fell to its lowest level in more than seven years, although it remains elevated at 6.8 per cent. Launceston is the subject of a <a href="https://citydeals.infrastructure.gov.au/launceston" target="_blank" rel="noopener">City Deal partnership</a> between federal, state and local governments to boost the Launceston economy. </p><p>The annual <a href="https://www.smh.com.au/entertainment/music/launceston-embraces-the-weird-as-mona-foma-finds-hew-home-20190121-p50sms.html" target="_blank" rel="noopener">MONA-FOMA festival</a> has been moved from Hobart to Launceston, so Launceston may benefit from some of the <a href="https://theconversation.com/hobarts-poorer-suburbs-are-missing-out-on-the-mona-effect-98003" target="_blank" rel="noopener">“MONA-effect”</a> that has boosted Hobart’s economy. A weaker Australian dollar should continue to support Tasmania’s economy by boosting <a href="https://www.abc.net.au/news/2018-07-23/tasmanias-business-outlook-good-in-deloitte-report/10025020" target="_blank" rel="noopener">tourist numbers</a> to Tasmania, as well as making Tasmania’s exports cheaper for overseas buyers.</p><p>Unlike other city-pairs considered in this article, few people travel between Launceston and Hobart for work (only 275 people commuted from Launceston to Hobart in 2016).</p><h5 id="Brisbane-Gold-Coast-and-Brisbane-Sunshine-Coast"><a href="#Brisbane-Gold-Coast-and-Brisbane-Sunshine-Coast" class="headerlink" title="Brisbane-Gold Coast and Brisbane-Sunshine Coast"></a><strong>Brisbane-Gold Coast and Brisbane-Sunshine Coast</strong></h5><p>Moderate price growth in the Gold Coast and the Sunshine Coast compared to slower price growth in Brisbane over the past two years has made a house in Brisbane relatively cheap compared to the coastal cities. The Brisbane/Gold Coast and Brisbane/Sunshine Coast price ratios have fallen and now sit below the 2010-2018 average, suggesting the coastal cities are slightly overvalued.</p><p>Because the smaller Queensland cities have a higher median price than Brisbane, the Brisbane/Gold Coast and Brisbane/Sunshine Coast price ratios are below 1, meaning a typical Brisbane house is about 10 per cent cheaper than in the Gold Coast and the Sunshine Coast.</p><p>South-east Queensland is highly interconnected. More than 30,000 people commuted from the Gold Coast to Brisbane for work in 2016, the biggest city pair in Australia, while 8400 people commuted from the Sunshine Coast to Brisbane. </p><p>Job prospects have been better in the Gold Coast than in the other cities. The Gold Coast’s unemployment rate has fallen from 5.5 per cent in late 2016 to 4.3 per cent at the end of 2018, whereas the unemployment rate hovered around 6 per cent in Brisbane in 2018 and increased to 6.5 per cent in 2018 in the Sunshine Coast.</p><p>The price ratios suggest Gold Coast and Sunshine Coast house prices may grow more slowly than <a href="https://www.domain.com.au/news/domains-property-price-forecasts/" target="_blank" rel="noopener">Brisbane in 2019</a>. But the Domain views-per-listing measure for the Gold Coast and the Sunshine Coast increased in the second half of 2018, and job prospects look better in the Gold Coast, suggesting there is scope for further price growth for both secondary cities.</p><iframe scrolling="no" frameborder="0" allowfullscreen src="https://e.infogram.com/39799caa-022c-431a-ab71-5410b72e0f93?src=embed#async_embed" title="Gold Coast and Sunshine Coast" style="box-sizing: inherit; margin: 0px; padding: 0px; border: none; font: inherit; vertical-align: baseline; width: 549px; height: 1213px;"></iframe><h4 id="The-outlook"><a href="#The-outlook" class="headerlink" title="The outlook"></a>The outlook</h4><p>Secondary cities are closely tied to the performance of their closest capital. Over the next few years, as jobs continue to <a href="https://grattan.edu.au/wp-content/uploads/2017/01/Productivity-and-geography-Productivity-Commission-Dec-2016.pdf" target="_blank" rel="noopener">concentrate</a> in Australia’s major cities, secondary cities will likely become even more closely linked to their nearest capital city.</p><p>The outlook for some capital cities is for further falls in 2019 before prices bottom-out later in the year, so the likelihood is secondary cities will see prices stagnate or fall in 2019, although Launceston looks to be an exception.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Australia’s capital cities may be coming off the boil, but what of their metropolitan siblings?&lt;/p&gt;
&lt;p&gt;Secondary cities such as Geelong, 
      
    
    </summary>
    
    
      <category term="Property" scheme="http://blog.ozairs.com/tags/Property/"/>
    
  </entry>
  
  <entry>
    <title>10 Most Popular DevOps Interview Questions and Answers</title>
    <link href="http://blog.ozairs.com/uncategorized/10-Most-Popular-DevOps-Interview-Questions-and-Answers/"/>
    <id>http://blog.ozairs.com/uncategorized/10-Most-Popular-DevOps-Interview-Questions-and-Answers/</id>
    <published>2019-02-20T08:28:55.000Z</published>
    <updated>2019-02-20T08:31:15.366Z</updated>
    
    <content type="html"><![CDATA[<p>Until recently, development engineers often worked in isolation, restricting their knowledge and skill sets to coding and testing, while operations engineers would focus on delivery and infrastructure configuration jobs, with minimal knowledge about software development.</p><p>However, with the fast-paced growth of the IT domain and technology advancements, the traditional approach of most IT companies has seen a paradigm shift. The culture of DevOps, although in its infancy, acts as the perfect bridge between IT development and operations and has become a popular methodology for software development in recent years.</p><p>An article entitled, “The DevOps Hiring Boom” claims that as many as 80 percent of Fortune 1000 organizations are expected to <a href="https://www.ca.com/us/rewrite/articles/devops/the-devops-hiring-boom-the-numbers-behind-the-numbers.html" target="_blank" rel="noopener">adopt DevOps by 2019</a>. A <a href="https://www.indeed.com/salaries/Development-Operations-Engineer-Salaries?from=serpsalaryblock" target="_blank" rel="noopener">survey conducted by Indeed.com</a>shows that the average annual salary of a DevOps engineer in the U.S. is approximately $123,439.</p><p>If you’ve started cross-training to prepare for development and operations roles in the IT industry, you know it’s a challenging field that will take some real preparation to break into. Here are some of the most common DevOps interview questions and answers that can help you while you prepare for DevOps roles in the industry.</p><p>Want to become certified DevOps Practitioner?</p><p><strong>Q1. What do you know about DevOps?</strong></p><p><strong>A1.</strong> Your answer must be simple and straightforward. Begin by explaining the growing importance of DevOps in the IT industry. Discuss how such an approach aims to synergize the efforts of the development and operations teams to accelerate the delivery of software products, with a minimal failure rate. Include how DevOps is a value-added practice, where development and operations engineers join hands throughout the product or service lifecycle, right from the design stage to the point of deployment.</p><p><strong>Q2.</strong> <strong>Why has DevOps gained prominence over the last few years?</strong></p><p><strong>A2.</strong> Before talking about the growing popularity of DevOps, discuss the current industry scenario. Begin with some examples of how big players such as <a href="https://techbeacon.com/10-companies-killing-it-devops" target="_blank" rel="noopener">Netflix and Facebook </a>are investing in DevOps to automate and accelerate application deployment and how this has helped them grow their business. Using Facebook as an example, you would point to  Facebook’s continuous deployment and code ownership models and how these have helped it scale up but ensure quality of experience at the same time. Hundreds of lines of code are implemented without affecting the quality, stability, and security.</p><p>Your next use case should be Netflix. This streaming and on-demand video company,  follows similar practices with fully automated processes and systems. Mention the user base of these two organizations: Facebook has 2 billion users while Netflix streams online content to more than 100 millions users worldwide.  These are great examples of how DevOps can help organizations to ensure higher success rates for releases, reduce lead time between bug fixes, streamline and continuous delivery through automation, and an overall reduction in manpower costs.</p><p><strong>Q3.</strong> <strong>Which are some of the most popular DevOps tools? Do you have experience working with any of these tools?</strong></p><p><strong>A3.</strong> The more popular DevOps tools include:</p><p>​        <strong>a.</strong> Selenium</p><p>​        <strong>b.</strong> Puppet</p><p>​        <strong>c.</strong> Chef</p><p>​        <strong>d.</strong> Git</p><p>​        <strong>e.</strong> Jenkins</p><p>​        <strong>f.</strong> Ansible</p><p>​        <strong>g.</strong> Docker</p><p>Want to master all these DevOps tools?</p><p>Thoroughly describe any tools that you are confident about, what it’s abilities are and why you prefer using it. For example, if you have expertise in Git, you would tell the interviewer that Git is a distributed Version Control System (VCS) tool that allows the user to track file changes and revert to specific changes when required. Discuss how Git’s distributed architecture gives it an added edge where developers make changes locally, and can have the entire project history on their local Git repositories, which can be later shared with other team members.</p><p>Now that you have mentioned VCS, be ready for the next obvious question.</p><p><strong>Q4.</strong> <strong>What is version control and why should VCS be used?</strong></p><p><strong>A4.</strong> Define version control and talk about how this system records any changes made to one or more files and saves them in a centralized repository. VCS tools will help you recall previous versions and perform the following:</p><ul><li>Go through the changes made over a period of time and check what works versus what doesn’t.</li><li>Revert specific files or specific projects back to an older version.</li><li>Examine issues or errors that have occurred due to a particular change.</li></ul><p>Using VCS gives developers the flexibility to simultaneously work on a particular file and all modifications can be logically combined later.</p><p><strong>Q5.</strong> <strong>Is there a difference between Agile and DevOps? If yes, please explain.</strong></p><p><strong>A5.</strong> As a DevOps engineer, interview questions like this are quite expected. Start by describing the obvious overlap between DevOps and Agile. Although implementation of DevOps is always in sync with Agile methodologies, there is a clear difference between the two. The principles of Agile are associated to seamless production or development of a piece of software. On the other hand, DevOps deals with development, followed by deployment of the software, ensuring faster turnaround time, minimum errors, and reliability.</p><p>If you are preparing for senior DevOps roles, prepare for these specific Chef DevOps interview questions.</p><p><strong>Q6.</strong> <strong>Why are configuration management processes and tools important?</strong></p><p><strong>A6.</strong> Talk about multiple software builds, releases, revisions, and versions for each software or testware that is being developed. Move on to explain the need for storing and maintaining data, keeping track of development builds and simplified troubleshooting. Don’t forget to mention the key CM tools that can be used to achieve these objectives. Talk about how tools like Puppet, Ansible, and Chef help in automating software deployment and configuration on several servers.</p><p><strong>Q7.</strong> <strong>How is Chef used as a CM tool?</strong></p><p><strong>A7.</strong> Chef is considered to be one of the preferred industry-wide CM tools. <a href="https://techbeacon.com/10-companies-killing-it-devops" target="_blank" rel="noopener">Facebook migrated its infrastructure</a> and backend IT to the Chef platform, for example. Explain how Chef  helps you to avoid  delays by automating processes. The scripts are written in Ruby. It can integrate with cloud-based platforms and configure new systems. It provides many libraries for infrastructure development that can later be deployed within a software. Thanks to its centralized management system, one Chef server is enough to be used as the center for deploying various policies.</p><p><strong>Q8.</strong> <strong>How would you explain the concept of “infrastructure as code” (IaC)?</strong></p><p><strong>A8.</strong> It is a good idea to talk about IaC as a concept, which is sometimes referred to as a programmable infrastructure, where infrastructure is perceived in the same way as any other code. Describe how the traditional approach to managing infrastructure is taking a back seat and how manual configurations, obsolete tools, and custom scripts are becoming less reliable. Next, accentuate the benefits of IaC and how changes to IT infrastructure can be implemented in a faster, safer and easier manner using IaC. Include the other benefits of  IaC like  applying regular unit testing and integration testing to infrastructure configurations, and maintaining up-to-date infrastructure documentation.</p><p>If you  have completed a <a href="https://www.simplilearn.com/cloud-computing/aws-devops-architect-certification-training" target="_blank" rel="noopener">certification on Amazon Web Services (AWS)</a>, and are interviewing for niche roles such as AWS-certified DevOps engineer, here are some AWS DevOps interview questions that you must be prepared for:</p><p><strong>Q9.</strong> <strong>What is the role of AWS in DevOps?</strong></p><p><strong>A9.</strong> When asked this question in an interview, get straight to the point by explaining that AWS is a cloud-based service provided by Amazon that ensures scalability through unlimited computing power and storage. AWS empowers IT enterprises to develop and deliver sophisticated products and deploy applications on the cloud. Some of its key services include Amazon CloudFront, Amazon SimpleDB, Amazon Relational Database Service, and Amazon Elastic Computer Cloud. Discuss the various cloud platforms and emphasize any big data projects that you have handled in the past using cloud infrastructure.  </p><p><strong>Q10.</strong> <strong>How is IaC implemented using AWS?</strong></p><p><strong>A10.</strong> Start by talking about the age-old mechanisms of writing commands onto script files and testing them in a separate environment before deployment and how this approach is being replaced by IaC. Similar to the codes written for other services, with the help of AWS, IaC allows developers to write, test, and maintain infrastructure entities in a descriptive manner, using formats such as JSON or YAML. This enables easier development and faster deployment of infrastructure changes.</p><p>As a <a href="https://www.simplilearn.com/devops-engineer-masters-program-certification-training" target="_blank" rel="noopener">DevOps engineer</a>, an in-depth knowledge of processes, tools, and relevant technology are essential. You must also have a holistic understanding of the products, services, and systems in place. If your answers matched the answers we’ve provided above, you’re in great shape for future DevOps interviews. Good luck! If you’re looking for answers to specific DevOps interview questions that aren’t addressed here, ask them in the comments below. Our DevOps experts will help you craft the perfect answer.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Until recently, development engineers often worked in isolation, restricting their knowledge and skill sets to coding and testing, while 
      
    
    </summary>
    
    
      <category term="求职" scheme="http://blog.ozairs.com/tags/%E6%B1%82%E8%81%8C/"/>
    
  </entry>
  
</feed>
